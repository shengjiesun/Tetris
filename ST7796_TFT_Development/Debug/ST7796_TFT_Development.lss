
ST7796_TFT_Development.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000696  00800200  0000158a  0000161e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000158a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000069  00800896  00800896  00001cb4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001cb4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d10  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d0  00000000  00000000  00001d50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000042cb  00000000  00000000  00002020  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001911  00000000  00000000  000062eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a28  00000000  00000000  00007bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a0c  00000000  00000000  00009624  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f6b  00000000  00000000  0000a030  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003277  00000000  00000000  0000af9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000230  00000000  00000000  0000e212  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	ee c0       	rjmp	.+476    	; 0x23a <__vector_23>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	40 c7       	rjmp	.+3712   	; 0xee6 <__vector_25>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	18 e0       	ldi	r17, 0x08	; 8
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ea e8       	ldi	r30, 0x8A	; 138
      fc:	f5 e1       	ldi	r31, 0x15	; 21
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a6 39       	cpi	r26, 0x96	; 150
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	28 e0       	ldi	r18, 0x08	; 8
     110:	a6 e9       	ldi	r26, 0x96	; 150
     112:	b8 e0       	ldi	r27, 0x08	; 8
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	af 3f       	cpi	r26, 0xFF	; 255
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	b9 d4       	rcall	.+2418   	; 0xa92 <main>
     120:	0c 94 c3 0a 	jmp	0x1586	; 0x1586 <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <ADC_init>:
uint8_t pin_new = 0xff;
uint8_t pin_old = 0xff;

void ADC_init(void)
{
	ADMUX = (1<<REFS0); //use AVcc with external capacitor at AREF pin
     126:	80 e4       	ldi	r24, 0x40	; 64
     128:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRA = (1<<ADEN) | (1<<ADATE) | (7<<ADPS0); //enable ADC, single conversion, prescaler 128 -> (16Mhz->125khz)
     12c:	ea e7       	ldi	r30, 0x7A	; 122
     12e:	f0 e0       	ldi	r31, 0x00	; 0
     130:	87 ea       	ldi	r24, 0xA7	; 167
     132:	80 83       	st	Z, r24
	ADCSRB = 0x00; //free running mode
     134:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
	ADCSRA |= (1 << ADSC); //Start conversion
     138:	80 81       	ld	r24, Z
     13a:	80 64       	ori	r24, 0x40	; 64
     13c:	80 83       	st	Z, r24
     13e:	08 95       	ret

00000140 <ADC_read>:
}


uint16_t ADC_read(uint8_t pin)
{
	pin_new = pin;
     140:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <pin_new>
	//Check if the ADC channel is changed, if sample channel is changed, 
	//need at least 250us delay for Multiplexer to settle;
	if (pin_new != pin_old) 
     144:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     148:	89 17       	cp	r24, r25
     14a:	09 f4       	brne	.+2      	; 0x14e <ADC_read+0xe>
     14c:	4d c0       	rjmp	.+154    	; 0x1e8 <ADC_read+0xa8>
	{
		switch (pin)
     14e:	82 30       	cpi	r24, 0x02	; 2
     150:	f1 f0       	breq	.+60     	; 0x18e <ADC_read+0x4e>
     152:	28 f4       	brcc	.+10     	; 0x15e <ADC_read+0x1e>
     154:	88 23       	and	r24, r24
     156:	49 f0       	breq	.+18     	; 0x16a <ADC_read+0x2a>
     158:	81 30       	cpi	r24, 0x01	; 1
     15a:	81 f0       	breq	.+32     	; 0x17c <ADC_read+0x3c>
     15c:	3b c0       	rjmp	.+118    	; 0x1d4 <ADC_read+0x94>
     15e:	84 30       	cpi	r24, 0x04	; 4
     160:	41 f1       	breq	.+80     	; 0x1b2 <ADC_read+0x72>
     162:	f0 f0       	brcs	.+60     	; 0x1a0 <ADC_read+0x60>
     164:	85 30       	cpi	r24, 0x05	; 5
     166:	71 f1       	breq	.+92     	; 0x1c4 <ADC_read+0x84>
     168:	35 c0       	rjmp	.+106    	; 0x1d4 <ADC_read+0x94>
		{
			case 0: ADMUX = 0x40; //ADMUX = 0b01000000 -> ADC0
     16a:	80 e4       	ldi	r24, 0x40	; 64
     16c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
			DIDR0 |= (1<<ADC0D); //turn off input buffer, to reduce power consumption
     170:	ee e7       	ldi	r30, 0x7E	; 126
     172:	f0 e0       	ldi	r31, 0x00	; 0
     174:	80 81       	ld	r24, Z
     176:	81 60       	ori	r24, 0x01	; 1
     178:	80 83       	st	Z, r24
			break;
     17a:	2c c0       	rjmp	.+88     	; 0x1d4 <ADC_read+0x94>
			case 1: ADMUX = 0x41; //ADMUX = 0b01000001 -> ADC1
     17c:	81 e4       	ldi	r24, 0x41	; 65
     17e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
			DIDR0 |= (1<<ADC1D); //turn off input buffer, to reduce power consumption
     182:	ee e7       	ldi	r30, 0x7E	; 126
     184:	f0 e0       	ldi	r31, 0x00	; 0
     186:	80 81       	ld	r24, Z
     188:	82 60       	ori	r24, 0x02	; 2
     18a:	80 83       	st	Z, r24
			break;
     18c:	23 c0       	rjmp	.+70     	; 0x1d4 <ADC_read+0x94>
			case 2: ADMUX = 0x42; //ADMUX = 0b010000010 -> ADC2
     18e:	82 e4       	ldi	r24, 0x42	; 66
     190:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
			DIDR0 |= (1<<ADC1D); //turn off input buffer, to reduce power consumption
     194:	ee e7       	ldi	r30, 0x7E	; 126
     196:	f0 e0       	ldi	r31, 0x00	; 0
     198:	80 81       	ld	r24, Z
     19a:	82 60       	ori	r24, 0x02	; 2
     19c:	80 83       	st	Z, r24
			break;
     19e:	1a c0       	rjmp	.+52     	; 0x1d4 <ADC_read+0x94>
			case 3: ADMUX = 0x43; //ADMUX = 0b010000011 -> ADC3
     1a0:	83 e4       	ldi	r24, 0x43	; 67
     1a2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
			DIDR0 |= (1<<ADC2D); //turn off input buffer, to reduce power consumption
     1a6:	ee e7       	ldi	r30, 0x7E	; 126
     1a8:	f0 e0       	ldi	r31, 0x00	; 0
     1aa:	80 81       	ld	r24, Z
     1ac:	84 60       	ori	r24, 0x04	; 4
     1ae:	80 83       	st	Z, r24
			break;
     1b0:	11 c0       	rjmp	.+34     	; 0x1d4 <ADC_read+0x94>
			case 4: ADMUX = 0x44; //ADMUX = 0b01000100 -> ADC4
     1b2:	84 e4       	ldi	r24, 0x44	; 68
     1b4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
			DIDR0 |= (1<<ADC3D); //turn off input buffer, to reduce power consumption
     1b8:	ee e7       	ldi	r30, 0x7E	; 126
     1ba:	f0 e0       	ldi	r31, 0x00	; 0
     1bc:	80 81       	ld	r24, Z
     1be:	88 60       	ori	r24, 0x08	; 8
     1c0:	80 83       	st	Z, r24
			break;
     1c2:	08 c0       	rjmp	.+16     	; 0x1d4 <ADC_read+0x94>
			case 5: ADMUX = 0x45; //ADMUX = 0b010000101 -> ADC5
     1c4:	85 e4       	ldi	r24, 0x45	; 69
     1c6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
			DIDR0 |= (1<<ADC4D); //turn off input buffer, to reduce power consumption
     1ca:	ee e7       	ldi	r30, 0x7E	; 126
     1cc:	f0 e0       	ldi	r31, 0x00	; 0
     1ce:	80 81       	ld	r24, Z
     1d0:	80 61       	ori	r24, 0x10	; 16
     1d2:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1d4:	8f ea       	ldi	r24, 0xAF	; 175
     1d6:	94 e0       	ldi	r25, 0x04	; 4
     1d8:	01 97       	sbiw	r24, 0x01	; 1
     1da:	f1 f7       	brne	.-4      	; 0x1d8 <ADC_read+0x98>
     1dc:	00 c0       	rjmp	.+0      	; 0x1de <ADC_read+0x9e>
     1de:	00 00       	nop
			break;
			default: break;
		}
		_delay_us(300);
		pin_old = pin_new;
     1e0:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <pin_new>
     1e4:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
	}
	
	uint16_t ADC_value = ADCL ;
     1e8:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
	ADC_value += (ADCH<<8);
     1ec:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
	return ADC_value;
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	98 2f       	mov	r25, r24
     1f4:	88 27       	eor	r24, r24
}
     1f6:	82 0f       	add	r24, r18
     1f8:	91 1d       	adc	r25, r1
     1fa:	08 95       	ret

000001fc <timer0_init>:
	bit 2 = 0
	
	WGM01 = 0     "Normal" timer/counter mode
	WGM00 = 0
	*/
	TCCR0A = 0b00000000;
     1fc:	14 bc       	out	0x24, r1	; 36
	
	CS02 = 0
	CS01 = 1      clock / 64 = 250kHz -> /256 -> 1024us per overflow
	CS00 = 1
	*/
	TCCR0B = 0b00000011;
     1fe:	83 e0       	ldi	r24, 0x03	; 3
     200:	85 bd       	out	0x25, r24	; 37
	bit 3 = 0
	OCIE0B = 0    don't enable Timer/Counter 0 Output Compare Match B Interrupt
	OCIE0A = 0    don't enable Timer/Counter 0 Output Compare Match A Interrupt Enable
	TOIE0 = 1     enable Timer/Counter 0 Overflow Interrupt
	*/
	TIMSK0 = 0b00000001;
     202:	81 e0       	ldi	r24, 0x01	; 1
     204:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
	TCNT0 = 0;
     208:	16 bc       	out	0x26, r1	; 38
     20a:	08 95       	ret

0000020c <Backlight_Init>:
	
}

void Backlight_Init(void)
{
  timer0_init();
     20c:	f7 cf       	rjmp	.-18     	; 0x1fc <timer0_init>
     20e:	08 95       	ret

00000210 <SetBackLightDuty>:
}

void SetBackLightDuty(uint8_t dutyCycle)
{
  DDRB |= (1<<PB7);  //set pin as output
     210:	27 9a       	sbi	0x04, 7	; 4
  TCCR0A |= (1<<COM0A1); //enable output compare on PD6, clear OC0A on compare, set OC0A at BOTTOM
     212:	94 b5       	in	r25, 0x24	; 36
     214:	90 68       	ori	r25, 0x80	; 128
     216:	94 bd       	out	0x24, r25	; 36
  TCCR0A |= (1<<WGM01) | (1<<WGM00); //Fast PWM mode
     218:	94 b5       	in	r25, 0x24	; 36
     21a:	93 60       	ori	r25, 0x03	; 3
     21c:	94 bd       	out	0x24, r25	; 36
  
  if (dutyCycle > 100) OCR0A = 0xff;    //upper 8bit PWM boundary
     21e:	85 36       	cpi	r24, 0x65	; 101
     220:	18 f0       	brcs	.+6      	; 0x228 <SetBackLightDuty+0x18>
     222:	8f ef       	ldi	r24, 0xFF	; 255
     224:	87 bd       	out	0x27, r24	; 39
     226:	08 95       	ret
  else if(dutyCycle < 0) OCR0A = 0x00;  //lower PWM boundary
  else if ((dutyCycle <= 100) && (dutyCycle >= 0)) OCR0A = dutyCycle * 255 / 100; //duty cycle percentage converted to 8 bit
     228:	2f ef       	ldi	r18, 0xFF	; 255
     22a:	82 9f       	mul	r24, r18
     22c:	c0 01       	movw	r24, r0
     22e:	11 24       	eor	r1, r1
     230:	64 e6       	ldi	r22, 0x64	; 100
     232:	70 e0       	ldi	r23, 0x00	; 0
     234:	a6 d6       	rcall	.+3404   	; 0xf82 <__divmodhi4>
     236:	67 bd       	out	0x27, r22	; 39
     238:	08 95       	ret

0000023a <__vector_23>:

/************************************************************************/
/* Private function definitions                                         */
/************************************************************************/
ISR (TIMER0_OVF_vect)
{
     23a:	1f 92       	push	r1
     23c:	0f 92       	push	r0
     23e:	0f b6       	in	r0, 0x3f	; 63
     240:	0f 92       	push	r0
     242:	11 24       	eor	r1, r1
     244:	2f 93       	push	r18
     246:	3f 93       	push	r19
     248:	8f 93       	push	r24
     24a:	9f 93       	push	r25
     24c:	af 93       	push	r26
     24e:	bf 93       	push	r27
  unsigned long m = milli_second;
     250:	80 91 9e 08 	lds	r24, 0x089E	; 0x80089e <milli_second>
     254:	90 91 9f 08 	lds	r25, 0x089F	; 0x80089f <milli_second+0x1>
     258:	a0 91 a0 08 	lds	r26, 0x08A0	; 0x8008a0 <milli_second+0x2>
     25c:	b0 91 a1 08 	lds	r27, 0x08A1	; 0x8008a1 <milli_second+0x3>
  unsigned char f = milli_fraction;
     260:	30 91 9d 08 	lds	r19, 0x089D	; 0x80089d <milli_fraction>
  m += MILLIS_INC;
  f += FRACT_INC;
     264:	23 e0       	ldi	r18, 0x03	; 3
     266:	23 0f       	add	r18, r19
  if (f >= FRACT_MAX) {
     268:	2d 37       	cpi	r18, 0x7D	; 125
     26a:	20 f4       	brcc	.+8      	; 0x274 <__vector_23+0x3a>
/************************************************************************/
ISR (TIMER0_OVF_vect)
{
  unsigned long m = milli_second;
  unsigned char f = milli_fraction;
  m += MILLIS_INC;
     26c:	01 96       	adiw	r24, 0x01	; 1
     26e:	a1 1d       	adc	r26, r1
     270:	b1 1d       	adc	r27, r1
     272:	05 c0       	rjmp	.+10     	; 0x27e <__vector_23+0x44>
  f += FRACT_INC;
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
     274:	26 e8       	ldi	r18, 0x86	; 134
     276:	23 0f       	add	r18, r19
    m +=1;
     278:	02 96       	adiw	r24, 0x02	; 2
     27a:	a1 1d       	adc	r26, r1
     27c:	b1 1d       	adc	r27, r1
  }
  milli_second = m;
     27e:	80 93 9e 08 	sts	0x089E, r24	; 0x80089e <milli_second>
     282:	90 93 9f 08 	sts	0x089F, r25	; 0x80089f <milli_second+0x1>
     286:	a0 93 a0 08 	sts	0x08A0, r26	; 0x8008a0 <milli_second+0x2>
     28a:	b0 93 a1 08 	sts	0x08A1, r27	; 0x8008a1 <milli_second+0x3>
  milli_fraction = f;
     28e:	20 93 9d 08 	sts	0x089D, r18	; 0x80089d <milli_fraction>
  timer0_counts++;
     292:	80 91 99 08 	lds	r24, 0x0899	; 0x800899 <timer0_counts>
     296:	90 91 9a 08 	lds	r25, 0x089A	; 0x80089a <timer0_counts+0x1>
     29a:	a0 91 9b 08 	lds	r26, 0x089B	; 0x80089b <timer0_counts+0x2>
     29e:	b0 91 9c 08 	lds	r27, 0x089C	; 0x80089c <timer0_counts+0x3>
     2a2:	01 96       	adiw	r24, 0x01	; 1
     2a4:	a1 1d       	adc	r26, r1
     2a6:	b1 1d       	adc	r27, r1
     2a8:	80 93 99 08 	sts	0x0899, r24	; 0x800899 <timer0_counts>
     2ac:	90 93 9a 08 	sts	0x089A, r25	; 0x80089a <timer0_counts+0x1>
     2b0:	a0 93 9b 08 	sts	0x089B, r26	; 0x80089b <timer0_counts+0x2>
     2b4:	b0 93 9c 08 	sts	0x089C, r27	; 0x80089c <timer0_counts+0x3>
     2b8:	bf 91       	pop	r27
     2ba:	af 91       	pop	r26
     2bc:	9f 91       	pop	r25
     2be:	8f 91       	pop	r24
     2c0:	3f 91       	pop	r19
     2c2:	2f 91       	pop	r18
     2c4:	0f 90       	pop	r0
     2c6:	0f be       	out	0x3f, r0	; 63
     2c8:	0f 90       	pop	r0
     2ca:	1f 90       	pop	r1
     2cc:	18 95       	reti

000002ce <Button_init>:
 #include <avr/io.h>
 #include "ADC.h"

void Button_init(void)
{
  ADC_init();
     2ce:	2b df       	rcall	.-426    	; 0x126 <ADC_init>
  DDRF &= ~(1<<PF2);
     2d0:	82 98       	cbi	0x10, 2	; 16
  PORTF |= (1 << PF2);
     2d2:	8a 9a       	sbi	0x11, 2	; 17
     2d4:	08 95       	ret

000002d6 <readButtonX>:
}

uint16_t readButtonX(void)
{
  return ADC_read(0);
     2d6:	80 e0       	ldi	r24, 0x00	; 0
     2d8:	33 cf       	rjmp	.-410    	; 0x140 <ADC_read>
}
     2da:	08 95       	ret

000002dc <readButtonY>:

uint16_t readButtonY(void)
{
  return ADC_read(1);
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	30 cf       	rjmp	.-416    	; 0x140 <ADC_read>
}
     2e0:	08 95       	ret

000002e2 <readButtonSwitch>:

uint8_t readButtonSwitch(void)
{
  if (PINF & (1<<PF2)) return 1;
     2e2:	8f b1       	in	r24, 0x0f	; 15
  else return 0;
     2e4:	82 fb       	bst	r24, 2
     2e6:	88 27       	eor	r24, r24
     2e8:	80 f9       	bld	r24, 0
     2ea:	08 95       	ret

000002ec <LCD_WR_DATA>:
  LCD_CS_SET;
}

static void LCD_WR_DATA(uint8_t data)
{
  LCD_CS_CLR;
     2ec:	28 98       	cbi	0x05, 0	; 5
  LCD_RS_SET;
     2ee:	75 9a       	sbi	0x0e, 5	; 14
  SPI_Master_transmit(data);
     2f0:	e9 d4       	rcall	.+2514   	; 0xcc4 <SPI_Master_transmit>
  LCD_CS_SET;
     2f2:	28 9a       	sbi	0x05, 0	; 5
     2f4:	08 95       	ret

000002f6 <LCD_WR_REG>:
/************************************************************************/
/* Private function definitions                                         */
/************************************************************************/
static void LCD_WR_REG(uint8_t data)
{
  LCD_CS_CLR;
     2f6:	28 98       	cbi	0x05, 0	; 5
  LCD_RS_CLR;
     2f8:	75 98       	cbi	0x0e, 5	; 14
  SPI_Master_transmit(data);
     2fa:	e4 d4       	rcall	.+2504   	; 0xcc4 <SPI_Master_transmit>
  LCD_CS_SET;
     2fc:	28 9a       	sbi	0x05, 0	; 5
     2fe:	08 95       	ret

00000300 <LCD_RESET>:
  LCD_CS_SET;
}

void LCD_RESET(void)
{
  LCD_RST_CLR;
     300:	74 98       	cbi	0x0e, 4	; 14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     302:	2f ef       	ldi	r18, 0xFF	; 255
     304:	81 ee       	ldi	r24, 0xE1	; 225
     306:	94 e0       	ldi	r25, 0x04	; 4
     308:	21 50       	subi	r18, 0x01	; 1
     30a:	80 40       	sbci	r24, 0x00	; 0
     30c:	90 40       	sbci	r25, 0x00	; 0
     30e:	e1 f7       	brne	.-8      	; 0x308 <LCD_RESET+0x8>
     310:	00 c0       	rjmp	.+0      	; 0x312 <LCD_RESET+0x12>
     312:	00 00       	nop
  _delay_ms(100);
  LCD_RST_SET;
     314:	74 9a       	sbi	0x0e, 4	; 14
     316:	2f ef       	ldi	r18, 0xFF	; 255
     318:	80 e7       	ldi	r24, 0x70	; 112
     31a:	92 e0       	ldi	r25, 0x02	; 2
     31c:	21 50       	subi	r18, 0x01	; 1
     31e:	80 40       	sbci	r24, 0x00	; 0
     320:	90 40       	sbci	r25, 0x00	; 0
     322:	e1 f7       	brne	.-8      	; 0x31c <LCD_RESET+0x1c>
     324:	00 c0       	rjmp	.+0      	; 0x326 <LCD_RESET+0x26>
     326:	00 00       	nop
     328:	08 95       	ret

0000032a <LCD_SetWindows>:
  _delay_ms(50);
}

void LCD_SetWindows(uint16_t xStar, uint16_t yStar, uint16_t xEnd, uint16_t yEnd)
{
     32a:	af 92       	push	r10
     32c:	bf 92       	push	r11
     32e:	cf 92       	push	r12
     330:	df 92       	push	r13
     332:	ef 92       	push	r14
     334:	ff 92       	push	r15
     336:	0f 93       	push	r16
     338:	1f 93       	push	r17
     33a:	cf 93       	push	r28
     33c:	df 93       	push	r29
     33e:	b8 2e       	mov	r11, r24
     340:	a9 2e       	mov	r10, r25
     342:	f6 2e       	mov	r15, r22
     344:	e7 2e       	mov	r14, r23
     346:	d4 2e       	mov	r13, r20
     348:	c5 2e       	mov	r12, r21
     34a:	12 2f       	mov	r17, r18
     34c:	03 2f       	mov	r16, r19
  LCD_WR_REG(lcddev.setxcmd);
     34e:	c2 ea       	ldi	r28, 0xA2	; 162
     350:	d8 e0       	ldi	r29, 0x08	; 8
     352:	89 85       	ldd	r24, Y+9	; 0x09
     354:	d0 df       	rcall	.-96     	; 0x2f6 <LCD_WR_REG>
  LCD_WR_DATA(xStar >> 8);
     356:	8a 2d       	mov	r24, r10
     358:	c9 df       	rcall	.-110    	; 0x2ec <LCD_WR_DATA>
  LCD_WR_DATA(0x00FF & xStar);
     35a:	8b 2d       	mov	r24, r11
     35c:	c7 df       	rcall	.-114    	; 0x2ec <LCD_WR_DATA>
  LCD_WR_DATA(xEnd >> 8);
     35e:	8c 2d       	mov	r24, r12
     360:	c5 df       	rcall	.-118    	; 0x2ec <LCD_WR_DATA>
  LCD_WR_DATA(0x00FF & xEnd);
     362:	8d 2d       	mov	r24, r13
     364:	c3 df       	rcall	.-122    	; 0x2ec <LCD_WR_DATA>

  LCD_WR_REG(lcddev.setycmd);
     366:	8b 85       	ldd	r24, Y+11	; 0x0b
     368:	c6 df       	rcall	.-116    	; 0x2f6 <LCD_WR_REG>
  LCD_WR_DATA(yStar >> 8);
     36a:	8e 2d       	mov	r24, r14
     36c:	bf df       	rcall	.-130    	; 0x2ec <LCD_WR_DATA>
  LCD_WR_DATA(0x00FF & yStar);
     36e:	8f 2d       	mov	r24, r15
     370:	bd df       	rcall	.-134    	; 0x2ec <LCD_WR_DATA>
  LCD_WR_DATA(yEnd >> 8);
     372:	80 2f       	mov	r24, r16
     374:	bb df       	rcall	.-138    	; 0x2ec <LCD_WR_DATA>
     376:	81 2f       	mov	r24, r17
  LCD_WR_DATA(0x00FF & yEnd);
     378:	b9 df       	rcall	.-142    	; 0x2ec <LCD_WR_DATA>
     37a:	8f 81       	ldd	r24, Y+7	; 0x07
     37c:	bc df       	rcall	.-136    	; 0x2f6 <LCD_WR_REG>
  LCD_WR_DATA(LCD_RegValue);
}

static void LCD_WriteRAM_Prepare(void)
{
  LCD_WR_REG(lcddev.wramcmd);
     37e:	df 91       	pop	r29
     380:	cf 91       	pop	r28
     382:	1f 91       	pop	r17
  LCD_WR_DATA(0x00FF & yStar);
  LCD_WR_DATA(yEnd >> 8);
  LCD_WR_DATA(0x00FF & yEnd);

  LCD_WriteRAM_Prepare();
}
     384:	0f 91       	pop	r16
     386:	ff 90       	pop	r15
     388:	ef 90       	pop	r14
     38a:	df 90       	pop	r13
     38c:	cf 90       	pop	r12
     38e:	bf 90       	pop	r11
     390:	af 90       	pop	r10
     392:	08 95       	ret

00000394 <LCD_SetCursor>:
     394:	9b 01       	movw	r18, r22
     396:	ac 01       	movw	r20, r24
     398:	c8 cf       	rjmp	.-112    	; 0x32a <LCD_SetWindows>

void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
  LCD_SetWindows(Xpos,Ypos,Xpos,Ypos);
     39a:	08 95       	ret

0000039c <LCD_direction>:
}

void LCD_direction(LCD_Rotation_t direction)
{
  lcddev.setxcmd=0x2A;
     39c:	e2 ea       	ldi	r30, 0xA2	; 162
     39e:	f8 e0       	ldi	r31, 0x08	; 8
     3a0:	2a e2       	ldi	r18, 0x2A	; 42
     3a2:	30 e0       	ldi	r19, 0x00	; 0
     3a4:	32 87       	std	Z+10, r19	; 0x0a
     3a6:	21 87       	std	Z+9, r18	; 0x09
  lcddev.setycmd=0x2B;
     3a8:	2b e2       	ldi	r18, 0x2B	; 43
     3aa:	30 e0       	ldi	r19, 0x00	; 0
     3ac:	34 87       	std	Z+12, r19	; 0x0c
     3ae:	23 87       	std	Z+11, r18	; 0x0b
  lcddev.wramcmd=0x2C;
     3b0:	2c e2       	ldi	r18, 0x2C	; 44
     3b2:	30 e0       	ldi	r19, 0x00	; 0
     3b4:	30 87       	std	Z+8, r19	; 0x08
     3b6:	27 83       	std	Z+7, r18	; 0x07
  switch(direction)
     3b8:	81 30       	cpi	r24, 0x01	; 1
     3ba:	a9 f0       	breq	.+42     	; 0x3e6 <LCD_direction+0x4a>
     3bc:	28 f0       	brcs	.+10     	; 0x3c8 <LCD_direction+0x2c>
     3be:	82 30       	cpi	r24, 0x02	; 2
     3c0:	09 f1       	breq	.+66     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     3c2:	83 30       	cpi	r24, 0x03	; 3
     3c4:	71 f1       	breq	.+92     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     3c6:	08 95       	ret
  {
    case LCD_ROTATE_0:
      lcddev.width=LCD_W;
     3c8:	e2 ea       	ldi	r30, 0xA2	; 162
     3ca:	f8 e0       	ldi	r31, 0x08	; 8
     3cc:	80 e4       	ldi	r24, 0x40	; 64
     3ce:	91 e0       	ldi	r25, 0x01	; 1
     3d0:	91 83       	std	Z+1, r25	; 0x01
     3d2:	80 83       	st	Z, r24
      lcddev.height=LCD_H;
     3d4:	80 ee       	ldi	r24, 0xE0	; 224
     3d6:	91 e0       	ldi	r25, 0x01	; 1
     3d8:	93 83       	std	Z+3, r25	; 0x03
     3da:	82 83       	std	Z+2, r24	; 0x02
  LCD_CS_SET;
}

static void LCD_WriteReg(uint8_t LCD_Reg, uint8_t LCD_RegValue)
{
  LCD_WR_REG(LCD_Reg);
     3dc:	86 e3       	ldi	r24, 0x36	; 54
     3de:	8b df       	rcall	.-234    	; 0x2f6 <LCD_WR_REG>
  LCD_WR_DATA(LCD_RegValue);
     3e0:	88 e4       	ldi	r24, 0x48	; 72
     3e2:	84 cf       	rjmp	.-248    	; 0x2ec <LCD_WR_DATA>
     3e4:	08 95       	ret
      lcddev.width=LCD_W;
      lcddev.height=LCD_H;
      LCD_WriteReg(0x36,(1<<3)|(1<<6));
      break;
    case LCD_ROTATE_90:
      lcddev.width=LCD_H;
     3e6:	e2 ea       	ldi	r30, 0xA2	; 162
     3e8:	f8 e0       	ldi	r31, 0x08	; 8
     3ea:	80 ee       	ldi	r24, 0xE0	; 224
     3ec:	91 e0       	ldi	r25, 0x01	; 1
     3ee:	91 83       	std	Z+1, r25	; 0x01
     3f0:	80 83       	st	Z, r24
      lcddev.height=LCD_W;
     3f2:	80 e4       	ldi	r24, 0x40	; 64
     3f4:	91 e0       	ldi	r25, 0x01	; 1
     3f6:	93 83       	std	Z+3, r25	; 0x03
  LCD_CS_SET;
}

static void LCD_WriteReg(uint8_t LCD_Reg, uint8_t LCD_RegValue)
{
  LCD_WR_REG(LCD_Reg);
     3f8:	82 83       	std	Z+2, r24	; 0x02
     3fa:	86 e3       	ldi	r24, 0x36	; 54
  LCD_WR_DATA(LCD_RegValue);
     3fc:	7c df       	rcall	.-264    	; 0x2f6 <LCD_WR_REG>
     3fe:	88 e2       	ldi	r24, 0x28	; 40
     400:	75 cf       	rjmp	.-278    	; 0x2ec <LCD_WR_DATA>
     402:	08 95       	ret
      lcddev.width=LCD_H;
      lcddev.height=LCD_W;
      LCD_WriteReg(0x36,(1<<3)|(1<<5));
      break;
    case LCD_ROTATE_180:
      lcddev.width=LCD_W;
     404:	e2 ea       	ldi	r30, 0xA2	; 162
     406:	f8 e0       	ldi	r31, 0x08	; 8
     408:	80 e4       	ldi	r24, 0x40	; 64
     40a:	91 e0       	ldi	r25, 0x01	; 1
     40c:	91 83       	std	Z+1, r25	; 0x01
     40e:	80 83       	st	Z, r24
      lcddev.height=LCD_H;
     410:	80 ee       	ldi	r24, 0xE0	; 224
     412:	91 e0       	ldi	r25, 0x01	; 1
     414:	93 83       	std	Z+3, r25	; 0x03
  LCD_CS_SET;
}

static void LCD_WriteReg(uint8_t LCD_Reg, uint8_t LCD_RegValue)
{
  LCD_WR_REG(LCD_Reg);
     416:	82 83       	std	Z+2, r24	; 0x02
     418:	86 e3       	ldi	r24, 0x36	; 54
     41a:	6d df       	rcall	.-294    	; 0x2f6 <LCD_WR_REG>
  LCD_WR_DATA(LCD_RegValue);
     41c:	88 e8       	ldi	r24, 0x88	; 136
     41e:	66 cf       	rjmp	.-308    	; 0x2ec <LCD_WR_DATA>
     420:	08 95       	ret
     422:	e2 ea       	ldi	r30, 0xA2	; 162
      lcddev.width=LCD_W;
      lcddev.height=LCD_H;
      LCD_WriteReg(0x36,(1<<3)|(1<<7));
      break;
    case LCD_ROTATE_270:
      lcddev.width=LCD_H;
     424:	f8 e0       	ldi	r31, 0x08	; 8
     426:	80 ee       	ldi	r24, 0xE0	; 224
     428:	91 e0       	ldi	r25, 0x01	; 1
     42a:	91 83       	std	Z+1, r25	; 0x01
     42c:	80 83       	st	Z, r24
      lcddev.height=LCD_W;
     42e:	80 e4       	ldi	r24, 0x40	; 64
     430:	91 e0       	ldi	r25, 0x01	; 1
     432:	93 83       	std	Z+3, r25	; 0x03
  LCD_CS_SET;
}

static void LCD_WriteReg(uint8_t LCD_Reg, uint8_t LCD_RegValue)
{
  LCD_WR_REG(LCD_Reg);
     434:	82 83       	std	Z+2, r24	; 0x02
     436:	86 e3       	ldi	r24, 0x36	; 54
     438:	5e df       	rcall	.-324    	; 0x2f6 <LCD_WR_REG>
  LCD_WR_DATA(LCD_RegValue);
     43a:	88 ee       	ldi	r24, 0xE8	; 232
     43c:	57 cf       	rjmp	.-338    	; 0x2ec <LCD_WR_DATA>
     43e:	08 95       	ret

00000440 <LCD_SetBackLight>:
     440:	e7 ce       	rjmp	.-562    	; 0x210 <SetBackLightDuty>
  LCD_WriteData_16Bit(colour);
}

void LCD_SetBackLight(uint8_t duty)
{
  SetBackLightDuty(duty);
     442:	08 95       	ret

00000444 <LCD_WriteData_16Bit>:
}

void LCD_WriteData_16Bit(uint16_t Data)
{
     444:	cf 93       	push	r28
     446:	c8 2f       	mov	r28, r24
  LCD_CS_CLR;
     448:	28 98       	cbi	0x05, 0	; 5
  LCD_RS_SET;
     44a:	75 9a       	sbi	0x0e, 5	; 14
  SPI_Master_transmit(Data>>8);
     44c:	89 2f       	mov	r24, r25
     44e:	3a d4       	rcall	.+2164   	; 0xcc4 <SPI_Master_transmit>
  SPI_Master_transmit(Data);
     450:	8c 2f       	mov	r24, r28
     452:	38 d4       	rcall	.+2160   	; 0xcc4 <SPI_Master_transmit>
  LCD_CS_SET;
     454:	28 9a       	sbi	0x05, 0	; 5
}
     456:	cf 91       	pop	r28
     458:	08 95       	ret

0000045a <LCD_Clear>:
  SetBackLightDuty(100);
  LCD_Clear(BLACK);
}

void LCD_Clear(uint16_t Color)
{
     45a:	cf 92       	push	r12
     45c:	df 92       	push	r13
     45e:	ef 92       	push	r14
     460:	ff 92       	push	r15
     462:	0f 93       	push	r16
     464:	1f 93       	push	r17
     466:	cf 93       	push	r28
     468:	df 93       	push	r29
     46a:	7c 01       	movw	r14, r24
  unsigned int i,m;
  LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);
     46c:	c2 ea       	ldi	r28, 0xA2	; 162
     46e:	d8 e0       	ldi	r29, 0x08	; 8
     470:	2a 81       	ldd	r18, Y+2	; 0x02
     472:	3b 81       	ldd	r19, Y+3	; 0x03
     474:	21 50       	subi	r18, 0x01	; 1
     476:	31 09       	sbc	r19, r1
     478:	48 81       	ld	r20, Y
     47a:	59 81       	ldd	r21, Y+1	; 0x01
     47c:	41 50       	subi	r20, 0x01	; 1
     47e:	51 09       	sbc	r21, r1
     480:	60 e0       	ldi	r22, 0x00	; 0
     482:	70 e0       	ldi	r23, 0x00	; 0
     484:	80 e0       	ldi	r24, 0x00	; 0
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	50 df       	rcall	.-352    	; 0x32a <LCD_SetWindows>
  LCD_CS_CLR;
     48a:	28 98       	cbi	0x05, 0	; 5
  LCD_RS_SET;
     48c:	75 9a       	sbi	0x0e, 5	; 14
  for(i=0;i<lcddev.height;i++)
     48e:	8a 81       	ldd	r24, Y+2	; 0x02
     490:	9b 81       	ldd	r25, Y+3	; 0x03
     492:	89 2b       	or	r24, r25
     494:	b1 f4       	brne	.+44     	; 0x4c2 <LCD_Clear+0x68>
     496:	1f c0       	rjmp	.+62     	; 0x4d6 <LCD_Clear+0x7c>
  {
    for(m=0;m<lcddev.width;m++)
     498:	c0 e0       	ldi	r28, 0x00	; 0
     49a:	d0 e0       	ldi	r29, 0x00	; 0
    {
      LCD_WriteData_16Bit(Color);
     49c:	c7 01       	movw	r24, r14
     49e:	d2 df       	rcall	.-92     	; 0x444 <LCD_WriteData_16Bit>
  LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);
  LCD_CS_CLR;
  LCD_RS_SET;
  for(i=0;i<lcddev.height;i++)
  {
    for(m=0;m<lcddev.width;m++)
     4a0:	21 96       	adiw	r28, 0x01	; 1
     4a2:	f8 01       	movw	r30, r16
     4a4:	80 81       	ld	r24, Z
     4a6:	91 81       	ldd	r25, Z+1	; 0x01
     4a8:	c8 17       	cp	r28, r24
     4aa:	d9 07       	cpc	r29, r25
     4ac:	b8 f3       	brcs	.-18     	; 0x49c <LCD_Clear+0x42>
{
  unsigned int i,m;
  LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);
  LCD_CS_CLR;
  LCD_RS_SET;
  for(i=0;i<lcddev.height;i++)
     4ae:	ff ef       	ldi	r31, 0xFF	; 255
     4b0:	cf 1a       	sub	r12, r31
     4b2:	df 0a       	sbc	r13, r31
     4b4:	f8 01       	movw	r30, r16
     4b6:	82 81       	ldd	r24, Z+2	; 0x02
     4b8:	93 81       	ldd	r25, Z+3	; 0x03
     4ba:	c8 16       	cp	r12, r24
     4bc:	d9 06       	cpc	r13, r25
     4be:	28 f0       	brcs	.+10     	; 0x4ca <LCD_Clear+0x70>
     4c0:	0a c0       	rjmp	.+20     	; 0x4d6 <LCD_Clear+0x7c>
     4c2:	c1 2c       	mov	r12, r1
     4c4:	d1 2c       	mov	r13, r1
  {
    for(m=0;m<lcddev.width;m++)
     4c6:	02 ea       	ldi	r16, 0xA2	; 162
     4c8:	18 e0       	ldi	r17, 0x08	; 8
     4ca:	f8 01       	movw	r30, r16
     4cc:	80 81       	ld	r24, Z
     4ce:	91 81       	ldd	r25, Z+1	; 0x01
     4d0:	89 2b       	or	r24, r25
     4d2:	11 f7       	brne	.-60     	; 0x498 <LCD_Clear+0x3e>
     4d4:	ec cf       	rjmp	.-40     	; 0x4ae <LCD_Clear+0x54>
    {
      LCD_WriteData_16Bit(Color);
    }
  }
  LCD_CS_SET;
     4d6:	28 9a       	sbi	0x05, 0	; 5
}
     4d8:	df 91       	pop	r29
     4da:	cf 91       	pop	r28
     4dc:	1f 91       	pop	r17
     4de:	0f 91       	pop	r16
     4e0:	ff 90       	pop	r15
     4e2:	ef 90       	pop	r14
     4e4:	df 90       	pop	r13
     4e6:	cf 90       	pop	r12
     4e8:	08 95       	ret

000004ea <LCD_Init>:
/************************************************************************/
/* Public function definitions                                          */
/************************************************************************/
void LCD_Init(void)
{
  SPI_Master_init();
     4ea:	c4 d3       	rcall	.+1928   	; 0xc74 <SPI_Master_init>
  LCD_WR_REG(lcddev.wramcmd);
}

void LCD_GPIOInit(void)
{
  DDR_LCD_CTRL |= ((1 << LCD_RST) | (1 << LCD_RS));
     4ec:	8d b1       	in	r24, 0x0d	; 13
     4ee:	80 63       	ori	r24, 0x30	; 48
/************************************************************************/
void LCD_Init(void)
{
  SPI_Master_init();
  LCD_GPIOInit();
  Backlight_Init();
     4f0:	8d b9       	out	0x0d, r24	; 13
  LCD_RESET();
     4f2:	8c de       	rcall	.-744    	; 0x20c <Backlight_Init>

  LCD_WR_REG(0xF0);
     4f4:	05 df       	rcall	.-502    	; 0x300 <LCD_RESET>
     4f6:	80 ef       	ldi	r24, 0xF0	; 240
  LCD_WR_DATA(0xC3);
     4f8:	fe de       	rcall	.-516    	; 0x2f6 <LCD_WR_REG>
     4fa:	83 ec       	ldi	r24, 0xC3	; 195
  LCD_WR_REG(0xF0);
     4fc:	f7 de       	rcall	.-530    	; 0x2ec <LCD_WR_DATA>
     4fe:	80 ef       	ldi	r24, 0xF0	; 240
  LCD_WR_DATA(0x96);
     500:	fa de       	rcall	.-524    	; 0x2f6 <LCD_WR_REG>
     502:	86 e9       	ldi	r24, 0x96	; 150
  LCD_WR_REG(0x36);
     504:	f3 de       	rcall	.-538    	; 0x2ec <LCD_WR_DATA>
     506:	86 e3       	ldi	r24, 0x36	; 54
  LCD_WR_DATA(0x68);
     508:	f6 de       	rcall	.-532    	; 0x2f6 <LCD_WR_REG>
     50a:	88 e6       	ldi	r24, 0x68	; 104
  LCD_WR_REG(0x3A);
     50c:	ef de       	rcall	.-546    	; 0x2ec <LCD_WR_DATA>
     50e:	8a e3       	ldi	r24, 0x3A	; 58
  LCD_WR_DATA(0x05);
     510:	f2 de       	rcall	.-540    	; 0x2f6 <LCD_WR_REG>
     512:	85 e0       	ldi	r24, 0x05	; 5
  LCD_WR_REG(0xB0);
     514:	eb de       	rcall	.-554    	; 0x2ec <LCD_WR_DATA>
     516:	80 eb       	ldi	r24, 0xB0	; 176
  LCD_WR_DATA(0x80);
     518:	ee de       	rcall	.-548    	; 0x2f6 <LCD_WR_REG>
     51a:	80 e8       	ldi	r24, 0x80	; 128
  LCD_WR_REG(0xB6);
     51c:	e7 de       	rcall	.-562    	; 0x2ec <LCD_WR_DATA>
     51e:	86 eb       	ldi	r24, 0xB6	; 182
  LCD_WR_DATA(0x00);
     520:	ea de       	rcall	.-556    	; 0x2f6 <LCD_WR_REG>
     522:	80 e0       	ldi	r24, 0x00	; 0
  LCD_WR_DATA(0x02);
     524:	e3 de       	rcall	.-570    	; 0x2ec <LCD_WR_DATA>
     526:	82 e0       	ldi	r24, 0x02	; 2
  LCD_WR_REG(0xB5);
     528:	e1 de       	rcall	.-574    	; 0x2ec <LCD_WR_DATA>
     52a:	85 eb       	ldi	r24, 0xB5	; 181
  LCD_WR_DATA(0x02);
     52c:	e4 de       	rcall	.-568    	; 0x2f6 <LCD_WR_REG>
     52e:	82 e0       	ldi	r24, 0x02	; 2
  LCD_WR_DATA(0x03);
     530:	dd de       	rcall	.-582    	; 0x2ec <LCD_WR_DATA>
     532:	83 e0       	ldi	r24, 0x03	; 3
  LCD_WR_DATA(0x00);
     534:	db de       	rcall	.-586    	; 0x2ec <LCD_WR_DATA>
     536:	80 e0       	ldi	r24, 0x00	; 0
  LCD_WR_DATA(0x04);
     538:	d9 de       	rcall	.-590    	; 0x2ec <LCD_WR_DATA>
     53a:	84 e0       	ldi	r24, 0x04	; 4
  LCD_WR_REG(0xB1);
     53c:	d7 de       	rcall	.-594    	; 0x2ec <LCD_WR_DATA>
     53e:	81 eb       	ldi	r24, 0xB1	; 177
  LCD_WR_DATA(0x80);
     540:	da de       	rcall	.-588    	; 0x2f6 <LCD_WR_REG>
     542:	80 e8       	ldi	r24, 0x80	; 128
  LCD_WR_DATA(0x10);
     544:	d3 de       	rcall	.-602    	; 0x2ec <LCD_WR_DATA>
     546:	80 e1       	ldi	r24, 0x10	; 16
  LCD_WR_REG(0xB4);
     548:	d1 de       	rcall	.-606    	; 0x2ec <LCD_WR_DATA>
     54a:	84 eb       	ldi	r24, 0xB4	; 180
  LCD_WR_DATA(0x00);
     54c:	d4 de       	rcall	.-600    	; 0x2f6 <LCD_WR_REG>
     54e:	80 e0       	ldi	r24, 0x00	; 0
  LCD_WR_REG(0xB7);
     550:	cd de       	rcall	.-614    	; 0x2ec <LCD_WR_DATA>
     552:	87 eb       	ldi	r24, 0xB7	; 183
  LCD_WR_DATA(0xC6);
     554:	d0 de       	rcall	.-608    	; 0x2f6 <LCD_WR_REG>
     556:	86 ec       	ldi	r24, 0xC6	; 198
  LCD_WR_REG(0xC5);
     558:	c9 de       	rcall	.-622    	; 0x2ec <LCD_WR_DATA>
     55a:	85 ec       	ldi	r24, 0xC5	; 197
  LCD_WR_DATA(0x24);
     55c:	cc de       	rcall	.-616    	; 0x2f6 <LCD_WR_REG>
     55e:	84 e2       	ldi	r24, 0x24	; 36
  LCD_WR_REG(0xE4);
     560:	c5 de       	rcall	.-630    	; 0x2ec <LCD_WR_DATA>
     562:	84 ee       	ldi	r24, 0xE4	; 228
  LCD_WR_DATA(0x31);
     564:	c8 de       	rcall	.-624    	; 0x2f6 <LCD_WR_REG>
     566:	81 e3       	ldi	r24, 0x31	; 49
  LCD_WR_REG(0xE8);
     568:	c1 de       	rcall	.-638    	; 0x2ec <LCD_WR_DATA>
     56a:	88 ee       	ldi	r24, 0xE8	; 232
  LCD_WR_DATA(0x40);
     56c:	c4 de       	rcall	.-632    	; 0x2f6 <LCD_WR_REG>
     56e:	80 e4       	ldi	r24, 0x40	; 64
  LCD_WR_DATA(0x8A);
     570:	bd de       	rcall	.-646    	; 0x2ec <LCD_WR_DATA>
     572:	8a e8       	ldi	r24, 0x8A	; 138
  LCD_WR_DATA(0x00);
     574:	bb de       	rcall	.-650    	; 0x2ec <LCD_WR_DATA>
     576:	80 e0       	ldi	r24, 0x00	; 0
  LCD_WR_DATA(0x00);
     578:	b9 de       	rcall	.-654    	; 0x2ec <LCD_WR_DATA>
     57a:	80 e0       	ldi	r24, 0x00	; 0
  LCD_WR_DATA(0x29);
     57c:	b7 de       	rcall	.-658    	; 0x2ec <LCD_WR_DATA>
     57e:	89 e2       	ldi	r24, 0x29	; 41
  LCD_WR_DATA(0x19);
     580:	b5 de       	rcall	.-662    	; 0x2ec <LCD_WR_DATA>
     582:	89 e1       	ldi	r24, 0x19	; 25
  LCD_WR_DATA(0xA5);
     584:	b3 de       	rcall	.-666    	; 0x2ec <LCD_WR_DATA>
     586:	85 ea       	ldi	r24, 0xA5	; 165
  LCD_WR_DATA(0x33);
     588:	b1 de       	rcall	.-670    	; 0x2ec <LCD_WR_DATA>
     58a:	83 e3       	ldi	r24, 0x33	; 51
  LCD_WR_REG(0xC2);
     58c:	af de       	rcall	.-674    	; 0x2ec <LCD_WR_DATA>
     58e:	82 ec       	ldi	r24, 0xC2	; 194
  LCD_WR_REG(0xA7);
     590:	b2 de       	rcall	.-668    	; 0x2f6 <LCD_WR_REG>
     592:	87 ea       	ldi	r24, 0xA7	; 167

  LCD_WR_REG(0xE0);
     594:	b0 de       	rcall	.-672    	; 0x2f6 <LCD_WR_REG>
     596:	80 ee       	ldi	r24, 0xE0	; 224
  LCD_WR_DATA(0xF0);
     598:	ae de       	rcall	.-676    	; 0x2f6 <LCD_WR_REG>
     59a:	80 ef       	ldi	r24, 0xF0	; 240
  LCD_WR_DATA(0x09);
     59c:	a7 de       	rcall	.-690    	; 0x2ec <LCD_WR_DATA>
     59e:	89 e0       	ldi	r24, 0x09	; 9
  LCD_WR_DATA(0x13);
     5a0:	a5 de       	rcall	.-694    	; 0x2ec <LCD_WR_DATA>
     5a2:	83 e1       	ldi	r24, 0x13	; 19
  LCD_WR_DATA(0x12);
     5a4:	a3 de       	rcall	.-698    	; 0x2ec <LCD_WR_DATA>
     5a6:	82 e1       	ldi	r24, 0x12	; 18
  LCD_WR_DATA(0x12);
     5a8:	a1 de       	rcall	.-702    	; 0x2ec <LCD_WR_DATA>
     5aa:	82 e1       	ldi	r24, 0x12	; 18
  LCD_WR_DATA(0x2B);
     5ac:	9f de       	rcall	.-706    	; 0x2ec <LCD_WR_DATA>
     5ae:	8b e2       	ldi	r24, 0x2B	; 43
  LCD_WR_DATA(0x3C);
     5b0:	9d de       	rcall	.-710    	; 0x2ec <LCD_WR_DATA>
     5b2:	8c e3       	ldi	r24, 0x3C	; 60
  LCD_WR_DATA(0x44);
     5b4:	9b de       	rcall	.-714    	; 0x2ec <LCD_WR_DATA>
     5b6:	84 e4       	ldi	r24, 0x44	; 68
  LCD_WR_DATA(0x4B);
     5b8:	99 de       	rcall	.-718    	; 0x2ec <LCD_WR_DATA>
     5ba:	8b e4       	ldi	r24, 0x4B	; 75
  LCD_WR_DATA(0x1B);
     5bc:	97 de       	rcall	.-722    	; 0x2ec <LCD_WR_DATA>
     5be:	8b e1       	ldi	r24, 0x1B	; 27
  LCD_WR_DATA(0x18);
     5c0:	95 de       	rcall	.-726    	; 0x2ec <LCD_WR_DATA>
     5c2:	88 e1       	ldi	r24, 0x18	; 24
  LCD_WR_DATA(0x17);
     5c4:	93 de       	rcall	.-730    	; 0x2ec <LCD_WR_DATA>
     5c6:	87 e1       	ldi	r24, 0x17	; 23
  LCD_WR_DATA(0x1D);
     5c8:	91 de       	rcall	.-734    	; 0x2ec <LCD_WR_DATA>
     5ca:	8d e1       	ldi	r24, 0x1D	; 29
  LCD_WR_DATA(0x21);
     5cc:	8f de       	rcall	.-738    	; 0x2ec <LCD_WR_DATA>
     5ce:	81 e2       	ldi	r24, 0x21	; 33
     5d0:	8d de       	rcall	.-742    	; 0x2ec <LCD_WR_DATA>

  LCD_WR_REG(0XE1);
     5d2:	81 ee       	ldi	r24, 0xE1	; 225
     5d4:	90 de       	rcall	.-736    	; 0x2f6 <LCD_WR_REG>
     5d6:	80 ef       	ldi	r24, 0xF0	; 240
  LCD_WR_DATA(0xF0);
     5d8:	89 de       	rcall	.-750    	; 0x2ec <LCD_WR_DATA>
     5da:	89 e0       	ldi	r24, 0x09	; 9
     5dc:	87 de       	rcall	.-754    	; 0x2ec <LCD_WR_DATA>
  LCD_WR_DATA(0x09);
     5de:	83 e1       	ldi	r24, 0x13	; 19
     5e0:	85 de       	rcall	.-758    	; 0x2ec <LCD_WR_DATA>
     5e2:	8c e0       	ldi	r24, 0x0C	; 12
  LCD_WR_DATA(0x13);
     5e4:	83 de       	rcall	.-762    	; 0x2ec <LCD_WR_DATA>
     5e6:	8d e0       	ldi	r24, 0x0D	; 13
     5e8:	81 de       	rcall	.-766    	; 0x2ec <LCD_WR_DATA>
  LCD_WR_DATA(0x0C);
     5ea:	87 e2       	ldi	r24, 0x27	; 39
     5ec:	7f de       	rcall	.-770    	; 0x2ec <LCD_WR_DATA>
     5ee:	8b e3       	ldi	r24, 0x3B	; 59
  LCD_WR_DATA(0x0D);
     5f0:	7d de       	rcall	.-774    	; 0x2ec <LCD_WR_DATA>
     5f2:	84 e4       	ldi	r24, 0x44	; 68
     5f4:	7b de       	rcall	.-778    	; 0x2ec <LCD_WR_DATA>
  LCD_WR_DATA(0x27);
     5f6:	8d e4       	ldi	r24, 0x4D	; 77
     5f8:	79 de       	rcall	.-782    	; 0x2ec <LCD_WR_DATA>
     5fa:	8b e0       	ldi	r24, 0x0B	; 11
  LCD_WR_DATA(0x3B);
     5fc:	77 de       	rcall	.-786    	; 0x2ec <LCD_WR_DATA>
     5fe:	87 e1       	ldi	r24, 0x17	; 23
     600:	75 de       	rcall	.-790    	; 0x2ec <LCD_WR_DATA>
  LCD_WR_DATA(0x44);
     602:	87 e1       	ldi	r24, 0x17	; 23
     604:	73 de       	rcall	.-794    	; 0x2ec <LCD_WR_DATA>
     606:	8d e1       	ldi	r24, 0x1D	; 29
  LCD_WR_DATA(0x4D);
     608:	71 de       	rcall	.-798    	; 0x2ec <LCD_WR_DATA>
     60a:	81 e2       	ldi	r24, 0x21	; 33
     60c:	6f de       	rcall	.-802    	; 0x2ec <LCD_WR_DATA>
  LCD_WR_DATA(0x0B);
     60e:	86 e3       	ldi	r24, 0x36	; 54
     610:	72 de       	rcall	.-796    	; 0x2f6 <LCD_WR_REG>
     612:	8c ee       	ldi	r24, 0xEC	; 236
  LCD_WR_DATA(0x17);
     614:	6b de       	rcall	.-810    	; 0x2ec <LCD_WR_DATA>
     616:	80 ef       	ldi	r24, 0xF0	; 240
     618:	6e de       	rcall	.-804    	; 0x2f6 <LCD_WR_REG>
  LCD_WR_DATA(0x17);
     61a:	83 ec       	ldi	r24, 0xC3	; 195
     61c:	67 de       	rcall	.-818    	; 0x2ec <LCD_WR_DATA>
     61e:	80 ef       	ldi	r24, 0xF0	; 240
  LCD_WR_DATA(0x1D);
     620:	6a de       	rcall	.-812    	; 0x2f6 <LCD_WR_REG>
     622:	89 e6       	ldi	r24, 0x69	; 105
     624:	63 de       	rcall	.-826    	; 0x2ec <LCD_WR_DATA>
  LCD_WR_DATA(0x21);
     626:	83 e1       	ldi	r24, 0x13	; 19
     628:	66 de       	rcall	.-820    	; 0x2f6 <LCD_WR_REG>
     62a:	81 e1       	ldi	r24, 0x11	; 17

  LCD_WR_REG(0X36);
     62c:	64 de       	rcall	.-824    	; 0x2f6 <LCD_WR_REG>
     62e:	89 e2       	ldi	r24, 0x29	; 41
     630:	62 de       	rcall	.-828    	; 0x2f6 <LCD_WR_REG>
  LCD_WR_DATA(0xEC);
     632:	80 e0       	ldi	r24, 0x00	; 0
     634:	b3 de       	rcall	.-666    	; 0x39c <LCD_direction>
     636:	84 e6       	ldi	r24, 0x64	; 100
  LCD_WR_REG(0xF0);
     638:	eb dd       	rcall	.-1066   	; 0x210 <SetBackLightDuty>
     63a:	80 e0       	ldi	r24, 0x00	; 0
     63c:	90 e0       	ldi	r25, 0x00	; 0
  LCD_WR_DATA(0xC3);
     63e:	0d cf       	rjmp	.-486    	; 0x45a <LCD_Clear>
     640:	08 95       	ret

00000642 <LCD_GUI_DrawPoint>:
     642:	cf 93       	push	r28
  LCD_WR_REG(0xF0);
     644:	df 93       	push	r29
     646:	ea 01       	movw	r28, r20
     648:	a5 de       	rcall	.-694    	; 0x394 <LCD_SetCursor>
  LCD_WR_DATA(0x69);
     64a:	ce 01       	movw	r24, r28
     64c:	fb de       	rcall	.-522    	; 0x444 <LCD_WriteData_16Bit>
     64e:	df 91       	pop	r29
  LCD_WR_REG(0X13);
     650:	cf 91       	pop	r28
     652:	08 95       	ret

00000654 <LCD_GUI_Fill>:
     654:	af 92       	push	r10
  LCD_WR_REG(0X11);
     656:	bf 92       	push	r11
     658:	cf 92       	push	r12
     65a:	df 92       	push	r13
  LCD_WR_REG(0X29);
     65c:	ef 92       	push	r14
     65e:	ff 92       	push	r15
     660:	0f 93       	push	r16

  LCD_direction(LCD_ROTATE_0);
     662:	1f 93       	push	r17
     664:	cf 93       	push	r28
     666:	df 93       	push	r29
  SetBackLightDuty(100);
     668:	48 17       	cp	r20, r24
     66a:	59 07       	cpc	r21, r25
     66c:	28 f4       	brcc	.+10     	; 0x678 <LCD_GUI_Fill+0x24>
  LCD_Clear(BLACK);
     66e:	f8 2f       	mov	r31, r24
     670:	e9 2f       	mov	r30, r25
     672:	ca 01       	movw	r24, r20
     674:	4f 2f       	mov	r20, r31
     676:	5e 2f       	mov	r21, r30
    {
      if(temp & (1<<(7-t)))LCD_WriteData_16Bit(fc);
      else LCD_WriteData_16Bit(bc);
    }
  }
}
     678:	26 17       	cp	r18, r22
     67a:	37 07       	cpc	r19, r23
     67c:	28 f4       	brcc	.+10     	; 0x688 <LCD_GUI_Fill+0x34>
     67e:	f6 2f       	mov	r31, r22
     680:	e7 2f       	mov	r30, r23
     682:	b9 01       	movw	r22, r18
     684:	2f 2f       	mov	r18, r31
     686:	3e 2f       	mov	r19, r30
     688:	7a 01       	movw	r14, r20
     68a:	ef ef       	ldi	r30, 0xFF	; 255
     68c:	ee 1a       	sub	r14, r30
     68e:	fe 0a       	sbc	r15, r30
     690:	e8 1a       	sub	r14, r24
     692:	f9 0a       	sbc	r15, r25
     694:	59 01       	movw	r10, r18
     696:	ef ef       	ldi	r30, 0xFF	; 255
     698:	ae 1a       	sub	r10, r30
     69a:	be 0a       	sbc	r11, r30
     69c:	a6 1a       	sub	r10, r22
     69e:	b7 0a       	sbc	r11, r23
     6a0:	44 de       	rcall	.-888    	; 0x32a <LCD_SetWindows>
     6a2:	a1 14       	cp	r10, r1
     6a4:	b1 04       	cpc	r11, r1
     6a6:	81 f4       	brne	.+32     	; 0x6c8 <LCD_GUI_Fill+0x74>
     6a8:	15 c0       	rjmp	.+42     	; 0x6d4 <LCD_GUI_Fill+0x80>
     6aa:	c0 e0       	ldi	r28, 0x00	; 0
     6ac:	d0 e0       	ldi	r29, 0x00	; 0
     6ae:	c8 01       	movw	r24, r16
     6b0:	c9 de       	rcall	.-622    	; 0x444 <LCD_WriteData_16Bit>
     6b2:	21 96       	adiw	r28, 0x01	; 1
     6b4:	ec 16       	cp	r14, r28
     6b6:	fd 06       	cpc	r15, r29
     6b8:	d1 f7       	brne	.-12     	; 0x6ae <LCD_GUI_Fill+0x5a>
     6ba:	8f ef       	ldi	r24, 0xFF	; 255
     6bc:	c8 1a       	sub	r12, r24
     6be:	d8 0a       	sbc	r13, r24
     6c0:	ac 14       	cp	r10, r12
     6c2:	bd 04       	cpc	r11, r13
     6c4:	19 f4       	brne	.+6      	; 0x6cc <LCD_GUI_Fill+0x78>
     6c6:	06 c0       	rjmp	.+12     	; 0x6d4 <LCD_GUI_Fill+0x80>
     6c8:	c1 2c       	mov	r12, r1
     6ca:	d1 2c       	mov	r13, r1
     6cc:	e1 14       	cp	r14, r1
     6ce:	f1 04       	cpc	r15, r1
     6d0:	61 f7       	brne	.-40     	; 0x6aa <LCD_GUI_Fill+0x56>
     6d2:	f3 cf       	rjmp	.-26     	; 0x6ba <LCD_GUI_Fill+0x66>
     6d4:	df 91       	pop	r29
     6d6:	cf 91       	pop	r28
     6d8:	1f 91       	pop	r17
     6da:	0f 91       	pop	r16
     6dc:	ff 90       	pop	r15
     6de:	ef 90       	pop	r14
     6e0:	df 90       	pop	r13
     6e2:	cf 90       	pop	r12
     6e4:	bf 90       	pop	r11
     6e6:	af 90       	pop	r10
     6e8:	08 95       	ret

000006ea <LCD_GUI_DrawLine>:
     6ea:	2f 92       	push	r2
     6ec:	3f 92       	push	r3
     6ee:	4f 92       	push	r4
     6f0:	5f 92       	push	r5
     6f2:	6f 92       	push	r6
     6f4:	7f 92       	push	r7
     6f6:	8f 92       	push	r8
     6f8:	9f 92       	push	r9
     6fa:	af 92       	push	r10
     6fc:	bf 92       	push	r11
     6fe:	cf 92       	push	r12
     700:	df 92       	push	r13
     702:	ef 92       	push	r14
     704:	ff 92       	push	r15
     706:	0f 93       	push	r16
     708:	1f 93       	push	r17
     70a:	cf 93       	push	r28
     70c:	df 93       	push	r29
     70e:	cd b7       	in	r28, 0x3d	; 61
     710:	de b7       	in	r29, 0x3e	; 62
     712:	28 97       	sbiw	r28, 0x08	; 8
     714:	0f b6       	in	r0, 0x3f	; 63
     716:	f8 94       	cli
     718:	de bf       	out	0x3e, r29	; 62
     71a:	0f be       	out	0x3f, r0	; 63
     71c:	cd bf       	out	0x3d, r28	; 61
     71e:	1a 83       	std	Y+2, r17	; 0x02
     720:	09 83       	std	Y+1, r16	; 0x01
     722:	6a 01       	movw	r12, r20
     724:	c8 1a       	sub	r12, r24
     726:	d9 0a       	sbc	r13, r25
     728:	39 01       	movw	r6, r18
     72a:	66 1a       	sub	r6, r22
     72c:	77 0a       	sbc	r7, r23
     72e:	1c 01       	movw	r2, r24
     730:	2b 01       	movw	r4, r22
     732:	1c 14       	cp	r1, r12
     734:	1d 04       	cpc	r1, r13
     736:	5c f0       	brlt	.+22     	; 0x74e <LCD_GUI_DrawLine+0x64>
     738:	c1 14       	cp	r12, r1
     73a:	d1 04       	cpc	r13, r1
     73c:	69 f0       	breq	.+26     	; 0x758 <LCD_GUI_DrawLine+0x6e>
     73e:	d1 94       	neg	r13
     740:	c1 94       	neg	r12
     742:	d1 08       	sbc	r13, r1
     744:	8f ef       	ldi	r24, 0xFF	; 255
     746:	9f ef       	ldi	r25, 0xFF	; 255
     748:	9c 83       	std	Y+4, r25	; 0x04
     74a:	8b 83       	std	Y+3, r24	; 0x03
     74c:	07 c0       	rjmp	.+14     	; 0x75c <LCD_GUI_DrawLine+0x72>
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	9c 83       	std	Y+4, r25	; 0x04
     754:	8b 83       	std	Y+3, r24	; 0x03
     756:	02 c0       	rjmp	.+4      	; 0x75c <LCD_GUI_DrawLine+0x72>
     758:	1c 82       	std	Y+4, r1	; 0x04
     75a:	1b 82       	std	Y+3, r1	; 0x03
     75c:	16 14       	cp	r1, r6
     75e:	17 04       	cpc	r1, r7
     760:	5c f0       	brlt	.+22     	; 0x778 <LCD_GUI_DrawLine+0x8e>
     762:	61 14       	cp	r6, r1
     764:	71 04       	cpc	r7, r1
     766:	69 f0       	breq	.+26     	; 0x782 <LCD_GUI_DrawLine+0x98>
     768:	71 94       	neg	r7
     76a:	61 94       	neg	r6
     76c:	71 08       	sbc	r7, r1
     76e:	8f ef       	ldi	r24, 0xFF	; 255
     770:	9f ef       	ldi	r25, 0xFF	; 255
     772:	9e 83       	std	Y+6, r25	; 0x06
     774:	8d 83       	std	Y+5, r24	; 0x05
     776:	07 c0       	rjmp	.+14     	; 0x786 <LCD_GUI_DrawLine+0x9c>
     778:	81 e0       	ldi	r24, 0x01	; 1
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	9e 83       	std	Y+6, r25	; 0x06
     77e:	8d 83       	std	Y+5, r24	; 0x05
     780:	02 c0       	rjmp	.+4      	; 0x786 <LCD_GUI_DrawLine+0x9c>
     782:	1e 82       	std	Y+6, r1	; 0x06
     784:	1d 82       	std	Y+5, r1	; 0x05
     786:	76 01       	movw	r14, r12
     788:	c6 14       	cp	r12, r6
     78a:	d7 04       	cpc	r13, r7
     78c:	0c f4       	brge	.+2      	; 0x790 <LCD_GUI_DrawLine+0xa6>
     78e:	73 01       	movw	r14, r6
     790:	57 01       	movw	r10, r14
     792:	9f ef       	ldi	r25, 0xFF	; 255
     794:	a9 1a       	sub	r10, r25
     796:	b9 0a       	sbc	r11, r25
     798:	00 e0       	ldi	r16, 0x00	; 0
     79a:	10 e0       	ldi	r17, 0x00	; 0
     79c:	18 86       	std	Y+8, r1	; 0x08
     79e:	1f 82       	std	Y+7, r1	; 0x07
     7a0:	81 2c       	mov	r8, r1
     7a2:	91 2c       	mov	r9, r1
     7a4:	49 81       	ldd	r20, Y+1	; 0x01
     7a6:	5a 81       	ldd	r21, Y+2	; 0x02
     7a8:	b2 01       	movw	r22, r4
     7aa:	c1 01       	movw	r24, r2
     7ac:	4a df       	rcall	.-364    	; 0x642 <LCD_GUI_DrawPoint>
     7ae:	8f 81       	ldd	r24, Y+7	; 0x07
     7b0:	98 85       	ldd	r25, Y+8	; 0x08
     7b2:	8c 0d       	add	r24, r12
     7b4:	9d 1d       	adc	r25, r13
     7b6:	98 87       	std	Y+8, r25	; 0x08
     7b8:	8f 83       	std	Y+7, r24	; 0x07
     7ba:	06 0d       	add	r16, r6
     7bc:	17 1d       	adc	r17, r7
     7be:	e8 16       	cp	r14, r24
     7c0:	f9 06       	cpc	r15, r25
     7c2:	44 f4       	brge	.+16     	; 0x7d4 <LCD_GUI_DrawLine+0xea>
     7c4:	8e 19       	sub	r24, r14
     7c6:	9f 09       	sbc	r25, r15
     7c8:	98 87       	std	Y+8, r25	; 0x08
     7ca:	8f 83       	std	Y+7, r24	; 0x07
     7cc:	8b 81       	ldd	r24, Y+3	; 0x03
     7ce:	9c 81       	ldd	r25, Y+4	; 0x04
     7d0:	28 0e       	add	r2, r24
     7d2:	39 1e       	adc	r3, r25
     7d4:	e0 16       	cp	r14, r16
     7d6:	f1 06       	cpc	r15, r17
     7d8:	34 f4       	brge	.+12     	; 0x7e6 <LCD_GUI_DrawLine+0xfc>
     7da:	0e 19       	sub	r16, r14
     7dc:	1f 09       	sbc	r17, r15
     7de:	8d 81       	ldd	r24, Y+5	; 0x05
     7e0:	9e 81       	ldd	r25, Y+6	; 0x06
     7e2:	48 0e       	add	r4, r24
     7e4:	59 1e       	adc	r5, r25
     7e6:	9f ef       	ldi	r25, 0xFF	; 255
     7e8:	89 1a       	sub	r8, r25
     7ea:	99 0a       	sbc	r9, r25
     7ec:	a8 14       	cp	r10, r8
     7ee:	b9 04       	cpc	r11, r9
     7f0:	c8 f6       	brcc	.-78     	; 0x7a4 <LCD_GUI_DrawLine+0xba>
     7f2:	28 96       	adiw	r28, 0x08	; 8
     7f4:	0f b6       	in	r0, 0x3f	; 63
     7f6:	f8 94       	cli
     7f8:	de bf       	out	0x3e, r29	; 62
     7fa:	0f be       	out	0x3f, r0	; 63
     7fc:	cd bf       	out	0x3d, r28	; 61
     7fe:	df 91       	pop	r29
     800:	cf 91       	pop	r28
     802:	1f 91       	pop	r17
     804:	0f 91       	pop	r16
     806:	ff 90       	pop	r15
     808:	ef 90       	pop	r14
     80a:	df 90       	pop	r13
     80c:	cf 90       	pop	r12
     80e:	bf 90       	pop	r11
     810:	af 90       	pop	r10
     812:	9f 90       	pop	r9
     814:	8f 90       	pop	r8
     816:	7f 90       	pop	r7
     818:	6f 90       	pop	r6
     81a:	5f 90       	pop	r5
     81c:	4f 90       	pop	r4
     81e:	3f 90       	pop	r3
     820:	2f 90       	pop	r2
     822:	08 95       	ret

00000824 <LCD_GUI_DrawRectangle>:
     824:	8f 92       	push	r8
     826:	9f 92       	push	r9
     828:	af 92       	push	r10
     82a:	bf 92       	push	r11
     82c:	cf 92       	push	r12
     82e:	df 92       	push	r13
     830:	ef 92       	push	r14
     832:	ff 92       	push	r15
     834:	0f 93       	push	r16
     836:	1f 93       	push	r17
     838:	cf 93       	push	r28
     83a:	df 93       	push	r29
     83c:	4c 01       	movw	r8, r24
     83e:	7b 01       	movw	r14, r22
     840:	ea 01       	movw	r28, r20
     842:	69 01       	movw	r12, r18
     844:	9b 01       	movw	r18, r22
     846:	51 df       	rcall	.-350    	; 0x6ea <LCD_GUI_DrawLine>
     848:	96 01       	movw	r18, r12
     84a:	a4 01       	movw	r20, r8
     84c:	b7 01       	movw	r22, r14
     84e:	c4 01       	movw	r24, r8
     850:	4c df       	rcall	.-360    	; 0x6ea <LCD_GUI_DrawLine>
     852:	96 01       	movw	r18, r12
     854:	ae 01       	movw	r20, r28
     856:	b6 01       	movw	r22, r12
     858:	c4 01       	movw	r24, r8
     85a:	47 df       	rcall	.-370    	; 0x6ea <LCD_GUI_DrawLine>
     85c:	96 01       	movw	r18, r12
     85e:	ae 01       	movw	r20, r28
     860:	b7 01       	movw	r22, r14
     862:	ce 01       	movw	r24, r28
     864:	42 df       	rcall	.-380    	; 0x6ea <LCD_GUI_DrawLine>
     866:	df 91       	pop	r29
     868:	cf 91       	pop	r28
     86a:	1f 91       	pop	r17
     86c:	0f 91       	pop	r16
     86e:	ff 90       	pop	r15
     870:	ef 90       	pop	r14
     872:	df 90       	pop	r13
     874:	cf 90       	pop	r12
     876:	bf 90       	pop	r11
     878:	af 90       	pop	r10
     87a:	9f 90       	pop	r9
     87c:	8f 90       	pop	r8
     87e:	08 95       	ret

00000880 <LCD_GUI_DrawFillRectangle>:
     880:	0f 93       	push	r16
     882:	1f 93       	push	r17
     884:	e7 de       	rcall	.-562    	; 0x654 <LCD_GUI_Fill>
     886:	1f 91       	pop	r17
     888:	0f 91       	pop	r16
     88a:	08 95       	ret

0000088c <LCD_ShowChar>:
     88c:	3f 92       	push	r3
     88e:	4f 92       	push	r4
     890:	5f 92       	push	r5
     892:	6f 92       	push	r6
     894:	7f 92       	push	r7
     896:	8f 92       	push	r8
     898:	9f 92       	push	r9
     89a:	af 92       	push	r10
     89c:	bf 92       	push	r11
     89e:	cf 92       	push	r12
     8a0:	df 92       	push	r13
     8a2:	ef 92       	push	r14
     8a4:	ff 92       	push	r15
     8a6:	0f 93       	push	r16
     8a8:	1f 93       	push	r17
     8aa:	cf 93       	push	r28
     8ac:	df 93       	push	r29
     8ae:	6a 01       	movw	r12, r20
     8b0:	59 01       	movw	r10, r18
     8b2:	00 52       	subi	r16, 0x20	; 32
     8b4:	6e 2c       	mov	r6, r14
     8b6:	71 2c       	mov	r7, r1
     8b8:	23 01       	movw	r4, r6
     8ba:	44 0c       	add	r4, r4
     8bc:	55 1c       	adc	r5, r5
     8be:	44 0c       	add	r4, r4
     8c0:	55 1c       	adc	r5, r5
     8c2:	44 0c       	add	r4, r4
     8c4:	55 1c       	adc	r5, r5
     8c6:	44 0c       	add	r4, r4
     8c8:	55 1c       	adc	r5, r5
     8ca:	66 0c       	add	r6, r6
     8cc:	77 1c       	adc	r7, r7
     8ce:	66 0c       	add	r6, r6
     8d0:	77 1c       	adc	r7, r7
     8d2:	66 0c       	add	r6, r6
     8d4:	77 1c       	adc	r7, r7
     8d6:	9b 01       	movw	r18, r22
     8d8:	21 50       	subi	r18, 0x01	; 1
     8da:	31 09       	sbc	r19, r1
     8dc:	24 0d       	add	r18, r4
     8de:	35 1d       	adc	r19, r5
     8e0:	ac 01       	movw	r20, r24
     8e2:	41 50       	subi	r20, 0x01	; 1
     8e4:	51 09       	sbc	r21, r1
     8e6:	46 0d       	add	r20, r6
     8e8:	57 1d       	adc	r21, r7
     8ea:	1f dd       	rcall	.-1474   	; 0x32a <LCD_SetWindows>
     8ec:	14 14       	cp	r1, r4
     8ee:	15 04       	cpc	r1, r5
     8f0:	bc f5       	brge	.+110    	; 0x960 <LCD_ShowChar+0xd4>
     8f2:	20 e1       	ldi	r18, 0x10	; 16
     8f4:	02 9f       	mul	r16, r18
     8f6:	c0 01       	movw	r24, r0
     8f8:	11 24       	eor	r1, r1
     8fa:	31 2c       	mov	r3, r1
     8fc:	9c 01       	movw	r18, r24
     8fe:	2d 57       	subi	r18, 0x7D	; 125
     900:	3d 4f       	sbci	r19, 0xFD	; 253
     902:	49 01       	movw	r8, r18
     904:	07 e0       	ldi	r16, 0x07	; 7
     906:	10 e0       	ldi	r17, 0x00	; 0
     908:	83 2d       	mov	r24, r3
     90a:	6e 2d       	mov	r22, r14
     90c:	2e d3       	rcall	.+1628   	; 0xf6a <__udivmodqi4>
     90e:	f4 01       	movw	r30, r8
     910:	e8 0f       	add	r30, r24
     912:	f1 1d       	adc	r31, r1
     914:	c5 81       	ldd	r28, Z+5	; 0x05
     916:	16 14       	cp	r1, r6
     918:	17 04       	cpc	r1, r7
     91a:	e4 f4       	brge	.+56     	; 0x954 <LCD_ShowChar+0xc8>
     91c:	f1 2c       	mov	r15, r1
     91e:	d0 e0       	ldi	r29, 0x00	; 0
     920:	8f 2d       	mov	r24, r15
     922:	6e 2d       	mov	r22, r14
     924:	22 d3       	rcall	.+1604   	; 0xf6a <__udivmodqi4>
     926:	98 01       	movw	r18, r16
     928:	28 1b       	sub	r18, r24
     92a:	31 09       	sbc	r19, r1
     92c:	c9 01       	movw	r24, r18
     92e:	9e 01       	movw	r18, r28
     930:	02 c0       	rjmp	.+4      	; 0x936 <LCD_ShowChar+0xaa>
     932:	35 95       	asr	r19
     934:	27 95       	ror	r18
     936:	8a 95       	dec	r24
     938:	e2 f7       	brpl	.-8      	; 0x932 <LCD_ShowChar+0xa6>
     93a:	20 ff       	sbrs	r18, 0
     93c:	03 c0       	rjmp	.+6      	; 0x944 <LCD_ShowChar+0xb8>
     93e:	c6 01       	movw	r24, r12
     940:	81 dd       	rcall	.-1278   	; 0x444 <LCD_WriteData_16Bit>
     942:	02 c0       	rjmp	.+4      	; 0x948 <LCD_ShowChar+0xbc>
     944:	c5 01       	movw	r24, r10
     946:	7e dd       	rcall	.-1284   	; 0x444 <LCD_WriteData_16Bit>
     948:	f3 94       	inc	r15
     94a:	8f 2d       	mov	r24, r15
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	86 15       	cp	r24, r6
     950:	97 05       	cpc	r25, r7
     952:	34 f3       	brlt	.-52     	; 0x920 <LCD_ShowChar+0x94>
     954:	33 94       	inc	r3
     956:	83 2d       	mov	r24, r3
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	84 15       	cp	r24, r4
     95c:	95 05       	cpc	r25, r5
     95e:	a4 f2       	brlt	.-88     	; 0x908 <LCD_ShowChar+0x7c>
     960:	df 91       	pop	r29
     962:	cf 91       	pop	r28
     964:	1f 91       	pop	r17
     966:	0f 91       	pop	r16
     968:	ff 90       	pop	r15
     96a:	ef 90       	pop	r14
     96c:	df 90       	pop	r13
     96e:	cf 90       	pop	r12
     970:	bf 90       	pop	r11
     972:	af 90       	pop	r10
     974:	9f 90       	pop	r9
     976:	8f 90       	pop	r8
     978:	7f 90       	pop	r7
     97a:	6f 90       	pop	r6
     97c:	5f 90       	pop	r5
     97e:	4f 90       	pop	r4
     980:	3f 90       	pop	r3
     982:	08 95       	ret

00000984 <LCD_ShowString>:
// 
//   LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);
// }

void LCD_ShowString(uint16_t x,uint16_t y,uint8_t size, uint8_t *p, uint16_t fc, uint16_t bc, uint8_t mode)
{
     984:	2f 92       	push	r2
     986:	3f 92       	push	r3
     988:	4f 92       	push	r4
     98a:	5f 92       	push	r5
     98c:	6f 92       	push	r6
     98e:	7f 92       	push	r7
     990:	8f 92       	push	r8
     992:	9f 92       	push	r9
     994:	af 92       	push	r10
     996:	bf 92       	push	r11
     998:	cf 92       	push	r12
     99a:	df 92       	push	r13
     99c:	ef 92       	push	r14
     99e:	ff 92       	push	r15
     9a0:	0f 93       	push	r16
     9a2:	1f 93       	push	r17
     9a4:	cf 93       	push	r28
     9a6:	df 93       	push	r29
     9a8:	00 d0       	rcall	.+0      	; 0x9aa <LCD_ShowString+0x26>
     9aa:	1f 92       	push	r1
     9ac:	cd b7       	in	r28, 0x3d	; 61
     9ae:	de b7       	in	r29, 0x3e	; 62
     9b0:	9c 83       	std	Y+4, r25	; 0x04
     9b2:	8b 83       	std	Y+3, r24	; 0x03
     9b4:	4b 01       	movw	r8, r22
     9b6:	d4 2e       	mov	r13, r20
     9b8:	1a 83       	std	Y+2, r17	; 0x02
     9ba:	09 83       	std	Y+1, r16	; 0x01
     9bc:	17 01       	movw	r2, r14
     9be:	1c 2d       	mov	r17, r12
  while((*p<='~')&&(*p>=' '))
     9c0:	f9 01       	movw	r30, r18
     9c2:	00 81       	ld	r16, Z
     9c4:	80 ee       	ldi	r24, 0xE0	; 224
     9c6:	80 0f       	add	r24, r16
     9c8:	8f 35       	cpi	r24, 0x5F	; 95
     9ca:	08 f0       	brcs	.+2      	; 0x9ce <LCD_ShowString+0x4a>
     9cc:	4b c0       	rjmp	.+150    	; 0xa64 <LCD_ShowString+0xe0>
  {
    if(x>(lcddev.width-1)||y>(lcddev.height-1))
     9ce:	80 91 a2 08 	lds	r24, 0x08A2	; 0x8008a2 <lcddev>
     9d2:	90 91 a3 08 	lds	r25, 0x08A3	; 0x8008a3 <lcddev+0x1>
     9d6:	01 97       	sbiw	r24, 0x01	; 1
     9d8:	4b 81       	ldd	r20, Y+3	; 0x03
     9da:	5c 81       	ldd	r21, Y+4	; 0x04
     9dc:	84 17       	cp	r24, r20
     9de:	95 07       	cpc	r25, r21
     9e0:	08 f4       	brcc	.+2      	; 0x9e4 <LCD_ShowString+0x60>
     9e2:	40 c0       	rjmp	.+128    	; 0xa64 <LCD_ShowString+0xe0>
     9e4:	80 91 a4 08 	lds	r24, 0x08A4	; 0x8008a4 <lcddev+0x2>
     9e8:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <lcddev+0x3>
     9ec:	01 97       	sbiw	r24, 0x01	; 1
     9ee:	86 17       	cp	r24, r22
     9f0:	97 07       	cpc	r25, r23
     9f2:	c0 f1       	brcs	.+112    	; 0xa64 <LCD_ShowString+0xe0>
    return;
    LCD_ShowChar(x,y,fc,bc,*p,size,mode);
    x+=8*size;
     9f4:	4d 2c       	mov	r4, r13
     9f6:	51 2c       	mov	r5, r1
     9f8:	44 0c       	add	r4, r4
     9fa:	55 1c       	adc	r5, r5
     9fc:	44 0c       	add	r4, r4
     9fe:	55 1c       	adc	r5, r5
     a00:	44 0c       	add	r4, r4
     a02:	55 1c       	adc	r5, r5
     a04:	59 01       	movw	r10, r18
     a06:	5f ef       	ldi	r21, 0xFF	; 255
     a08:	a5 1a       	sub	r10, r21
     a0a:	b5 0a       	sbc	r11, r21

void LCD_ShowString(uint16_t x,uint16_t y,uint8_t size, uint8_t *p, uint16_t fc, uint16_t bc, uint8_t mode)
{
  while((*p<='~')&&(*p>=' '))
  {
    if(x>(lcddev.width-1)||y>(lcddev.height-1))
     a0c:	0f 2e       	mov	r0, r31
     a0e:	f2 ea       	ldi	r31, 0xA2	; 162
     a10:	6f 2e       	mov	r6, r31
     a12:	f8 e0       	ldi	r31, 0x08	; 8
     a14:	7f 2e       	mov	r7, r31
     a16:	f0 2d       	mov	r31, r0
     a18:	0f c0       	rjmp	.+30     	; 0xa38 <LCD_ShowString+0xb4>
     a1a:	f3 01       	movw	r30, r6
     a1c:	80 81       	ld	r24, Z
     a1e:	91 81       	ldd	r25, Z+1	; 0x01
     a20:	01 97       	sbiw	r24, 0x01	; 1
     a22:	2b 81       	ldd	r18, Y+3	; 0x03
     a24:	3c 81       	ldd	r19, Y+4	; 0x04
     a26:	82 17       	cp	r24, r18
     a28:	93 07       	cpc	r25, r19
     a2a:	e0 f0       	brcs	.+56     	; 0xa64 <LCD_ShowString+0xe0>
     a2c:	82 81       	ldd	r24, Z+2	; 0x02
     a2e:	93 81       	ldd	r25, Z+3	; 0x03
     a30:	01 97       	sbiw	r24, 0x01	; 1
     a32:	88 15       	cp	r24, r8
     a34:	99 05       	cpc	r25, r9
     a36:	b0 f0       	brcs	.+44     	; 0xa64 <LCD_ShowString+0xe0>
    return;
    LCD_ShowChar(x,y,fc,bc,*p,size,mode);
     a38:	c1 2e       	mov	r12, r17
     a3a:	ed 2c       	mov	r14, r13
     a3c:	91 01       	movw	r18, r2
     a3e:	49 81       	ldd	r20, Y+1	; 0x01
     a40:	5a 81       	ldd	r21, Y+2	; 0x02
     a42:	b4 01       	movw	r22, r8
     a44:	8b 81       	ldd	r24, Y+3	; 0x03
     a46:	9c 81       	ldd	r25, Y+4	; 0x04
     a48:	21 df       	rcall	.-446    	; 0x88c <LCD_ShowChar>
    x+=8*size;
     a4a:	4b 81       	ldd	r20, Y+3	; 0x03
     a4c:	5c 81       	ldd	r21, Y+4	; 0x04
     a4e:	44 0d       	add	r20, r4
     a50:	55 1d       	adc	r21, r5
     a52:	5c 83       	std	Y+4, r21	; 0x04
     a54:	4b 83       	std	Y+3, r20	; 0x03
//   LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);
// }

void LCD_ShowString(uint16_t x,uint16_t y,uint8_t size, uint8_t *p, uint16_t fc, uint16_t bc, uint8_t mode)
{
  while((*p<='~')&&(*p>=' '))
     a56:	f5 01       	movw	r30, r10
     a58:	01 91       	ld	r16, Z+
     a5a:	5f 01       	movw	r10, r30
     a5c:	80 ee       	ldi	r24, 0xE0	; 224
     a5e:	80 0f       	add	r24, r16
     a60:	8f 35       	cpi	r24, 0x5F	; 95
     a62:	d8 f2       	brcs	.-74     	; 0xa1a <LCD_ShowString+0x96>
    return;
    LCD_ShowChar(x,y,fc,bc,*p,size,mode);
    x+=8*size;
    p++;
  }
}
     a64:	0f 90       	pop	r0
     a66:	0f 90       	pop	r0
     a68:	0f 90       	pop	r0
     a6a:	0f 90       	pop	r0
     a6c:	df 91       	pop	r29
     a6e:	cf 91       	pop	r28
     a70:	1f 91       	pop	r17
     a72:	0f 91       	pop	r16
     a74:	ff 90       	pop	r15
     a76:	ef 90       	pop	r14
     a78:	df 90       	pop	r13
     a7a:	cf 90       	pop	r12
     a7c:	bf 90       	pop	r11
     a7e:	af 90       	pop	r10
     a80:	9f 90       	pop	r9
     a82:	8f 90       	pop	r8
     a84:	7f 90       	pop	r7
     a86:	6f 90       	pop	r6
     a88:	5f 90       	pop	r5
     a8a:	4f 90       	pop	r4
     a8c:	3f 90       	pop	r3
     a8e:	2f 90       	pop	r2
     a90:	08 95       	ret

00000a92 <main>:
  MAGENTA,
  BROWN
};

int main(void)
{
     a92:	cf 93       	push	r28
     a94:	df 93       	push	r29
     a96:	cd b7       	in	r28, 0x3d	; 61
     a98:	de b7       	in	r29, 0x3e	; 62
     a9a:	63 97       	sbiw	r28, 0x13	; 19
     a9c:	0f b6       	in	r0, 0x3f	; 63
     a9e:	f8 94       	cli
     aa0:	de bf       	out	0x3e, r29	; 62
     aa2:	0f be       	out	0x3f, r0	; 63
     aa4:	cd bf       	out	0x3d, r28	; 61
  LCD_Init();
     aa6:	21 dd       	rcall	.-1470   	; 0x4ea <LCD_Init>
  LCD_SetBackLight(20);
     aa8:	84 e1       	ldi	r24, 0x14	; 20
     aaa:	ca dc       	rcall	.-1644   	; 0x440 <LCD_SetBackLight>
  LCD_direction(LCD_ROTATE_90);
     aac:	81 e0       	ldi	r24, 0x01	; 1
  Button_init();
     aae:	76 dc       	rcall	.-1812   	; 0x39c <LCD_direction>
     ab0:	0e dc       	rcall	.-2020   	; 0x2ce <Button_init>
  
  drawFrame();
     ab2:	0e d1       	rcall	.+540    	; 0xcd0 <drawFrame>
     ab4:	c1 2c       	mov	r12, r1
  LCD_ShowString(320, 20, 2, "TETRIS", RED, BLACK, 0);
     ab6:	d1 2c       	mov	r13, r1
     ab8:	e1 2c       	mov	r14, r1
     aba:	f1 2c       	mov	r15, r1
     abc:	00 e0       	ldi	r16, 0x00	; 0
     abe:	18 ef       	ldi	r17, 0xF8	; 248
     ac0:	28 e7       	ldi	r18, 0x78	; 120
     ac2:	38 e0       	ldi	r19, 0x08	; 8
     ac4:	42 e0       	ldi	r20, 0x02	; 2
     ac6:	50 e0       	ldi	r21, 0x00	; 0
     ac8:	64 e1       	ldi	r22, 0x14	; 20
     aca:	70 e0       	ldi	r23, 0x00	; 0
     acc:	80 e4       	ldi	r24, 0x40	; 64
     ace:	91 e0       	ldi	r25, 0x01	; 1
     ad0:	59 df       	rcall	.-334    	; 0x984 <LCD_ShowString>
     ad2:	0f 2e       	mov	r0, r31
    uint16_t buttonYVal = readButtonY();
    uint8_t  buttonSwitch = readButtonSwitch();
    char Xval[6];
    char Yval[6];
    char Sval[6];
    sprintf(Xval, "%4d", buttonXVal);
     ad4:	ff e7       	ldi	r31, 0x7F	; 127
     ad6:	af 2e       	mov	r10, r31
     ad8:	f8 e0       	ldi	r31, 0x08	; 8
     ada:	bf 2e       	mov	r11, r31
     adc:	f0 2d       	mov	r31, r0
     ade:	2e 01       	movw	r4, r28
     ae0:	2d e0       	ldi	r18, 0x0D	; 13
     ae2:	42 0e       	add	r4, r18
     ae4:	51 1c       	adc	r5, r1
    sprintf(Yval, "%4d", buttonYVal);
     ae6:	1e 01       	movw	r2, r28
     ae8:	87 e0       	ldi	r24, 0x07	; 7
//         LCD_ShowString(320, 100, 1, Xval, WHITE, BLACK, 0);
//         LCD_ShowString(320, 120, 1, Yval, WHITE, BLACK, 0);
//       }
//       returnShapeCursorHome();
//     }
    uint16_t buttonXVal = readButtonX();
     aea:	28 0e       	add	r2, r24
     aec:	31 1c       	adc	r3, r1
     aee:	f3 db       	rcall	.-2074   	; 0x2d6 <readButtonX>
    uint16_t buttonYVal = readButtonY();
     af0:	3c 01       	movw	r6, r24
     af2:	f4 db       	rcall	.-2072   	; 0x2dc <readButtonY>
     af4:	4c 01       	movw	r8, r24
    uint8_t  buttonSwitch = readButtonSwitch();
     af6:	f5 db       	rcall	.-2070   	; 0x2e2 <readButtonSwitch>
     af8:	8b 8b       	std	Y+19, r24	; 0x13
    char Xval[6];
    char Yval[6];
    char Sval[6];
    sprintf(Xval, "%4d", buttonXVal);
     afa:	7f 92       	push	r7
     afc:	6f 92       	push	r6
     afe:	bf 92       	push	r11
     b00:	af 92       	push	r10
     b02:	5f 92       	push	r5
     b04:	4f 92       	push	r4
     b06:	64 d2       	rcall	.+1224   	; 0xfd0 <sprintf>
    sprintf(Yval, "%4d", buttonYVal);
     b08:	9f 92       	push	r9
     b0a:	8f 92       	push	r8
     b0c:	bf 92       	push	r11
     b0e:	af 92       	push	r10
     b10:	3f 92       	push	r3
     b12:	2f 92       	push	r2
     b14:	5d d2       	rcall	.+1210   	; 0xfd0 <sprintf>
     b16:	1f 92       	push	r1
    sprintf(Sval, "%4d", buttonSwitch);
     b18:	9b 89       	ldd	r25, Y+19	; 0x13
     b1a:	9f 93       	push	r25
     b1c:	bf 92       	push	r11
     b1e:	af 92       	push	r10
     b20:	81 e0       	ldi	r24, 0x01	; 1
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	8c 0f       	add	r24, r28
     b26:	9d 1f       	adc	r25, r29
     b28:	9f 93       	push	r25
     b2a:	8f 93       	push	r24
     b2c:	51 d2       	rcall	.+1186   	; 0xfd0 <sprintf>
     b2e:	c1 2c       	mov	r12, r1
    LCD_ShowString(320, 100, 1, Xval, WHITE, BLACK, 0);
     b30:	d1 2c       	mov	r13, r1
     b32:	e1 2c       	mov	r14, r1
     b34:	f1 2c       	mov	r15, r1
     b36:	0f ef       	ldi	r16, 0xFF	; 255
     b38:	1f ef       	ldi	r17, 0xFF	; 255
     b3a:	92 01       	movw	r18, r4
     b3c:	41 e0       	ldi	r20, 0x01	; 1
     b3e:	50 e0       	ldi	r21, 0x00	; 0
     b40:	64 e6       	ldi	r22, 0x64	; 100
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	80 e4       	ldi	r24, 0x40	; 64
     b46:	91 e0       	ldi	r25, 0x01	; 1
     b48:	1d df       	rcall	.-454    	; 0x984 <LCD_ShowString>
    LCD_ShowString(320, 120, 1, Yval, WHITE, BLACK, 0);
     b4a:	91 01       	movw	r18, r2
     b4c:	41 e0       	ldi	r20, 0x01	; 1
     b4e:	50 e0       	ldi	r21, 0x00	; 0
     b50:	68 e7       	ldi	r22, 0x78	; 120
     b52:	70 e0       	ldi	r23, 0x00	; 0
     b54:	80 e4       	ldi	r24, 0x40	; 64
     b56:	91 e0       	ldi	r25, 0x01	; 1
     b58:	15 df       	rcall	.-470    	; 0x984 <LCD_ShowString>
    LCD_ShowString(320, 140, 1, Sval, WHITE, BLACK, 0);
     b5a:	9e 01       	movw	r18, r28
     b5c:	2f 5f       	subi	r18, 0xFF	; 255
     b5e:	3f 4f       	sbci	r19, 0xFF	; 255
     b60:	41 e0       	ldi	r20, 0x01	; 1
     b62:	50 e0       	ldi	r21, 0x00	; 0
     b64:	6c e8       	ldi	r22, 0x8C	; 140
     b66:	70 e0       	ldi	r23, 0x00	; 0
     b68:	80 e4       	ldi	r24, 0x40	; 64
     b6a:	91 e0       	ldi	r25, 0x01	; 1
     b6c:	0b df       	rcall	.-490    	; 0x984 <LCD_ShowString>
     b6e:	60 ee       	ldi	r22, 0xE0	; 224


    drawCurrentShape(ShapeNum, GREEN);
     b70:	77 e0       	ldi	r23, 0x07	; 7
     b72:	84 e0       	ldi	r24, 0x04	; 4
     b74:	2a d1       	rcall	.+596    	; 0xdca <drawCurrentShape>
     b76:	9f ef       	ldi	r25, 0xFF	; 255
     b78:	20 e7       	ldi	r18, 0x70	; 112
     b7a:	82 e0       	ldi	r24, 0x02	; 2
     b7c:	91 50       	subi	r25, 0x01	; 1
     b7e:	20 40       	sbci	r18, 0x00	; 0
     b80:	80 40       	sbci	r24, 0x00	; 0
     b82:	e1 f7       	brne	.-8      	; 0xb7c <main+0xea>
     b84:	00 c0       	rjmp	.+0      	; 0xb86 <main+0xf4>
     b86:	00 00       	nop
    _delay_ms(50);
    if (buttonXVal < 20) 
     b88:	0f b6       	in	r0, 0x3f	; 63
     b8a:	f8 94       	cli
     b8c:	de bf       	out	0x3e, r29	; 62
     b8e:	0f be       	out	0x3f, r0	; 63
     b90:	cd bf       	out	0x3d, r28	; 61
     b92:	94 e1       	ldi	r25, 0x14	; 20
     b94:	69 16       	cp	r6, r25
     b96:	71 04       	cpc	r7, r1
    {
      drawCurrentShape(ShapeNum, BLACK);
     b98:	30 f4       	brcc	.+12     	; 0xba6 <main+0x114>
     b9a:	60 e0       	ldi	r22, 0x00	; 0
     b9c:	70 e0       	ldi	r23, 0x00	; 0
     b9e:	84 e0       	ldi	r24, 0x04	; 4
     ba0:	14 d1       	rcall	.+552    	; 0xdca <drawCurrentShape>
      ShapeShiftUp();
     ba2:	f0 d0       	rcall	.+480    	; 0xd84 <ShapeShiftUp>
     ba4:	0a c0       	rjmp	.+20     	; 0xbba <main+0x128>
      
    }
    else if (buttonXVal > 1000)
     ba6:	29 ee       	ldi	r18, 0xE9	; 233
     ba8:	62 16       	cp	r6, r18
     baa:	23 e0       	ldi	r18, 0x03	; 3
     bac:	72 06       	cpc	r7, r18
    {
      drawCurrentShape(ShapeNum, BLACK);
     bae:	28 f0       	brcs	.+10     	; 0xbba <main+0x128>
     bb0:	60 e0       	ldi	r22, 0x00	; 0
     bb2:	70 e0       	ldi	r23, 0x00	; 0
     bb4:	84 e0       	ldi	r24, 0x04	; 4
     bb6:	09 d1       	rcall	.+530    	; 0xdca <drawCurrentShape>
      ShapeShiftDown();
     bb8:	eb d0       	rcall	.+470    	; 0xd90 <ShapeShiftDown>
    } 

    if (buttonYVal < 20)
     bba:	84 e1       	ldi	r24, 0x14	; 20
     bbc:	88 16       	cp	r8, r24
     bbe:	91 04       	cpc	r9, r1
    {
      drawCurrentShape(ShapeNum, BLACK);
     bc0:	30 f4       	brcc	.+12     	; 0xbce <main+0x13c>
     bc2:	60 e0       	ldi	r22, 0x00	; 0
     bc4:	70 e0       	ldi	r23, 0x00	; 0
     bc6:	84 e0       	ldi	r24, 0x04	; 4
     bc8:	00 d1       	rcall	.+512    	; 0xdca <drawCurrentShape>
      ShapeShiftRight();
     bca:	e8 d0       	rcall	.+464    	; 0xd9c <ShapeShiftRight>
     bcc:	0a c0       	rjmp	.+20     	; 0xbe2 <main+0x150>
     bce:	99 ee       	ldi	r25, 0xE9	; 233
      
    }
    else if (buttonYVal > 1000)
     bd0:	89 16       	cp	r8, r25
     bd2:	93 e0       	ldi	r25, 0x03	; 3
     bd4:	99 06       	cpc	r9, r25
     bd6:	28 f0       	brcs	.+10     	; 0xbe2 <main+0x150>
     bd8:	60 e0       	ldi	r22, 0x00	; 0
    {
      drawCurrentShape(ShapeNum, BLACK);
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	84 e0       	ldi	r24, 0x04	; 4
     bde:	f5 d0       	rcall	.+490    	; 0xdca <drawCurrentShape>
     be0:	e3 d0       	rcall	.+454    	; 0xda8 <ShapeShiftLeft>
     be2:	2b 89       	ldd	r18, Y+19	; 0x13
      ShapeShiftLeft();
     be4:	21 11       	cpse	r18, r1
     be6:	83 cf       	rjmp	.-250    	; 0xaee <main+0x5c>
    }

    if (buttonSwitch == 0) ShapeRotate();
     be8:	e5 d0       	rcall	.+458    	; 0xdb4 <ShapeRotate>
     bea:	81 cf       	rjmp	.-254    	; 0xaee <main+0x5c>

00000bec <Rotate>:
                      0, 0, 0, 0,};

uint8_t Rotate(uint8_t px, uint8_t py, uint8_t r)
{
  uint8_t tmp;
  switch (r % 4)
     bec:	43 70       	andi	r20, 0x03	; 3
     bee:	41 30       	cpi	r20, 0x01	; 1
     bf0:	59 f0       	breq	.+22     	; 0xc08 <Rotate+0x1c>
     bf2:	28 f0       	brcs	.+10     	; 0xbfe <Rotate+0x12>
     bf4:	42 30       	cpi	r20, 0x02	; 2
     bf6:	71 f0       	breq	.+28     	; 0xc14 <Rotate+0x28>
     bf8:	43 30       	cpi	r20, 0x03	; 3
     bfa:	91 f0       	breq	.+36     	; 0xc20 <Rotate+0x34>
     bfc:	16 c0       	rjmp	.+44     	; 0xc2a <Rotate+0x3e>
  {
    case 0:
      tmp = py * 4 + px;
     bfe:	66 0f       	add	r22, r22
     c00:	66 0f       	add	r22, r22
     c02:	96 2f       	mov	r25, r22
     c04:	98 0f       	add	r25, r24
      break;
     c06:	11 c0       	rjmp	.+34     	; 0xc2a <Rotate+0x3e>
    case 1:
      tmp = 12 + py - (px * 4);
     c08:	64 5f       	subi	r22, 0xF4	; 244
     c0a:	88 0f       	add	r24, r24
     c0c:	88 0f       	add	r24, r24
     c0e:	96 2f       	mov	r25, r22
     c10:	98 1b       	sub	r25, r24
      break;
     c12:	0b c0       	rjmp	.+22     	; 0xc2a <Rotate+0x3e>
    case 2:
      tmp = 15 - (py * 4) - px;
     c14:	9f e0       	ldi	r25, 0x0F	; 15
     c16:	98 1b       	sub	r25, r24
     c18:	66 0f       	add	r22, r22
     c1a:	66 0f       	add	r22, r22
     c1c:	96 1b       	sub	r25, r22
      break;
     c1e:	05 c0       	rjmp	.+10     	; 0xc2a <Rotate+0x3e>
    case 3:
      tmp = 3 - py + (px * 4);
     c20:	88 0f       	add	r24, r24
     c22:	88 0f       	add	r24, r24
     c24:	8d 5f       	subi	r24, 0xFD	; 253
     c26:	98 2f       	mov	r25, r24
     c28:	96 1b       	sub	r25, r22
      break;
    default:
      break;
  }
  return tmp;
}
     c2a:	89 2f       	mov	r24, r25
     c2c:	08 95       	ret

00000c2e <showShape>:

uint8_t* showShape(uint8_t shapeNum)
{
  switch (shapeNum)
     c2e:	83 30       	cpi	r24, 0x03	; 3
     c30:	91 f0       	breq	.+36     	; 0xc56 <showShape+0x28>
     c32:	28 f4       	brcc	.+10     	; 0xc3e <showShape+0x10>
     c34:	81 30       	cpi	r24, 0x01	; 1
     c36:	49 f0       	breq	.+18     	; 0xc4a <showShape+0x1c>
     c38:	82 30       	cpi	r24, 0x02	; 2
     c3a:	51 f0       	breq	.+20     	; 0xc50 <showShape+0x22>
     c3c:	18 c0       	rjmp	.+48     	; 0xc6e <showShape+0x40>
     c3e:	85 30       	cpi	r24, 0x05	; 5
     c40:	81 f0       	breq	.+32     	; 0xc62 <showShape+0x34>
     c42:	60 f0       	brcs	.+24     	; 0xc5c <showShape+0x2e>
     c44:	86 30       	cpi	r24, 0x06	; 6
     c46:	81 f0       	breq	.+32     	; 0xc68 <showShape+0x3a>
     c48:	12 c0       	rjmp	.+36     	; 0xc6e <showShape+0x40>
  {
    case 0:
      return shape0;
    case 1:
      return shape1;
     c4a:	82 e5       	ldi	r24, 0x52	; 82
     c4c:	92 e0       	ldi	r25, 0x02	; 2
     c4e:	08 95       	ret
    case 2:
      return shape2;
     c50:	82 e4       	ldi	r24, 0x42	; 66
     c52:	92 e0       	ldi	r25, 0x02	; 2
     c54:	08 95       	ret
    case 3:
      return shape3;
     c56:	82 e3       	ldi	r24, 0x32	; 50
     c58:	92 e0       	ldi	r25, 0x02	; 2
     c5a:	08 95       	ret
    case 4:
      return shape4;
     c5c:	82 e2       	ldi	r24, 0x22	; 34
     c5e:	92 e0       	ldi	r25, 0x02	; 2
     c60:	08 95       	ret
    case 5:
      return shape5;
     c62:	82 e1       	ldi	r24, 0x12	; 18
     c64:	92 e0       	ldi	r25, 0x02	; 2
     c66:	08 95       	ret
    case 6:
      return shape6;
     c68:	82 e0       	ldi	r24, 0x02	; 2
     c6a:	92 e0       	ldi	r25, 0x02	; 2
     c6c:	08 95       	ret
uint8_t* showShape(uint8_t shapeNum)
{
  switch (shapeNum)
  {
    case 0:
      return shape0;
     c6e:	82 e6       	ldi	r24, 0x62	; 98
     c70:	92 e0       	ldi	r25, 0x02	; 2
    case 6:
      return shape6;
    default:
      return shape0;
  }
}
     c72:	08 95       	ret

00000c74 <SPI_Master_init>:
  SPI_Clock_Polarity_Select(LEADING_EDGE_RISING);
  SPI_Clock_Phase_Select(LEADING_EDGE_SAMPLE);
  SPI_Clock_Rate(SPI_CLOCK_RATE_8MHz);
  SPI_enable();

  mIsSlaveInitialised = true;
     c74:	80 91 96 08 	lds	r24, 0x0896	; 0x800896 <__data_end>
     c78:	90 91 97 08 	lds	r25, 0x0897	; 0x800897 <__data_end+0x1>
     c7c:	89 2b       	or	r24, r25
     c7e:	09 f5       	brne	.+66     	; 0xcc2 <SPI_Master_init+0x4e>
     c80:	84 b1       	in	r24, 0x04	; 4
     c82:	87 60       	ori	r24, 0x07	; 7
     c84:	84 b9       	out	0x04, r24	; 4
     c86:	8c b5       	in	r24, 0x2c	; 44
     c88:	80 61       	ori	r24, 0x10	; 16
     c8a:	8c bd       	out	0x2c, r24	; 44
     c8c:	8c b5       	in	r24, 0x2c	; 44
     c8e:	8f 7d       	andi	r24, 0xDF	; 223
     c90:	8c bd       	out	0x2c, r24	; 44
     c92:	8c b5       	in	r24, 0x2c	; 44
     c94:	87 7f       	andi	r24, 0xF7	; 247
     c96:	8c bd       	out	0x2c, r24	; 44
     c98:	8c b5       	in	r24, 0x2c	; 44
     c9a:	8b 7f       	andi	r24, 0xFB	; 251
     c9c:	8c bd       	out	0x2c, r24	; 44
     c9e:	8c b5       	in	r24, 0x2c	; 44
     ca0:	8d 7f       	andi	r24, 0xFD	; 253
     ca2:	8c bd       	out	0x2c, r24	; 44
     ca4:	8c b5       	in	r24, 0x2c	; 44
     ca6:	8e 7f       	andi	r24, 0xFE	; 254
     ca8:	8c bd       	out	0x2c, r24	; 44
     caa:	8d b5       	in	r24, 0x2d	; 45
     cac:	81 60       	ori	r24, 0x01	; 1
     cae:	8d bd       	out	0x2d, r24	; 45
     cb0:	8c b5       	in	r24, 0x2c	; 44
     cb2:	80 64       	ori	r24, 0x40	; 64
     cb4:	8c bd       	out	0x2c, r24	; 44
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	90 93 97 08 	sts	0x0897, r25	; 0x800897 <__data_end+0x1>
     cbe:	80 93 96 08 	sts	0x0896, r24	; 0x800896 <__data_end>
     cc2:	08 95       	ret

00000cc4 <SPI_Master_transmit>:
}

//Need to select slave before sending the data
char SPI_Master_transmit(char data)
{
  SPDR = data;
     cc4:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & (1<<SPIF))) {};
     cc6:	0d b4       	in	r0, 0x2d	; 45
     cc8:	07 fe       	sbrs	r0, 7
     cca:	fd cf       	rjmp	.-6      	; 0xcc6 <SPI_Master_transmit+0x2>
  return SPDR;
     ccc:	8e b5       	in	r24, 0x2e	; 46
}
     cce:	08 95       	ret

00000cd0 <drawFrame>:
}

void moveShapeCursor(uint8_t row, uint8_t col)
{
  mShapeCursor.row = row;
  mShapeCursor.col = col;
     cd0:	0f 93       	push	r16
     cd2:	1f 93       	push	r17
     cd4:	cf 93       	push	r28
     cd6:	df 93       	push	r29
     cd8:	c5 e7       	ldi	r28, 0x75	; 117
     cda:	d2 e0       	ldi	r29, 0x02	; 2
     cdc:	0a 85       	ldd	r16, Y+10	; 0x0a
     cde:	1b 85       	ldd	r17, Y+11	; 0x0b
     ce0:	2e 81       	ldd	r18, Y+6	; 0x06
     ce2:	3f 81       	ldd	r19, Y+7	; 0x07
     ce4:	4c 81       	ldd	r20, Y+4	; 0x04
     ce6:	5d 81       	ldd	r21, Y+5	; 0x05
     ce8:	6a 81       	ldd	r22, Y+2	; 0x02
     cea:	7b 81       	ldd	r23, Y+3	; 0x03
     cec:	88 81       	ld	r24, Y
     cee:	99 81       	ldd	r25, Y+1	; 0x01
     cf0:	99 dd       	rcall	.-1230   	; 0x824 <LCD_GUI_DrawRectangle>
     cf2:	e8 85       	ldd	r30, Y+8	; 0x08
     cf4:	f9 85       	ldd	r31, Y+9	; 0x09
     cf6:	0a 85       	ldd	r16, Y+10	; 0x0a
     cf8:	1b 85       	ldd	r17, Y+11	; 0x0b
     cfa:	2e 81       	ldd	r18, Y+6	; 0x06
     cfc:	3f 81       	ldd	r19, Y+7	; 0x07
     cfe:	2e 0f       	add	r18, r30
     d00:	3f 1f       	adc	r19, r31
     d02:	4c 81       	ldd	r20, Y+4	; 0x04
     d04:	5d 81       	ldd	r21, Y+5	; 0x05
     d06:	4e 0f       	add	r20, r30
     d08:	5f 1f       	adc	r21, r31
     d0a:	6a 81       	ldd	r22, Y+2	; 0x02
     d0c:	7b 81       	ldd	r23, Y+3	; 0x03
     d0e:	6e 1b       	sub	r22, r30
     d10:	7f 0b       	sbc	r23, r31
     d12:	88 81       	ld	r24, Y
     d14:	99 81       	ldd	r25, Y+1	; 0x01
     d16:	8e 1b       	sub	r24, r30
     d18:	9f 0b       	sbc	r25, r31
     d1a:	84 dd       	rcall	.-1272   	; 0x824 <LCD_GUI_DrawRectangle>
     d1c:	df 91       	pop	r29
     d1e:	cf 91       	pop	r28
     d20:	1f 91       	pop	r17
     d22:	0f 91       	pop	r16
     d24:	08 95       	ret

00000d26 <getUnitBlockPos>:
     d26:	cf 93       	push	r28
     d28:	df 93       	push	r29
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
     d2e:	28 97       	sbiw	r28, 0x08	; 8
     d30:	0f b6       	in	r0, 0x3f	; 63
     d32:	f8 94       	cli
     d34:	de bf       	out	0x3e, r29	; 62
     d36:	0f be       	out	0x3f, r0	; 63
     d38:	cd bf       	out	0x3d, r28	; 61
     d3a:	9f e0       	ldi	r25, 0x0F	; 15
     d3c:	96 9f       	mul	r25, r22
     d3e:	b0 01       	movw	r22, r0
     d40:	11 24       	eor	r1, r1
     d42:	98 9f       	mul	r25, r24
     d44:	c0 01       	movw	r24, r0
     d46:	11 24       	eor	r1, r1
     d48:	9b 01       	movw	r18, r22
     d4a:	24 5f       	subi	r18, 0xF4	; 244
     d4c:	3f 4f       	sbci	r19, 0xFF	; 255
     d4e:	3a 83       	std	Y+2, r19	; 0x02
     d50:	29 83       	std	Y+1, r18	; 0x01
     d52:	ac 01       	movw	r20, r24
     d54:	46 5f       	subi	r20, 0xF6	; 246
     d56:	5f 4f       	sbci	r21, 0xFF	; 255
     d58:	5c 83       	std	Y+4, r21	; 0x04
     d5a:	4b 83       	std	Y+3, r20	; 0x03
     d5c:	67 5e       	subi	r22, 0xE7	; 231
     d5e:	7f 4f       	sbci	r23, 0xFF	; 255
     d60:	7e 83       	std	Y+6, r23	; 0x06
     d62:	6d 83       	std	Y+5, r22	; 0x05
     d64:	47 96       	adiw	r24, 0x17	; 23
     d66:	98 87       	std	Y+8, r25	; 0x08
     d68:	8f 83       	std	Y+7, r24	; 0x07
     d6a:	3a 81       	ldd	r19, Y+2	; 0x02
     d6c:	5c 81       	ldd	r21, Y+4	; 0x04
     d6e:	7e 81       	ldd	r23, Y+6	; 0x06
     d70:	98 85       	ldd	r25, Y+8	; 0x08
     d72:	28 96       	adiw	r28, 0x08	; 8
     d74:	0f b6       	in	r0, 0x3f	; 63
     d76:	f8 94       	cli
     d78:	de bf       	out	0x3e, r29	; 62
     d7a:	0f be       	out	0x3f, r0	; 63
     d7c:	cd bf       	out	0x3d, r28	; 61
     d7e:	df 91       	pop	r29
     d80:	cf 91       	pop	r28
     d82:	08 95       	ret

00000d84 <ShapeShiftUp>:
  moveShapeCursor(0, 5);
}

void ShapeShiftUp(void)
{
  mShapeCursor.row--;
     d84:	e2 e7       	ldi	r30, 0x72	; 114
     d86:	f2 e0       	ldi	r31, 0x02	; 2
     d88:	80 81       	ld	r24, Z
     d8a:	81 50       	subi	r24, 0x01	; 1
     d8c:	80 83       	st	Z, r24
     d8e:	08 95       	ret

00000d90 <ShapeShiftDown>:
}

void ShapeShiftDown(void)
{
  mShapeCursor.row++;
     d90:	e2 e7       	ldi	r30, 0x72	; 114
     d92:	f2 e0       	ldi	r31, 0x02	; 2
     d94:	80 81       	ld	r24, Z
     d96:	8f 5f       	subi	r24, 0xFF	; 255
     d98:	80 83       	st	Z, r24
     d9a:	08 95       	ret

00000d9c <ShapeShiftRight>:
}

void ShapeShiftRight(void)
{
  mShapeCursor.col++;
     d9c:	e2 e7       	ldi	r30, 0x72	; 114
     d9e:	f2 e0       	ldi	r31, 0x02	; 2
     da0:	81 81       	ldd	r24, Z+1	; 0x01
     da2:	8f 5f       	subi	r24, 0xFF	; 255
     da4:	81 83       	std	Z+1, r24	; 0x01
     da6:	08 95       	ret

00000da8 <ShapeShiftLeft>:
}

void ShapeShiftLeft(void)
{
  mShapeCursor.col--;
     da8:	e2 e7       	ldi	r30, 0x72	; 114
     daa:	f2 e0       	ldi	r31, 0x02	; 2
     dac:	81 81       	ldd	r24, Z+1	; 0x01
     dae:	81 50       	subi	r24, 0x01	; 1
     db0:	81 83       	std	Z+1, r24	; 0x01
     db2:	08 95       	ret

00000db4 <ShapeRotate>:
}

void ShapeRotate(void)
{
  mShapeCursor.rot++;
     db4:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <mShapeCursor+0x2>
     db8:	8f 5f       	subi	r24, 0xFF	; 255
  if (mShapeCursor.rot >= 4) mShapeCursor.rot = 0;
     dba:	84 30       	cpi	r24, 0x04	; 4
     dbc:	18 f4       	brcc	.+6      	; 0xdc4 <ShapeRotate+0x10>
  mShapeCursor.col--;
}

void ShapeRotate(void)
{
  mShapeCursor.rot++;
     dbe:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <mShapeCursor+0x2>
     dc2:	08 95       	ret
  if (mShapeCursor.rot >= 4) mShapeCursor.rot = 0;
     dc4:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <mShapeCursor+0x2>
     dc8:	08 95       	ret

00000dca <drawCurrentShape>:
}


void drawCurrentShape(uint8_t shapeNum, uint16_t colour)
{
     dca:	2f 92       	push	r2
     dcc:	3f 92       	push	r3
     dce:	4f 92       	push	r4
     dd0:	5f 92       	push	r5
     dd2:	6f 92       	push	r6
     dd4:	7f 92       	push	r7
     dd6:	8f 92       	push	r8
     dd8:	9f 92       	push	r9
     dda:	af 92       	push	r10
     ddc:	bf 92       	push	r11
     dde:	cf 92       	push	r12
     de0:	df 92       	push	r13
     de2:	ef 92       	push	r14
     de4:	ff 92       	push	r15
     de6:	0f 93       	push	r16
     de8:	1f 93       	push	r17
     dea:	cf 93       	push	r28
     dec:	df 93       	push	r29
     dee:	cd b7       	in	r28, 0x3d	; 61
     df0:	de b7       	in	r29, 0x3e	; 62
     df2:	28 97       	sbiw	r28, 0x08	; 8
     df4:	0f b6       	in	r0, 0x3f	; 63
     df6:	f8 94       	cli
     df8:	de bf       	out	0x3e, r29	; 62
     dfa:	0f be       	out	0x3f, r0	; 63
     dfc:	cd bf       	out	0x3d, r28	; 61
     dfe:	66 2e       	mov	r6, r22
     e00:	77 2e       	mov	r7, r23
  uint8_t rowPos = mShapeCursor.row;
     e02:	e2 e7       	ldi	r30, 0x72	; 114
     e04:	f2 e0       	ldi	r31, 0x02	; 2
     e06:	30 80       	ld	r3, Z
  uint8_t colPos = mShapeCursor.col;
     e08:	b1 80       	ldd	r11, Z+1	; 0x01
  
  uint8_t *shape = showShape(shapeNum);
     e0a:	11 df       	rcall	.-478    	; 0xc2e <showShape>
     e0c:	4c 01       	movw	r8, r24
  __unitBlockPos blockPos;
  uint16_t mColour;
  
  for (uint8_t i = 0; i < 4; i++)
     e0e:	e1 2c       	mov	r14, r1
  {
    for (uint8_t j = 0; j < 4; j++)
    {
      //moveShapeCursor(rowPos, colPos);
      if (shape[Rotate(j, i, mShapeCursor.rot)]) mColour = colour;
     e10:	0f 2e       	mov	r0, r31
     e12:	f2 e7       	ldi	r31, 0x72	; 114
     e14:	cf 2e       	mov	r12, r31
     e16:	f2 e0       	ldi	r31, 0x02	; 2
     e18:	df 2e       	mov	r13, r31
     e1a:	f0 2d       	mov	r31, r0
      else mColour = BLACK;
     e1c:	41 2c       	mov	r4, r1
     e1e:	51 2c       	mov	r5, r1
     e20:	2f c0       	rjmp	.+94     	; 0xe80 <drawCurrentShape+0xb6>
     e22:	2b 2c       	mov	r2, r11
     e24:	2f 0c       	add	r2, r15
  for (uint8_t i = 0; i < 4; i++)
  {
    for (uint8_t j = 0; j < 4; j++)
    {
      //moveShapeCursor(rowPos, colPos);
      if (shape[Rotate(j, i, mShapeCursor.rot)]) mColour = colour;
     e26:	f6 01       	movw	r30, r12
     e28:	42 81       	ldd	r20, Z+2	; 0x02
     e2a:	6e 2d       	mov	r22, r14
     e2c:	8f 2d       	mov	r24, r15
     e2e:	de de       	rcall	.-580    	; 0xbec <Rotate>
     e30:	f4 01       	movw	r30, r8
     e32:	e8 0f       	add	r30, r24
     e34:	f1 1d       	adc	r31, r1
     e36:	80 81       	ld	r24, Z
     e38:	88 23       	and	r24, r24
     e3a:	19 f0       	breq	.+6      	; 0xe42 <drawCurrentShape+0x78>
     e3c:	06 2d       	mov	r16, r6
     e3e:	17 2d       	mov	r17, r7
     e40:	02 c0       	rjmp	.+4      	; 0xe46 <drawCurrentShape+0x7c>
      else mColour = BLACK;
     e42:	04 2d       	mov	r16, r4
     e44:	15 2d       	mov	r17, r5
      blockPos = getUnitBlockPos(rowPos, colPos) ;
     e46:	62 2d       	mov	r22, r2
     e48:	8a 2d       	mov	r24, r10
     e4a:	6d df       	rcall	.-294    	; 0xd26 <getUnitBlockPos>
     e4c:	29 83       	std	Y+1, r18	; 0x01
     e4e:	3a 83       	std	Y+2, r19	; 0x02
     e50:	4b 83       	std	Y+3, r20	; 0x03
     e52:	5c 83       	std	Y+4, r21	; 0x04
     e54:	6d 83       	std	Y+5, r22	; 0x05
     e56:	7e 83       	std	Y+6, r23	; 0x06
     e58:	8f 83       	std	Y+7, r24	; 0x07
     e5a:	98 87       	std	Y+8, r25	; 0x08
      LCD_GUI_DrawFillRectangle(blockPos.unitBlock_x1, 
     e5c:	2f 81       	ldd	r18, Y+7	; 0x07
     e5e:	38 85       	ldd	r19, Y+8	; 0x08
     e60:	4d 81       	ldd	r20, Y+5	; 0x05
     e62:	5e 81       	ldd	r21, Y+6	; 0x06
     e64:	6b 81       	ldd	r22, Y+3	; 0x03
     e66:	7c 81       	ldd	r23, Y+4	; 0x04
     e68:	89 81       	ldd	r24, Y+1	; 0x01
     e6a:	9a 81       	ldd	r25, Y+2	; 0x02
     e6c:	09 dd       	rcall	.-1518   	; 0x880 <LCD_GUI_DrawFillRectangle>
  __unitBlockPos blockPos;
  uint16_t mColour;
  
  for (uint8_t i = 0; i < 4; i++)
  {
    for (uint8_t j = 0; j < 4; j++)
     e6e:	f3 94       	inc	r15
     e70:	f4 e0       	ldi	r31, 0x04	; 4
     e72:	ff 12       	cpse	r15, r31
     e74:	d6 cf       	rjmp	.-84     	; 0xe22 <drawCurrentShape+0x58>
  
  uint8_t *shape = showShape(shapeNum);
  __unitBlockPos blockPos;
  uint16_t mColour;
  
  for (uint8_t i = 0; i < 4; i++)
     e76:	e3 94       	inc	r14
     e78:	ef 16       	cp	r14, r31
     e7a:	31 f0       	breq	.+12     	; 0xe88 <drawCurrentShape+0xbe>
                                blockPos.unitBlock_x2, 
                                blockPos.unitBlock_y2, 
                                mColour);
      colPos++;
    }
    colPos = mShapeCursor.col;
     e7c:	f6 01       	movw	r30, r12
     e7e:	b1 80       	ldd	r11, Z+1	; 0x01
     e80:	a3 2c       	mov	r10, r3
     e82:	ae 0c       	add	r10, r14
  if (mShapeCursor.rot >= 4) mShapeCursor.rot = 0;
}


void drawCurrentShape(uint8_t shapeNum, uint16_t colour)
{
     e84:	f1 2c       	mov	r15, r1
     e86:	cd cf       	rjmp	.-102    	; 0xe22 <drawCurrentShape+0x58>
    }
    colPos = mShapeCursor.col;
    rowPos++;
  }
  moveShapeCursor(mShapeCursor.row, mShapeCursor.col);
}
     e88:	28 96       	adiw	r28, 0x08	; 8
     e8a:	0f b6       	in	r0, 0x3f	; 63
     e8c:	f8 94       	cli
     e8e:	de bf       	out	0x3e, r29	; 62
     e90:	0f be       	out	0x3f, r0	; 63
     e92:	cd bf       	out	0x3d, r28	; 61
     e94:	df 91       	pop	r29
     e96:	cf 91       	pop	r28
     e98:	1f 91       	pop	r17
     e9a:	0f 91       	pop	r16
     e9c:	ff 90       	pop	r15
     e9e:	ef 90       	pop	r14
     ea0:	df 90       	pop	r13
     ea2:	cf 90       	pop	r12
     ea4:	bf 90       	pop	r11
     ea6:	af 90       	pop	r10
     ea8:	9f 90       	pop	r9
     eaa:	8f 90       	pop	r8
     eac:	7f 90       	pop	r7
     eae:	6f 90       	pop	r6
     eb0:	5f 90       	pop	r5
     eb2:	4f 90       	pop	r4
     eb4:	3f 90       	pop	r3
     eb6:	2f 90       	pop	r2
     eb8:	08 95       	ret

00000eba <USART_putstring>:
long USART_received_Int(void)
{
	long number;
	number = atol(Rx_buffer);
	return number;
}
     eba:	cf 93       	push	r28
     ebc:	df 93       	push	r29
     ebe:	fc 01       	movw	r30, r24
     ec0:	20 81       	ld	r18, Z
     ec2:	22 23       	and	r18, r18
     ec4:	69 f0       	breq	.+26     	; 0xee0 <USART_putstring+0x26>
     ec6:	dc 01       	movw	r26, r24
     ec8:	11 96       	adiw	r26, 0x01	; 1
     eca:	e0 ec       	ldi	r30, 0xC0	; 192
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	c6 ec       	ldi	r28, 0xC6	; 198
     ed0:	d0 e0       	ldi	r29, 0x00	; 0
     ed2:	90 81       	ld	r25, Z
     ed4:	95 ff       	sbrs	r25, 5
     ed6:	fd cf       	rjmp	.-6      	; 0xed2 <USART_putstring+0x18>
     ed8:	28 83       	st	Y, r18
     eda:	2d 91       	ld	r18, X+
     edc:	21 11       	cpse	r18, r1
     ede:	f9 cf       	rjmp	.-14     	; 0xed2 <USART_putstring+0x18>
     ee0:	df 91       	pop	r29
     ee2:	cf 91       	pop	r28
     ee4:	08 95       	ret

00000ee6 <__vector_25>:
  while (!(UCSR0A & (1 << UDRE0)));  //wait until UDRE0 is set
  UDR0 = data;
}

ISR(USART0_RX_vect)
{
     ee6:	1f 92       	push	r1
     ee8:	0f 92       	push	r0
     eea:	0f b6       	in	r0, 0x3f	; 63
     eec:	0f 92       	push	r0
     eee:	11 24       	eor	r1, r1
     ef0:	0b b6       	in	r0, 0x3b	; 59
     ef2:	0f 92       	push	r0
     ef4:	2f 93       	push	r18
     ef6:	3f 93       	push	r19
     ef8:	4f 93       	push	r20
     efa:	5f 93       	push	r21
     efc:	6f 93       	push	r22
     efe:	7f 93       	push	r23
     f00:	8f 93       	push	r24
     f02:	9f 93       	push	r25
     f04:	af 93       	push	r26
     f06:	bf 93       	push	r27
     f08:	ef 93       	push	r30
     f0a:	ff 93       	push	r31
	char ReceivedByte;
	ReceivedByte = UDR0; // Fetch the received byte value into the variable "ByteReceived"
     f0c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	//UDR0 = ReceivedByte; // Echo back the received byte back to the computer
	Rx_buffer[Rx_buffer_index++] = ReceivedByte;
     f10:	e0 91 98 08 	lds	r30, 0x0898	; 0x800898 <Rx_buffer_index>
     f14:	91 e0       	ldi	r25, 0x01	; 1
     f16:	9e 0f       	add	r25, r30
     f18:	90 93 98 08 	sts	0x0898, r25	; 0x800898 <Rx_buffer_index>
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	e9 52       	subi	r30, 0x29	; 41
     f20:	f7 4f       	sbci	r31, 0xF7	; 247
     f22:	80 83       	st	Z, r24
	if (ReceivedByte == '\n') 
     f24:	8a 30       	cpi	r24, 0x0A	; 10
     f26:	71 f4       	brne	.+28     	; 0xf44 <__vector_25+0x5e>
	{
		Rx_buffer[Rx_buffer_index] = 0; //put zero to terminate the string array
     f28:	e0 91 98 08 	lds	r30, 0x0898	; 0x800898 <Rx_buffer_index>
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	e9 52       	subi	r30, 0x29	; 41
     f30:	f7 4f       	sbci	r31, 0xF7	; 247
     f32:	10 82       	st	Z, r1
		USART_putstring("[Rx echo]: ");
     f34:	8a e8       	ldi	r24, 0x8A	; 138
     f36:	98 e0       	ldi	r25, 0x08	; 8
     f38:	c0 df       	rcall	.-128    	; 0xeba <USART_putstring>
		USART_putstring(Rx_buffer);
     f3a:	87 ed       	ldi	r24, 0xD7	; 215
     f3c:	98 e0       	ldi	r25, 0x08	; 8
     f3e:	bd df       	rcall	.-134    	; 0xeba <USART_putstring>
		Rx_buffer_index = 0;
     f40:	10 92 98 08 	sts	0x0898, r1	; 0x800898 <Rx_buffer_index>
		ReceivedByte = 0x00;
	}
}
     f44:	ff 91       	pop	r31
     f46:	ef 91       	pop	r30
     f48:	bf 91       	pop	r27
     f4a:	af 91       	pop	r26
     f4c:	9f 91       	pop	r25
     f4e:	8f 91       	pop	r24
     f50:	7f 91       	pop	r23
     f52:	6f 91       	pop	r22
     f54:	5f 91       	pop	r21
     f56:	4f 91       	pop	r20
     f58:	3f 91       	pop	r19
     f5a:	2f 91       	pop	r18
     f5c:	0f 90       	pop	r0
     f5e:	0b be       	out	0x3b, r0	; 59
     f60:	0f 90       	pop	r0
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	0f 90       	pop	r0
     f66:	1f 90       	pop	r1
     f68:	18 95       	reti

00000f6a <__udivmodqi4>:
     f6a:	99 1b       	sub	r25, r25
     f6c:	79 e0       	ldi	r23, 0x09	; 9
     f6e:	04 c0       	rjmp	.+8      	; 0xf78 <__udivmodqi4_ep>

00000f70 <__udivmodqi4_loop>:
     f70:	99 1f       	adc	r25, r25
     f72:	96 17       	cp	r25, r22
     f74:	08 f0       	brcs	.+2      	; 0xf78 <__udivmodqi4_ep>
     f76:	96 1b       	sub	r25, r22

00000f78 <__udivmodqi4_ep>:
     f78:	88 1f       	adc	r24, r24
     f7a:	7a 95       	dec	r23
     f7c:	c9 f7       	brne	.-14     	; 0xf70 <__udivmodqi4_loop>
     f7e:	80 95       	com	r24
     f80:	08 95       	ret

00000f82 <__divmodhi4>:
     f82:	97 fb       	bst	r25, 7
     f84:	07 2e       	mov	r0, r23
     f86:	16 f4       	brtc	.+4      	; 0xf8c <__divmodhi4+0xa>
     f88:	00 94       	com	r0
     f8a:	06 d0       	rcall	.+12     	; 0xf98 <__divmodhi4_neg1>
     f8c:	77 fd       	sbrc	r23, 7
     f8e:	08 d0       	rcall	.+16     	; 0xfa0 <__divmodhi4_neg2>
     f90:	0b d0       	rcall	.+22     	; 0xfa8 <__udivmodhi4>
     f92:	07 fc       	sbrc	r0, 7
     f94:	05 d0       	rcall	.+10     	; 0xfa0 <__divmodhi4_neg2>
     f96:	3e f4       	brtc	.+14     	; 0xfa6 <__divmodhi4_exit>

00000f98 <__divmodhi4_neg1>:
     f98:	90 95       	com	r25
     f9a:	81 95       	neg	r24
     f9c:	9f 4f       	sbci	r25, 0xFF	; 255
     f9e:	08 95       	ret

00000fa0 <__divmodhi4_neg2>:
     fa0:	70 95       	com	r23
     fa2:	61 95       	neg	r22
     fa4:	7f 4f       	sbci	r23, 0xFF	; 255

00000fa6 <__divmodhi4_exit>:
     fa6:	08 95       	ret

00000fa8 <__udivmodhi4>:
     fa8:	aa 1b       	sub	r26, r26
     faa:	bb 1b       	sub	r27, r27
     fac:	51 e1       	ldi	r21, 0x11	; 17
     fae:	07 c0       	rjmp	.+14     	; 0xfbe <__udivmodhi4_ep>

00000fb0 <__udivmodhi4_loop>:
     fb0:	aa 1f       	adc	r26, r26
     fb2:	bb 1f       	adc	r27, r27
     fb4:	a6 17       	cp	r26, r22
     fb6:	b7 07       	cpc	r27, r23
     fb8:	10 f0       	brcs	.+4      	; 0xfbe <__udivmodhi4_ep>
     fba:	a6 1b       	sub	r26, r22
     fbc:	b7 0b       	sbc	r27, r23

00000fbe <__udivmodhi4_ep>:
     fbe:	88 1f       	adc	r24, r24
     fc0:	99 1f       	adc	r25, r25
     fc2:	5a 95       	dec	r21
     fc4:	a9 f7       	brne	.-22     	; 0xfb0 <__udivmodhi4_loop>
     fc6:	80 95       	com	r24
     fc8:	90 95       	com	r25
     fca:	bc 01       	movw	r22, r24
     fcc:	cd 01       	movw	r24, r26
     fce:	08 95       	ret

00000fd0 <sprintf>:
     fd0:	0f 93       	push	r16
     fd2:	1f 93       	push	r17
     fd4:	cf 93       	push	r28
     fd6:	df 93       	push	r29
     fd8:	cd b7       	in	r28, 0x3d	; 61
     fda:	de b7       	in	r29, 0x3e	; 62
     fdc:	2e 97       	sbiw	r28, 0x0e	; 14
     fde:	0f b6       	in	r0, 0x3f	; 63
     fe0:	f8 94       	cli
     fe2:	de bf       	out	0x3e, r29	; 62
     fe4:	0f be       	out	0x3f, r0	; 63
     fe6:	cd bf       	out	0x3d, r28	; 61
     fe8:	0e 89       	ldd	r16, Y+22	; 0x16
     fea:	1f 89       	ldd	r17, Y+23	; 0x17
     fec:	86 e0       	ldi	r24, 0x06	; 6
     fee:	8c 83       	std	Y+4, r24	; 0x04
     ff0:	1a 83       	std	Y+2, r17	; 0x02
     ff2:	09 83       	std	Y+1, r16	; 0x01
     ff4:	8f ef       	ldi	r24, 0xFF	; 255
     ff6:	9f e7       	ldi	r25, 0x7F	; 127
     ff8:	9e 83       	std	Y+6, r25	; 0x06
     ffa:	8d 83       	std	Y+5, r24	; 0x05
     ffc:	ae 01       	movw	r20, r28
     ffe:	46 5e       	subi	r20, 0xE6	; 230
    1000:	5f 4f       	sbci	r21, 0xFF	; 255
    1002:	68 8d       	ldd	r22, Y+24	; 0x18
    1004:	79 8d       	ldd	r23, Y+25	; 0x19
    1006:	ce 01       	movw	r24, r28
    1008:	01 96       	adiw	r24, 0x01	; 1
    100a:	10 d0       	rcall	.+32     	; 0x102c <vfprintf>
    100c:	ef 81       	ldd	r30, Y+7	; 0x07
    100e:	f8 85       	ldd	r31, Y+8	; 0x08
    1010:	e0 0f       	add	r30, r16
    1012:	f1 1f       	adc	r31, r17
    1014:	10 82       	st	Z, r1
    1016:	2e 96       	adiw	r28, 0x0e	; 14
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	f8 94       	cli
    101c:	de bf       	out	0x3e, r29	; 62
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	cd bf       	out	0x3d, r28	; 61
    1022:	df 91       	pop	r29
    1024:	cf 91       	pop	r28
    1026:	1f 91       	pop	r17
    1028:	0f 91       	pop	r16
    102a:	08 95       	ret

0000102c <vfprintf>:
    102c:	2f 92       	push	r2
    102e:	3f 92       	push	r3
    1030:	4f 92       	push	r4
    1032:	5f 92       	push	r5
    1034:	6f 92       	push	r6
    1036:	7f 92       	push	r7
    1038:	8f 92       	push	r8
    103a:	9f 92       	push	r9
    103c:	af 92       	push	r10
    103e:	bf 92       	push	r11
    1040:	cf 92       	push	r12
    1042:	df 92       	push	r13
    1044:	ef 92       	push	r14
    1046:	ff 92       	push	r15
    1048:	0f 93       	push	r16
    104a:	1f 93       	push	r17
    104c:	cf 93       	push	r28
    104e:	df 93       	push	r29
    1050:	cd b7       	in	r28, 0x3d	; 61
    1052:	de b7       	in	r29, 0x3e	; 62
    1054:	2b 97       	sbiw	r28, 0x0b	; 11
    1056:	0f b6       	in	r0, 0x3f	; 63
    1058:	f8 94       	cli
    105a:	de bf       	out	0x3e, r29	; 62
    105c:	0f be       	out	0x3f, r0	; 63
    105e:	cd bf       	out	0x3d, r28	; 61
    1060:	6c 01       	movw	r12, r24
    1062:	7b 01       	movw	r14, r22
    1064:	8a 01       	movw	r16, r20
    1066:	fc 01       	movw	r30, r24
    1068:	17 82       	std	Z+7, r1	; 0x07
    106a:	16 82       	std	Z+6, r1	; 0x06
    106c:	83 81       	ldd	r24, Z+3	; 0x03
    106e:	81 ff       	sbrs	r24, 1
    1070:	bf c1       	rjmp	.+894    	; 0x13f0 <vfprintf+0x3c4>
    1072:	ce 01       	movw	r24, r28
    1074:	01 96       	adiw	r24, 0x01	; 1
    1076:	3c 01       	movw	r6, r24
    1078:	f6 01       	movw	r30, r12
    107a:	93 81       	ldd	r25, Z+3	; 0x03
    107c:	f7 01       	movw	r30, r14
    107e:	93 fd       	sbrc	r25, 3
    1080:	85 91       	lpm	r24, Z+
    1082:	93 ff       	sbrs	r25, 3
    1084:	81 91       	ld	r24, Z+
    1086:	7f 01       	movw	r14, r30
    1088:	88 23       	and	r24, r24
    108a:	09 f4       	brne	.+2      	; 0x108e <vfprintf+0x62>
    108c:	ad c1       	rjmp	.+858    	; 0x13e8 <vfprintf+0x3bc>
    108e:	85 32       	cpi	r24, 0x25	; 37
    1090:	39 f4       	brne	.+14     	; 0x10a0 <vfprintf+0x74>
    1092:	93 fd       	sbrc	r25, 3
    1094:	85 91       	lpm	r24, Z+
    1096:	93 ff       	sbrs	r25, 3
    1098:	81 91       	ld	r24, Z+
    109a:	7f 01       	movw	r14, r30
    109c:	85 32       	cpi	r24, 0x25	; 37
    109e:	21 f4       	brne	.+8      	; 0x10a8 <vfprintf+0x7c>
    10a0:	b6 01       	movw	r22, r12
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	d6 d1       	rcall	.+940    	; 0x1452 <fputc>
    10a6:	e8 cf       	rjmp	.-48     	; 0x1078 <vfprintf+0x4c>
    10a8:	91 2c       	mov	r9, r1
    10aa:	21 2c       	mov	r2, r1
    10ac:	31 2c       	mov	r3, r1
    10ae:	ff e1       	ldi	r31, 0x1F	; 31
    10b0:	f3 15       	cp	r31, r3
    10b2:	d8 f0       	brcs	.+54     	; 0x10ea <vfprintf+0xbe>
    10b4:	8b 32       	cpi	r24, 0x2B	; 43
    10b6:	79 f0       	breq	.+30     	; 0x10d6 <vfprintf+0xaa>
    10b8:	38 f4       	brcc	.+14     	; 0x10c8 <vfprintf+0x9c>
    10ba:	80 32       	cpi	r24, 0x20	; 32
    10bc:	79 f0       	breq	.+30     	; 0x10dc <vfprintf+0xb0>
    10be:	83 32       	cpi	r24, 0x23	; 35
    10c0:	a1 f4       	brne	.+40     	; 0x10ea <vfprintf+0xbe>
    10c2:	23 2d       	mov	r18, r3
    10c4:	20 61       	ori	r18, 0x10	; 16
    10c6:	1d c0       	rjmp	.+58     	; 0x1102 <vfprintf+0xd6>
    10c8:	8d 32       	cpi	r24, 0x2D	; 45
    10ca:	61 f0       	breq	.+24     	; 0x10e4 <vfprintf+0xb8>
    10cc:	80 33       	cpi	r24, 0x30	; 48
    10ce:	69 f4       	brne	.+26     	; 0x10ea <vfprintf+0xbe>
    10d0:	23 2d       	mov	r18, r3
    10d2:	21 60       	ori	r18, 0x01	; 1
    10d4:	16 c0       	rjmp	.+44     	; 0x1102 <vfprintf+0xd6>
    10d6:	83 2d       	mov	r24, r3
    10d8:	82 60       	ori	r24, 0x02	; 2
    10da:	38 2e       	mov	r3, r24
    10dc:	e3 2d       	mov	r30, r3
    10de:	e4 60       	ori	r30, 0x04	; 4
    10e0:	3e 2e       	mov	r3, r30
    10e2:	2a c0       	rjmp	.+84     	; 0x1138 <vfprintf+0x10c>
    10e4:	f3 2d       	mov	r31, r3
    10e6:	f8 60       	ori	r31, 0x08	; 8
    10e8:	1d c0       	rjmp	.+58     	; 0x1124 <vfprintf+0xf8>
    10ea:	37 fc       	sbrc	r3, 7
    10ec:	2d c0       	rjmp	.+90     	; 0x1148 <vfprintf+0x11c>
    10ee:	20 ed       	ldi	r18, 0xD0	; 208
    10f0:	28 0f       	add	r18, r24
    10f2:	2a 30       	cpi	r18, 0x0A	; 10
    10f4:	40 f0       	brcs	.+16     	; 0x1106 <vfprintf+0xda>
    10f6:	8e 32       	cpi	r24, 0x2E	; 46
    10f8:	b9 f4       	brne	.+46     	; 0x1128 <vfprintf+0xfc>
    10fa:	36 fc       	sbrc	r3, 6
    10fc:	75 c1       	rjmp	.+746    	; 0x13e8 <vfprintf+0x3bc>
    10fe:	23 2d       	mov	r18, r3
    1100:	20 64       	ori	r18, 0x40	; 64
    1102:	32 2e       	mov	r3, r18
    1104:	19 c0       	rjmp	.+50     	; 0x1138 <vfprintf+0x10c>
    1106:	36 fe       	sbrs	r3, 6
    1108:	06 c0       	rjmp	.+12     	; 0x1116 <vfprintf+0xea>
    110a:	8a e0       	ldi	r24, 0x0A	; 10
    110c:	98 9e       	mul	r9, r24
    110e:	20 0d       	add	r18, r0
    1110:	11 24       	eor	r1, r1
    1112:	92 2e       	mov	r9, r18
    1114:	11 c0       	rjmp	.+34     	; 0x1138 <vfprintf+0x10c>
    1116:	ea e0       	ldi	r30, 0x0A	; 10
    1118:	2e 9e       	mul	r2, r30
    111a:	20 0d       	add	r18, r0
    111c:	11 24       	eor	r1, r1
    111e:	22 2e       	mov	r2, r18
    1120:	f3 2d       	mov	r31, r3
    1122:	f0 62       	ori	r31, 0x20	; 32
    1124:	3f 2e       	mov	r3, r31
    1126:	08 c0       	rjmp	.+16     	; 0x1138 <vfprintf+0x10c>
    1128:	8c 36       	cpi	r24, 0x6C	; 108
    112a:	21 f4       	brne	.+8      	; 0x1134 <vfprintf+0x108>
    112c:	83 2d       	mov	r24, r3
    112e:	80 68       	ori	r24, 0x80	; 128
    1130:	38 2e       	mov	r3, r24
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <vfprintf+0x10c>
    1134:	88 36       	cpi	r24, 0x68	; 104
    1136:	41 f4       	brne	.+16     	; 0x1148 <vfprintf+0x11c>
    1138:	f7 01       	movw	r30, r14
    113a:	93 fd       	sbrc	r25, 3
    113c:	85 91       	lpm	r24, Z+
    113e:	93 ff       	sbrs	r25, 3
    1140:	81 91       	ld	r24, Z+
    1142:	7f 01       	movw	r14, r30
    1144:	81 11       	cpse	r24, r1
    1146:	b3 cf       	rjmp	.-154    	; 0x10ae <vfprintf+0x82>
    1148:	98 2f       	mov	r25, r24
    114a:	9f 7d       	andi	r25, 0xDF	; 223
    114c:	95 54       	subi	r25, 0x45	; 69
    114e:	93 30       	cpi	r25, 0x03	; 3
    1150:	28 f4       	brcc	.+10     	; 0x115c <vfprintf+0x130>
    1152:	0c 5f       	subi	r16, 0xFC	; 252
    1154:	1f 4f       	sbci	r17, 0xFF	; 255
    1156:	9f e3       	ldi	r25, 0x3F	; 63
    1158:	99 83       	std	Y+1, r25	; 0x01
    115a:	0d c0       	rjmp	.+26     	; 0x1176 <vfprintf+0x14a>
    115c:	83 36       	cpi	r24, 0x63	; 99
    115e:	31 f0       	breq	.+12     	; 0x116c <vfprintf+0x140>
    1160:	83 37       	cpi	r24, 0x73	; 115
    1162:	71 f0       	breq	.+28     	; 0x1180 <vfprintf+0x154>
    1164:	83 35       	cpi	r24, 0x53	; 83
    1166:	09 f0       	breq	.+2      	; 0x116a <vfprintf+0x13e>
    1168:	55 c0       	rjmp	.+170    	; 0x1214 <vfprintf+0x1e8>
    116a:	20 c0       	rjmp	.+64     	; 0x11ac <vfprintf+0x180>
    116c:	f8 01       	movw	r30, r16
    116e:	80 81       	ld	r24, Z
    1170:	89 83       	std	Y+1, r24	; 0x01
    1172:	0e 5f       	subi	r16, 0xFE	; 254
    1174:	1f 4f       	sbci	r17, 0xFF	; 255
    1176:	88 24       	eor	r8, r8
    1178:	83 94       	inc	r8
    117a:	91 2c       	mov	r9, r1
    117c:	53 01       	movw	r10, r6
    117e:	12 c0       	rjmp	.+36     	; 0x11a4 <vfprintf+0x178>
    1180:	28 01       	movw	r4, r16
    1182:	f2 e0       	ldi	r31, 0x02	; 2
    1184:	4f 0e       	add	r4, r31
    1186:	51 1c       	adc	r5, r1
    1188:	f8 01       	movw	r30, r16
    118a:	a0 80       	ld	r10, Z
    118c:	b1 80       	ldd	r11, Z+1	; 0x01
    118e:	36 fe       	sbrs	r3, 6
    1190:	03 c0       	rjmp	.+6      	; 0x1198 <vfprintf+0x16c>
    1192:	69 2d       	mov	r22, r9
    1194:	70 e0       	ldi	r23, 0x00	; 0
    1196:	02 c0       	rjmp	.+4      	; 0x119c <vfprintf+0x170>
    1198:	6f ef       	ldi	r22, 0xFF	; 255
    119a:	7f ef       	ldi	r23, 0xFF	; 255
    119c:	c5 01       	movw	r24, r10
    119e:	4e d1       	rcall	.+668    	; 0x143c <strnlen>
    11a0:	4c 01       	movw	r8, r24
    11a2:	82 01       	movw	r16, r4
    11a4:	f3 2d       	mov	r31, r3
    11a6:	ff 77       	andi	r31, 0x7F	; 127
    11a8:	3f 2e       	mov	r3, r31
    11aa:	15 c0       	rjmp	.+42     	; 0x11d6 <vfprintf+0x1aa>
    11ac:	28 01       	movw	r4, r16
    11ae:	22 e0       	ldi	r18, 0x02	; 2
    11b0:	42 0e       	add	r4, r18
    11b2:	51 1c       	adc	r5, r1
    11b4:	f8 01       	movw	r30, r16
    11b6:	a0 80       	ld	r10, Z
    11b8:	b1 80       	ldd	r11, Z+1	; 0x01
    11ba:	36 fe       	sbrs	r3, 6
    11bc:	03 c0       	rjmp	.+6      	; 0x11c4 <vfprintf+0x198>
    11be:	69 2d       	mov	r22, r9
    11c0:	70 e0       	ldi	r23, 0x00	; 0
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <vfprintf+0x19c>
    11c4:	6f ef       	ldi	r22, 0xFF	; 255
    11c6:	7f ef       	ldi	r23, 0xFF	; 255
    11c8:	c5 01       	movw	r24, r10
    11ca:	2d d1       	rcall	.+602    	; 0x1426 <strnlen_P>
    11cc:	4c 01       	movw	r8, r24
    11ce:	f3 2d       	mov	r31, r3
    11d0:	f0 68       	ori	r31, 0x80	; 128
    11d2:	3f 2e       	mov	r3, r31
    11d4:	82 01       	movw	r16, r4
    11d6:	33 fc       	sbrc	r3, 3
    11d8:	19 c0       	rjmp	.+50     	; 0x120c <vfprintf+0x1e0>
    11da:	82 2d       	mov	r24, r2
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	88 16       	cp	r8, r24
    11e0:	99 06       	cpc	r9, r25
    11e2:	a0 f4       	brcc	.+40     	; 0x120c <vfprintf+0x1e0>
    11e4:	b6 01       	movw	r22, r12
    11e6:	80 e2       	ldi	r24, 0x20	; 32
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	33 d1       	rcall	.+614    	; 0x1452 <fputc>
    11ec:	2a 94       	dec	r2
    11ee:	f5 cf       	rjmp	.-22     	; 0x11da <vfprintf+0x1ae>
    11f0:	f5 01       	movw	r30, r10
    11f2:	37 fc       	sbrc	r3, 7
    11f4:	85 91       	lpm	r24, Z+
    11f6:	37 fe       	sbrs	r3, 7
    11f8:	81 91       	ld	r24, Z+
    11fa:	5f 01       	movw	r10, r30
    11fc:	b6 01       	movw	r22, r12
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	28 d1       	rcall	.+592    	; 0x1452 <fputc>
    1202:	21 10       	cpse	r2, r1
    1204:	2a 94       	dec	r2
    1206:	21 e0       	ldi	r18, 0x01	; 1
    1208:	82 1a       	sub	r8, r18
    120a:	91 08       	sbc	r9, r1
    120c:	81 14       	cp	r8, r1
    120e:	91 04       	cpc	r9, r1
    1210:	79 f7       	brne	.-34     	; 0x11f0 <vfprintf+0x1c4>
    1212:	e1 c0       	rjmp	.+450    	; 0x13d6 <vfprintf+0x3aa>
    1214:	84 36       	cpi	r24, 0x64	; 100
    1216:	11 f0       	breq	.+4      	; 0x121c <vfprintf+0x1f0>
    1218:	89 36       	cpi	r24, 0x69	; 105
    121a:	39 f5       	brne	.+78     	; 0x126a <vfprintf+0x23e>
    121c:	f8 01       	movw	r30, r16
    121e:	37 fe       	sbrs	r3, 7
    1220:	07 c0       	rjmp	.+14     	; 0x1230 <vfprintf+0x204>
    1222:	60 81       	ld	r22, Z
    1224:	71 81       	ldd	r23, Z+1	; 0x01
    1226:	82 81       	ldd	r24, Z+2	; 0x02
    1228:	93 81       	ldd	r25, Z+3	; 0x03
    122a:	0c 5f       	subi	r16, 0xFC	; 252
    122c:	1f 4f       	sbci	r17, 0xFF	; 255
    122e:	08 c0       	rjmp	.+16     	; 0x1240 <vfprintf+0x214>
    1230:	60 81       	ld	r22, Z
    1232:	71 81       	ldd	r23, Z+1	; 0x01
    1234:	07 2e       	mov	r0, r23
    1236:	00 0c       	add	r0, r0
    1238:	88 0b       	sbc	r24, r24
    123a:	99 0b       	sbc	r25, r25
    123c:	0e 5f       	subi	r16, 0xFE	; 254
    123e:	1f 4f       	sbci	r17, 0xFF	; 255
    1240:	f3 2d       	mov	r31, r3
    1242:	ff 76       	andi	r31, 0x6F	; 111
    1244:	3f 2e       	mov	r3, r31
    1246:	97 ff       	sbrs	r25, 7
    1248:	09 c0       	rjmp	.+18     	; 0x125c <vfprintf+0x230>
    124a:	90 95       	com	r25
    124c:	80 95       	com	r24
    124e:	70 95       	com	r23
    1250:	61 95       	neg	r22
    1252:	7f 4f       	sbci	r23, 0xFF	; 255
    1254:	8f 4f       	sbci	r24, 0xFF	; 255
    1256:	9f 4f       	sbci	r25, 0xFF	; 255
    1258:	f0 68       	ori	r31, 0x80	; 128
    125a:	3f 2e       	mov	r3, r31
    125c:	2a e0       	ldi	r18, 0x0A	; 10
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	a3 01       	movw	r20, r6
    1262:	33 d1       	rcall	.+614    	; 0x14ca <__ultoa_invert>
    1264:	88 2e       	mov	r8, r24
    1266:	86 18       	sub	r8, r6
    1268:	44 c0       	rjmp	.+136    	; 0x12f2 <vfprintf+0x2c6>
    126a:	85 37       	cpi	r24, 0x75	; 117
    126c:	31 f4       	brne	.+12     	; 0x127a <vfprintf+0x24e>
    126e:	23 2d       	mov	r18, r3
    1270:	2f 7e       	andi	r18, 0xEF	; 239
    1272:	b2 2e       	mov	r11, r18
    1274:	2a e0       	ldi	r18, 0x0A	; 10
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	25 c0       	rjmp	.+74     	; 0x12c4 <vfprintf+0x298>
    127a:	93 2d       	mov	r25, r3
    127c:	99 7f       	andi	r25, 0xF9	; 249
    127e:	b9 2e       	mov	r11, r25
    1280:	8f 36       	cpi	r24, 0x6F	; 111
    1282:	c1 f0       	breq	.+48     	; 0x12b4 <vfprintf+0x288>
    1284:	18 f4       	brcc	.+6      	; 0x128c <vfprintf+0x260>
    1286:	88 35       	cpi	r24, 0x58	; 88
    1288:	79 f0       	breq	.+30     	; 0x12a8 <vfprintf+0x27c>
    128a:	ae c0       	rjmp	.+348    	; 0x13e8 <vfprintf+0x3bc>
    128c:	80 37       	cpi	r24, 0x70	; 112
    128e:	19 f0       	breq	.+6      	; 0x1296 <vfprintf+0x26a>
    1290:	88 37       	cpi	r24, 0x78	; 120
    1292:	21 f0       	breq	.+8      	; 0x129c <vfprintf+0x270>
    1294:	a9 c0       	rjmp	.+338    	; 0x13e8 <vfprintf+0x3bc>
    1296:	e9 2f       	mov	r30, r25
    1298:	e0 61       	ori	r30, 0x10	; 16
    129a:	be 2e       	mov	r11, r30
    129c:	b4 fe       	sbrs	r11, 4
    129e:	0d c0       	rjmp	.+26     	; 0x12ba <vfprintf+0x28e>
    12a0:	fb 2d       	mov	r31, r11
    12a2:	f4 60       	ori	r31, 0x04	; 4
    12a4:	bf 2e       	mov	r11, r31
    12a6:	09 c0       	rjmp	.+18     	; 0x12ba <vfprintf+0x28e>
    12a8:	34 fe       	sbrs	r3, 4
    12aa:	0a c0       	rjmp	.+20     	; 0x12c0 <vfprintf+0x294>
    12ac:	29 2f       	mov	r18, r25
    12ae:	26 60       	ori	r18, 0x06	; 6
    12b0:	b2 2e       	mov	r11, r18
    12b2:	06 c0       	rjmp	.+12     	; 0x12c0 <vfprintf+0x294>
    12b4:	28 e0       	ldi	r18, 0x08	; 8
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	05 c0       	rjmp	.+10     	; 0x12c4 <vfprintf+0x298>
    12ba:	20 e1       	ldi	r18, 0x10	; 16
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <vfprintf+0x298>
    12c0:	20 e1       	ldi	r18, 0x10	; 16
    12c2:	32 e0       	ldi	r19, 0x02	; 2
    12c4:	f8 01       	movw	r30, r16
    12c6:	b7 fe       	sbrs	r11, 7
    12c8:	07 c0       	rjmp	.+14     	; 0x12d8 <vfprintf+0x2ac>
    12ca:	60 81       	ld	r22, Z
    12cc:	71 81       	ldd	r23, Z+1	; 0x01
    12ce:	82 81       	ldd	r24, Z+2	; 0x02
    12d0:	93 81       	ldd	r25, Z+3	; 0x03
    12d2:	0c 5f       	subi	r16, 0xFC	; 252
    12d4:	1f 4f       	sbci	r17, 0xFF	; 255
    12d6:	06 c0       	rjmp	.+12     	; 0x12e4 <vfprintf+0x2b8>
    12d8:	60 81       	ld	r22, Z
    12da:	71 81       	ldd	r23, Z+1	; 0x01
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	0e 5f       	subi	r16, 0xFE	; 254
    12e2:	1f 4f       	sbci	r17, 0xFF	; 255
    12e4:	a3 01       	movw	r20, r6
    12e6:	f1 d0       	rcall	.+482    	; 0x14ca <__ultoa_invert>
    12e8:	88 2e       	mov	r8, r24
    12ea:	86 18       	sub	r8, r6
    12ec:	fb 2d       	mov	r31, r11
    12ee:	ff 77       	andi	r31, 0x7F	; 127
    12f0:	3f 2e       	mov	r3, r31
    12f2:	36 fe       	sbrs	r3, 6
    12f4:	0d c0       	rjmp	.+26     	; 0x1310 <vfprintf+0x2e4>
    12f6:	23 2d       	mov	r18, r3
    12f8:	2e 7f       	andi	r18, 0xFE	; 254
    12fa:	a2 2e       	mov	r10, r18
    12fc:	89 14       	cp	r8, r9
    12fe:	58 f4       	brcc	.+22     	; 0x1316 <vfprintf+0x2ea>
    1300:	34 fe       	sbrs	r3, 4
    1302:	0b c0       	rjmp	.+22     	; 0x131a <vfprintf+0x2ee>
    1304:	32 fc       	sbrc	r3, 2
    1306:	09 c0       	rjmp	.+18     	; 0x131a <vfprintf+0x2ee>
    1308:	83 2d       	mov	r24, r3
    130a:	8e 7e       	andi	r24, 0xEE	; 238
    130c:	a8 2e       	mov	r10, r24
    130e:	05 c0       	rjmp	.+10     	; 0x131a <vfprintf+0x2ee>
    1310:	b8 2c       	mov	r11, r8
    1312:	a3 2c       	mov	r10, r3
    1314:	03 c0       	rjmp	.+6      	; 0x131c <vfprintf+0x2f0>
    1316:	b8 2c       	mov	r11, r8
    1318:	01 c0       	rjmp	.+2      	; 0x131c <vfprintf+0x2f0>
    131a:	b9 2c       	mov	r11, r9
    131c:	a4 fe       	sbrs	r10, 4
    131e:	0f c0       	rjmp	.+30     	; 0x133e <vfprintf+0x312>
    1320:	fe 01       	movw	r30, r28
    1322:	e8 0d       	add	r30, r8
    1324:	f1 1d       	adc	r31, r1
    1326:	80 81       	ld	r24, Z
    1328:	80 33       	cpi	r24, 0x30	; 48
    132a:	21 f4       	brne	.+8      	; 0x1334 <vfprintf+0x308>
    132c:	9a 2d       	mov	r25, r10
    132e:	99 7e       	andi	r25, 0xE9	; 233
    1330:	a9 2e       	mov	r10, r25
    1332:	09 c0       	rjmp	.+18     	; 0x1346 <vfprintf+0x31a>
    1334:	a2 fe       	sbrs	r10, 2
    1336:	06 c0       	rjmp	.+12     	; 0x1344 <vfprintf+0x318>
    1338:	b3 94       	inc	r11
    133a:	b3 94       	inc	r11
    133c:	04 c0       	rjmp	.+8      	; 0x1346 <vfprintf+0x31a>
    133e:	8a 2d       	mov	r24, r10
    1340:	86 78       	andi	r24, 0x86	; 134
    1342:	09 f0       	breq	.+2      	; 0x1346 <vfprintf+0x31a>
    1344:	b3 94       	inc	r11
    1346:	a3 fc       	sbrc	r10, 3
    1348:	10 c0       	rjmp	.+32     	; 0x136a <vfprintf+0x33e>
    134a:	a0 fe       	sbrs	r10, 0
    134c:	06 c0       	rjmp	.+12     	; 0x135a <vfprintf+0x32e>
    134e:	b2 14       	cp	r11, r2
    1350:	80 f4       	brcc	.+32     	; 0x1372 <vfprintf+0x346>
    1352:	28 0c       	add	r2, r8
    1354:	92 2c       	mov	r9, r2
    1356:	9b 18       	sub	r9, r11
    1358:	0d c0       	rjmp	.+26     	; 0x1374 <vfprintf+0x348>
    135a:	b2 14       	cp	r11, r2
    135c:	58 f4       	brcc	.+22     	; 0x1374 <vfprintf+0x348>
    135e:	b6 01       	movw	r22, r12
    1360:	80 e2       	ldi	r24, 0x20	; 32
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	76 d0       	rcall	.+236    	; 0x1452 <fputc>
    1366:	b3 94       	inc	r11
    1368:	f8 cf       	rjmp	.-16     	; 0x135a <vfprintf+0x32e>
    136a:	b2 14       	cp	r11, r2
    136c:	18 f4       	brcc	.+6      	; 0x1374 <vfprintf+0x348>
    136e:	2b 18       	sub	r2, r11
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <vfprintf+0x34a>
    1372:	98 2c       	mov	r9, r8
    1374:	21 2c       	mov	r2, r1
    1376:	a4 fe       	sbrs	r10, 4
    1378:	0f c0       	rjmp	.+30     	; 0x1398 <vfprintf+0x36c>
    137a:	b6 01       	movw	r22, r12
    137c:	80 e3       	ldi	r24, 0x30	; 48
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	68 d0       	rcall	.+208    	; 0x1452 <fputc>
    1382:	a2 fe       	sbrs	r10, 2
    1384:	16 c0       	rjmp	.+44     	; 0x13b2 <vfprintf+0x386>
    1386:	a1 fc       	sbrc	r10, 1
    1388:	03 c0       	rjmp	.+6      	; 0x1390 <vfprintf+0x364>
    138a:	88 e7       	ldi	r24, 0x78	; 120
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <vfprintf+0x368>
    1390:	88 e5       	ldi	r24, 0x58	; 88
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	b6 01       	movw	r22, r12
    1396:	0c c0       	rjmp	.+24     	; 0x13b0 <vfprintf+0x384>
    1398:	8a 2d       	mov	r24, r10
    139a:	86 78       	andi	r24, 0x86	; 134
    139c:	51 f0       	breq	.+20     	; 0x13b2 <vfprintf+0x386>
    139e:	a1 fe       	sbrs	r10, 1
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <vfprintf+0x37a>
    13a2:	8b e2       	ldi	r24, 0x2B	; 43
    13a4:	01 c0       	rjmp	.+2      	; 0x13a8 <vfprintf+0x37c>
    13a6:	80 e2       	ldi	r24, 0x20	; 32
    13a8:	a7 fc       	sbrc	r10, 7
    13aa:	8d e2       	ldi	r24, 0x2D	; 45
    13ac:	b6 01       	movw	r22, r12
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	50 d0       	rcall	.+160    	; 0x1452 <fputc>
    13b2:	89 14       	cp	r8, r9
    13b4:	30 f4       	brcc	.+12     	; 0x13c2 <vfprintf+0x396>
    13b6:	b6 01       	movw	r22, r12
    13b8:	80 e3       	ldi	r24, 0x30	; 48
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	4a d0       	rcall	.+148    	; 0x1452 <fputc>
    13be:	9a 94       	dec	r9
    13c0:	f8 cf       	rjmp	.-16     	; 0x13b2 <vfprintf+0x386>
    13c2:	8a 94       	dec	r8
    13c4:	f3 01       	movw	r30, r6
    13c6:	e8 0d       	add	r30, r8
    13c8:	f1 1d       	adc	r31, r1
    13ca:	80 81       	ld	r24, Z
    13cc:	b6 01       	movw	r22, r12
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	40 d0       	rcall	.+128    	; 0x1452 <fputc>
    13d2:	81 10       	cpse	r8, r1
    13d4:	f6 cf       	rjmp	.-20     	; 0x13c2 <vfprintf+0x396>
    13d6:	22 20       	and	r2, r2
    13d8:	09 f4       	brne	.+2      	; 0x13dc <vfprintf+0x3b0>
    13da:	4e ce       	rjmp	.-868    	; 0x1078 <vfprintf+0x4c>
    13dc:	b6 01       	movw	r22, r12
    13de:	80 e2       	ldi	r24, 0x20	; 32
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	37 d0       	rcall	.+110    	; 0x1452 <fputc>
    13e4:	2a 94       	dec	r2
    13e6:	f7 cf       	rjmp	.-18     	; 0x13d6 <vfprintf+0x3aa>
    13e8:	f6 01       	movw	r30, r12
    13ea:	86 81       	ldd	r24, Z+6	; 0x06
    13ec:	97 81       	ldd	r25, Z+7	; 0x07
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <vfprintf+0x3c8>
    13f0:	8f ef       	ldi	r24, 0xFF	; 255
    13f2:	9f ef       	ldi	r25, 0xFF	; 255
    13f4:	2b 96       	adiw	r28, 0x0b	; 11
    13f6:	0f b6       	in	r0, 0x3f	; 63
    13f8:	f8 94       	cli
    13fa:	de bf       	out	0x3e, r29	; 62
    13fc:	0f be       	out	0x3f, r0	; 63
    13fe:	cd bf       	out	0x3d, r28	; 61
    1400:	df 91       	pop	r29
    1402:	cf 91       	pop	r28
    1404:	1f 91       	pop	r17
    1406:	0f 91       	pop	r16
    1408:	ff 90       	pop	r15
    140a:	ef 90       	pop	r14
    140c:	df 90       	pop	r13
    140e:	cf 90       	pop	r12
    1410:	bf 90       	pop	r11
    1412:	af 90       	pop	r10
    1414:	9f 90       	pop	r9
    1416:	8f 90       	pop	r8
    1418:	7f 90       	pop	r7
    141a:	6f 90       	pop	r6
    141c:	5f 90       	pop	r5
    141e:	4f 90       	pop	r4
    1420:	3f 90       	pop	r3
    1422:	2f 90       	pop	r2
    1424:	08 95       	ret

00001426 <strnlen_P>:
    1426:	fc 01       	movw	r30, r24
    1428:	05 90       	lpm	r0, Z+
    142a:	61 50       	subi	r22, 0x01	; 1
    142c:	70 40       	sbci	r23, 0x00	; 0
    142e:	01 10       	cpse	r0, r1
    1430:	d8 f7       	brcc	.-10     	; 0x1428 <strnlen_P+0x2>
    1432:	80 95       	com	r24
    1434:	90 95       	com	r25
    1436:	8e 0f       	add	r24, r30
    1438:	9f 1f       	adc	r25, r31
    143a:	08 95       	ret

0000143c <strnlen>:
    143c:	fc 01       	movw	r30, r24
    143e:	61 50       	subi	r22, 0x01	; 1
    1440:	70 40       	sbci	r23, 0x00	; 0
    1442:	01 90       	ld	r0, Z+
    1444:	01 10       	cpse	r0, r1
    1446:	d8 f7       	brcc	.-10     	; 0x143e <strnlen+0x2>
    1448:	80 95       	com	r24
    144a:	90 95       	com	r25
    144c:	8e 0f       	add	r24, r30
    144e:	9f 1f       	adc	r25, r31
    1450:	08 95       	ret

00001452 <fputc>:
    1452:	0f 93       	push	r16
    1454:	1f 93       	push	r17
    1456:	cf 93       	push	r28
    1458:	df 93       	push	r29
    145a:	fb 01       	movw	r30, r22
    145c:	23 81       	ldd	r18, Z+3	; 0x03
    145e:	21 fd       	sbrc	r18, 1
    1460:	03 c0       	rjmp	.+6      	; 0x1468 <fputc+0x16>
    1462:	8f ef       	ldi	r24, 0xFF	; 255
    1464:	9f ef       	ldi	r25, 0xFF	; 255
    1466:	2c c0       	rjmp	.+88     	; 0x14c0 <fputc+0x6e>
    1468:	22 ff       	sbrs	r18, 2
    146a:	16 c0       	rjmp	.+44     	; 0x1498 <fputc+0x46>
    146c:	46 81       	ldd	r20, Z+6	; 0x06
    146e:	57 81       	ldd	r21, Z+7	; 0x07
    1470:	24 81       	ldd	r18, Z+4	; 0x04
    1472:	35 81       	ldd	r19, Z+5	; 0x05
    1474:	42 17       	cp	r20, r18
    1476:	53 07       	cpc	r21, r19
    1478:	44 f4       	brge	.+16     	; 0x148a <fputc+0x38>
    147a:	a0 81       	ld	r26, Z
    147c:	b1 81       	ldd	r27, Z+1	; 0x01
    147e:	9d 01       	movw	r18, r26
    1480:	2f 5f       	subi	r18, 0xFF	; 255
    1482:	3f 4f       	sbci	r19, 0xFF	; 255
    1484:	31 83       	std	Z+1, r19	; 0x01
    1486:	20 83       	st	Z, r18
    1488:	8c 93       	st	X, r24
    148a:	26 81       	ldd	r18, Z+6	; 0x06
    148c:	37 81       	ldd	r19, Z+7	; 0x07
    148e:	2f 5f       	subi	r18, 0xFF	; 255
    1490:	3f 4f       	sbci	r19, 0xFF	; 255
    1492:	37 83       	std	Z+7, r19	; 0x07
    1494:	26 83       	std	Z+6, r18	; 0x06
    1496:	14 c0       	rjmp	.+40     	; 0x14c0 <fputc+0x6e>
    1498:	8b 01       	movw	r16, r22
    149a:	ec 01       	movw	r28, r24
    149c:	fb 01       	movw	r30, r22
    149e:	00 84       	ldd	r0, Z+8	; 0x08
    14a0:	f1 85       	ldd	r31, Z+9	; 0x09
    14a2:	e0 2d       	mov	r30, r0
    14a4:	19 95       	eicall
    14a6:	89 2b       	or	r24, r25
    14a8:	e1 f6       	brne	.-72     	; 0x1462 <fputc+0x10>
    14aa:	d8 01       	movw	r26, r16
    14ac:	16 96       	adiw	r26, 0x06	; 6
    14ae:	8d 91       	ld	r24, X+
    14b0:	9c 91       	ld	r25, X
    14b2:	17 97       	sbiw	r26, 0x07	; 7
    14b4:	01 96       	adiw	r24, 0x01	; 1
    14b6:	17 96       	adiw	r26, 0x07	; 7
    14b8:	9c 93       	st	X, r25
    14ba:	8e 93       	st	-X, r24
    14bc:	16 97       	sbiw	r26, 0x06	; 6
    14be:	ce 01       	movw	r24, r28
    14c0:	df 91       	pop	r29
    14c2:	cf 91       	pop	r28
    14c4:	1f 91       	pop	r17
    14c6:	0f 91       	pop	r16
    14c8:	08 95       	ret

000014ca <__ultoa_invert>:
    14ca:	fa 01       	movw	r30, r20
    14cc:	aa 27       	eor	r26, r26
    14ce:	28 30       	cpi	r18, 0x08	; 8
    14d0:	51 f1       	breq	.+84     	; 0x1526 <__ultoa_invert+0x5c>
    14d2:	20 31       	cpi	r18, 0x10	; 16
    14d4:	81 f1       	breq	.+96     	; 0x1536 <__ultoa_invert+0x6c>
    14d6:	e8 94       	clt
    14d8:	6f 93       	push	r22
    14da:	6e 7f       	andi	r22, 0xFE	; 254
    14dc:	6e 5f       	subi	r22, 0xFE	; 254
    14de:	7f 4f       	sbci	r23, 0xFF	; 255
    14e0:	8f 4f       	sbci	r24, 0xFF	; 255
    14e2:	9f 4f       	sbci	r25, 0xFF	; 255
    14e4:	af 4f       	sbci	r26, 0xFF	; 255
    14e6:	b1 e0       	ldi	r27, 0x01	; 1
    14e8:	3e d0       	rcall	.+124    	; 0x1566 <__ultoa_invert+0x9c>
    14ea:	b4 e0       	ldi	r27, 0x04	; 4
    14ec:	3c d0       	rcall	.+120    	; 0x1566 <__ultoa_invert+0x9c>
    14ee:	67 0f       	add	r22, r23
    14f0:	78 1f       	adc	r23, r24
    14f2:	89 1f       	adc	r24, r25
    14f4:	9a 1f       	adc	r25, r26
    14f6:	a1 1d       	adc	r26, r1
    14f8:	68 0f       	add	r22, r24
    14fa:	79 1f       	adc	r23, r25
    14fc:	8a 1f       	adc	r24, r26
    14fe:	91 1d       	adc	r25, r1
    1500:	a1 1d       	adc	r26, r1
    1502:	6a 0f       	add	r22, r26
    1504:	71 1d       	adc	r23, r1
    1506:	81 1d       	adc	r24, r1
    1508:	91 1d       	adc	r25, r1
    150a:	a1 1d       	adc	r26, r1
    150c:	20 d0       	rcall	.+64     	; 0x154e <__ultoa_invert+0x84>
    150e:	09 f4       	brne	.+2      	; 0x1512 <__ultoa_invert+0x48>
    1510:	68 94       	set
    1512:	3f 91       	pop	r19
    1514:	2a e0       	ldi	r18, 0x0A	; 10
    1516:	26 9f       	mul	r18, r22
    1518:	11 24       	eor	r1, r1
    151a:	30 19       	sub	r19, r0
    151c:	30 5d       	subi	r19, 0xD0	; 208
    151e:	31 93       	st	Z+, r19
    1520:	de f6       	brtc	.-74     	; 0x14d8 <__ultoa_invert+0xe>
    1522:	cf 01       	movw	r24, r30
    1524:	08 95       	ret
    1526:	46 2f       	mov	r20, r22
    1528:	47 70       	andi	r20, 0x07	; 7
    152a:	40 5d       	subi	r20, 0xD0	; 208
    152c:	41 93       	st	Z+, r20
    152e:	b3 e0       	ldi	r27, 0x03	; 3
    1530:	0f d0       	rcall	.+30     	; 0x1550 <__ultoa_invert+0x86>
    1532:	c9 f7       	brne	.-14     	; 0x1526 <__ultoa_invert+0x5c>
    1534:	f6 cf       	rjmp	.-20     	; 0x1522 <__ultoa_invert+0x58>
    1536:	46 2f       	mov	r20, r22
    1538:	4f 70       	andi	r20, 0x0F	; 15
    153a:	40 5d       	subi	r20, 0xD0	; 208
    153c:	4a 33       	cpi	r20, 0x3A	; 58
    153e:	18 f0       	brcs	.+6      	; 0x1546 <__ultoa_invert+0x7c>
    1540:	49 5d       	subi	r20, 0xD9	; 217
    1542:	31 fd       	sbrc	r19, 1
    1544:	40 52       	subi	r20, 0x20	; 32
    1546:	41 93       	st	Z+, r20
    1548:	02 d0       	rcall	.+4      	; 0x154e <__ultoa_invert+0x84>
    154a:	a9 f7       	brne	.-22     	; 0x1536 <__ultoa_invert+0x6c>
    154c:	ea cf       	rjmp	.-44     	; 0x1522 <__ultoa_invert+0x58>
    154e:	b4 e0       	ldi	r27, 0x04	; 4
    1550:	a6 95       	lsr	r26
    1552:	97 95       	ror	r25
    1554:	87 95       	ror	r24
    1556:	77 95       	ror	r23
    1558:	67 95       	ror	r22
    155a:	ba 95       	dec	r27
    155c:	c9 f7       	brne	.-14     	; 0x1550 <__ultoa_invert+0x86>
    155e:	00 97       	sbiw	r24, 0x00	; 0
    1560:	61 05       	cpc	r22, r1
    1562:	71 05       	cpc	r23, r1
    1564:	08 95       	ret
    1566:	9b 01       	movw	r18, r22
    1568:	ac 01       	movw	r20, r24
    156a:	0a 2e       	mov	r0, r26
    156c:	06 94       	lsr	r0
    156e:	57 95       	ror	r21
    1570:	47 95       	ror	r20
    1572:	37 95       	ror	r19
    1574:	27 95       	ror	r18
    1576:	ba 95       	dec	r27
    1578:	c9 f7       	brne	.-14     	; 0x156c <__ultoa_invert+0xa2>
    157a:	62 0f       	add	r22, r18
    157c:	73 1f       	adc	r23, r19
    157e:	84 1f       	adc	r24, r20
    1580:	95 1f       	adc	r25, r21
    1582:	a0 1d       	adc	r26, r0
    1584:	08 95       	ret

00001586 <_exit>:
    1586:	f8 94       	cli

00001588 <__stop_program>:
    1588:	ff cf       	rjmp	.-2      	; 0x1588 <__stop_program>
