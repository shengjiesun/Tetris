
ST7796_TFT_Development.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000006ac  00800200  00001dca  00001e5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001dca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000029c  008008ac  008008ac  0000250a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000250a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002568  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b0  00000000  00000000  000025a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004b00  00000000  00000000  00002858  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000019b2  00000000  00000000  00007358  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001d6b  00000000  00000000  00008d0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bb8  00000000  00000000  0000aa78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001195  00000000  00000000  0000b630  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003bfd  00000000  00000000  0000c7c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000398  00000000  00000000  000103c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	84 c0       	rjmp	.+264    	; 0x166 <__vector_23>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	8f c5       	rjmp	.+2846   	; 0xb84 <__vector_25>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	18 e0       	ldi	r17, 0x08	; 8
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ea ec       	ldi	r30, 0xCA	; 202
      fc:	fd e1       	ldi	r31, 0x1D	; 29
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ac 3a       	cpi	r26, 0xAC	; 172
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	2b e0       	ldi	r18, 0x0B	; 11
     110:	ac ea       	ldi	r26, 0xAC	; 172
     112:	b8 e0       	ldi	r27, 0x08	; 8
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a8 34       	cpi	r26, 0x48	; 72
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	74 d5       	rcall	.+2792   	; 0xc08 <main>
     120:	0c 94 e3 0e 	jmp	0x1dc6	; 0x1dc6 <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <timer0_init>:
	bit 2 = 0
	
	WGM01 = 0     "Normal" timer/counter mode
	WGM00 = 0
	*/
	TCCR0A = 0b00000000;
     126:	14 bc       	out	0x24, r1	; 36
	
	CS02 = 0
	CS01 = 1      clock / 64 = 250kHz -> /256 -> 1024us per overflow
	CS00 = 1
	*/
	TCCR0B = 0b00000011;
     128:	83 e0       	ldi	r24, 0x03	; 3
     12a:	85 bd       	out	0x25, r24	; 37
	bit 3 = 0
	OCIE0B = 0    don't enable Timer/Counter 0 Output Compare Match B Interrupt
	OCIE0A = 0    don't enable Timer/Counter 0 Output Compare Match A Interrupt Enable
	TOIE0 = 1     enable Timer/Counter 0 Overflow Interrupt
	*/
	TIMSK0 = 0b00000001;
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
	TCNT0 = 0;
     132:	16 bc       	out	0x26, r1	; 38
     134:	08 95       	ret

00000136 <Backlight_Init>:
	
}

void Backlight_Init(void)
{
  timer0_init();
     136:	f7 cf       	rjmp	.-18     	; 0x126 <timer0_init>
     138:	08 95       	ret

0000013a <SetBackLightDuty>:
}

void SetBackLightDuty(uint8_t dutyCycle)
{
  DDRB |= (1<<PB7);  //set pin as output
     13a:	27 9a       	sbi	0x04, 7	; 4
  TCCR0A |= (1<<COM0A1); //enable output compare on PD6, clear OC0A on compare, set OC0A at BOTTOM
     13c:	94 b5       	in	r25, 0x24	; 36
     13e:	90 68       	ori	r25, 0x80	; 128
     140:	94 bd       	out	0x24, r25	; 36
  TCCR0A |= (1<<WGM01) | (1<<WGM00); //Fast PWM mode
     142:	94 b5       	in	r25, 0x24	; 36
     144:	93 60       	ori	r25, 0x03	; 3
     146:	94 bd       	out	0x24, r25	; 36
  
  if (dutyCycle > 100) OCR0A = 0xff;    //upper 8bit PWM boundary
     148:	85 36       	cpi	r24, 0x65	; 101
     14a:	18 f0       	brcs	.+6      	; 0x152 <SetBackLightDuty+0x18>
     14c:	8f ef       	ldi	r24, 0xFF	; 255
     14e:	87 bd       	out	0x27, r24	; 39
     150:	08 95       	ret
  else if(dutyCycle < 0) OCR0A = 0x00;  //lower PWM boundary
  else if ((dutyCycle <= 100) && (dutyCycle >= 0)) OCR0A = dutyCycle * 255 / 100; //duty cycle percentage converted to 8 bit
     152:	2f ef       	ldi	r18, 0xFF	; 255
     154:	82 9f       	mul	r24, r18
     156:	c0 01       	movw	r24, r0
     158:	11 24       	eor	r1, r1
     15a:	64 e6       	ldi	r22, 0x64	; 100
     15c:	70 e0       	ldi	r23, 0x00	; 0
     15e:	0e 94 2f 0b 	call	0x165e	; 0x165e <__divmodhi4>
     162:	67 bd       	out	0x27, r22	; 39
     164:	08 95       	ret

00000166 <__vector_23>:

/************************************************************************/
/* Private function definitions                                         */
/************************************************************************/
ISR (TIMER0_OVF_vect)
{
     166:	1f 92       	push	r1
     168:	0f 92       	push	r0
     16a:	0f b6       	in	r0, 0x3f	; 63
     16c:	0f 92       	push	r0
     16e:	11 24       	eor	r1, r1
     170:	2f 93       	push	r18
     172:	3f 93       	push	r19
     174:	8f 93       	push	r24
     176:	9f 93       	push	r25
     178:	af 93       	push	r26
     17a:	bf 93       	push	r27
  unsigned long m = milli_second;
     17c:	80 91 e7 0a 	lds	r24, 0x0AE7	; 0x800ae7 <milli_second>
     180:	90 91 e8 0a 	lds	r25, 0x0AE8	; 0x800ae8 <milli_second+0x1>
     184:	a0 91 e9 0a 	lds	r26, 0x0AE9	; 0x800ae9 <milli_second+0x2>
     188:	b0 91 ea 0a 	lds	r27, 0x0AEA	; 0x800aea <milli_second+0x3>
  unsigned char f = milli_fraction;
     18c:	30 91 e6 0a 	lds	r19, 0x0AE6	; 0x800ae6 <milli_fraction>
  m += MILLIS_INC;
  f += FRACT_INC;
     190:	23 e0       	ldi	r18, 0x03	; 3
     192:	23 0f       	add	r18, r19
  if (f >= FRACT_MAX) {
     194:	2d 37       	cpi	r18, 0x7D	; 125
     196:	20 f4       	brcc	.+8      	; 0x1a0 <__vector_23+0x3a>
/************************************************************************/
ISR (TIMER0_OVF_vect)
{
  unsigned long m = milli_second;
  unsigned char f = milli_fraction;
  m += MILLIS_INC;
     198:	01 96       	adiw	r24, 0x01	; 1
     19a:	a1 1d       	adc	r26, r1
     19c:	b1 1d       	adc	r27, r1
     19e:	05 c0       	rjmp	.+10     	; 0x1aa <__vector_23+0x44>
  f += FRACT_INC;
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
     1a0:	26 e8       	ldi	r18, 0x86	; 134
     1a2:	23 0f       	add	r18, r19
    m +=1;
     1a4:	02 96       	adiw	r24, 0x02	; 2
     1a6:	a1 1d       	adc	r26, r1
     1a8:	b1 1d       	adc	r27, r1
  }
  milli_second = m;
     1aa:	80 93 e7 0a 	sts	0x0AE7, r24	; 0x800ae7 <milli_second>
     1ae:	90 93 e8 0a 	sts	0x0AE8, r25	; 0x800ae8 <milli_second+0x1>
     1b2:	a0 93 e9 0a 	sts	0x0AE9, r26	; 0x800ae9 <milli_second+0x2>
     1b6:	b0 93 ea 0a 	sts	0x0AEA, r27	; 0x800aea <milli_second+0x3>
  milli_fraction = f;
     1ba:	20 93 e6 0a 	sts	0x0AE6, r18	; 0x800ae6 <milli_fraction>
  timer0_counts++;
     1be:	80 91 e2 0a 	lds	r24, 0x0AE2	; 0x800ae2 <timer0_counts>
     1c2:	90 91 e3 0a 	lds	r25, 0x0AE3	; 0x800ae3 <timer0_counts+0x1>
     1c6:	a0 91 e4 0a 	lds	r26, 0x0AE4	; 0x800ae4 <timer0_counts+0x2>
     1ca:	b0 91 e5 0a 	lds	r27, 0x0AE5	; 0x800ae5 <timer0_counts+0x3>
     1ce:	01 96       	adiw	r24, 0x01	; 1
     1d0:	a1 1d       	adc	r26, r1
     1d2:	b1 1d       	adc	r27, r1
     1d4:	80 93 e2 0a 	sts	0x0AE2, r24	; 0x800ae2 <timer0_counts>
     1d8:	90 93 e3 0a 	sts	0x0AE3, r25	; 0x800ae3 <timer0_counts+0x1>
     1dc:	a0 93 e4 0a 	sts	0x0AE4, r26	; 0x800ae4 <timer0_counts+0x2>
     1e0:	b0 93 e5 0a 	sts	0x0AE5, r27	; 0x800ae5 <timer0_counts+0x3>
     1e4:	bf 91       	pop	r27
     1e6:	af 91       	pop	r26
     1e8:	9f 91       	pop	r25
     1ea:	8f 91       	pop	r24
     1ec:	3f 91       	pop	r19
     1ee:	2f 91       	pop	r18
     1f0:	0f 90       	pop	r0
     1f2:	0f be       	out	0x3f, r0	; 63
     1f4:	0f 90       	pop	r0
     1f6:	1f 90       	pop	r1
     1f8:	18 95       	reti

000001fa <pDDRV_Button_init>:
static __Button_Status button;

void pDDRV_Button_init(void)
{

  DDRF &= ~((1<<PF0) | (1<<PF1) | (1<<PF2) | (1<<PF3) | (1<<PF4));
     1fa:	80 b3       	in	r24, 0x10	; 16
     1fc:	80 7e       	andi	r24, 0xE0	; 224
     1fe:	80 bb       	out	0x10, r24	; 16
  PORTF |= ((1<<PF0) | (1<<PF1) | (1<<PF2) | (1<<PF3) | (1<<PF4));
     200:	81 b3       	in	r24, 0x11	; 17
     202:	8f 61       	ori	r24, 0x1F	; 31
     204:	81 bb       	out	0x11, r24	; 17
  mButtonStatusNew = BUTTON_UNPRESSED;
     206:	81 e0       	ldi	r24, 0x01	; 1
     208:	80 93 ac 08 	sts	0x08AC, r24	; 0x8008ac <__data_end>
     20c:	08 95       	ret

0000020e <pDDRV_Button_readButton>:
}

uint8_t pDDRV_Button_readButton(__ButtonTypeDef buttonNum)
{
  switch (buttonNum)
     20e:	82 30       	cpi	r24, 0x02	; 2
     210:	91 f0       	breq	.+36     	; 0x236 <pDDRV_Button_readButton+0x28>
     212:	28 f4       	brcc	.+10     	; 0x21e <pDDRV_Button_readButton+0x10>
     214:	88 23       	and	r24, r24
     216:	41 f0       	breq	.+16     	; 0x228 <pDDRV_Button_readButton+0x1a>
     218:	81 30       	cpi	r24, 0x01	; 1
     21a:	49 f0       	breq	.+18     	; 0x22e <pDDRV_Button_readButton+0x20>
     21c:	1a c0       	rjmp	.+52     	; 0x252 <pDDRV_Button_readButton+0x44>
     21e:	83 30       	cpi	r24, 0x03	; 3
     220:	79 f0       	breq	.+30     	; 0x240 <pDDRV_Button_readButton+0x32>
     222:	84 30       	cpi	r24, 0x04	; 4
     224:	91 f0       	breq	.+36     	; 0x24a <pDDRV_Button_readButton+0x3c>
     226:	15 c0       	rjmp	.+42     	; 0x252 <pDDRV_Button_readButton+0x44>
  {
    case BUTTON_UP:
      if (PINF & (1<<PF0)) return 1;
     228:	8f b1       	in	r24, 0x0f	; 15
     22a:	81 70       	andi	r24, 0x01	; 1
     22c:	08 95       	ret
      else return 0;
      break;
    case BUTTON_LEFT:
      if (PINF & (1<<PF1)) return 1;
     22e:	8f b1       	in	r24, 0x0f	; 15
uint8_t pDDRV_Button_readButton(__ButtonTypeDef buttonNum)
{
  switch (buttonNum)
  {
    case BUTTON_UP:
      if (PINF & (1<<PF0)) return 1;
     230:	86 95       	lsr	r24
     232:	81 70       	andi	r24, 0x01	; 1
     234:	08 95       	ret
    case BUTTON_LEFT:
      if (PINF & (1<<PF1)) return 1;
      else return 0;
      break;
    case BUTTON_DOWN:
      if (PINF & (1<<PF2)) return 1;
     236:	8f b1       	in	r24, 0x0f	; 15
uint8_t pDDRV_Button_readButton(__ButtonTypeDef buttonNum)
{
  switch (buttonNum)
  {
    case BUTTON_UP:
      if (PINF & (1<<PF0)) return 1;
     238:	82 fb       	bst	r24, 2
     23a:	88 27       	eor	r24, r24
     23c:	80 f9       	bld	r24, 0
     23e:	08 95       	ret
    case BUTTON_DOWN:
      if (PINF & (1<<PF2)) return 1;
      else return 0;
      break;
    case BUTTON_RIGHT:
      if (PINF & (1<<PF3)) return 1;
     240:	8f b1       	in	r24, 0x0f	; 15
uint8_t pDDRV_Button_readButton(__ButtonTypeDef buttonNum)
{
  switch (buttonNum)
  {
    case BUTTON_UP:
      if (PINF & (1<<PF0)) return 1;
     242:	83 fb       	bst	r24, 3
     244:	88 27       	eor	r24, r24
     246:	80 f9       	bld	r24, 0
     248:	08 95       	ret
    case BUTTON_RIGHT:
      if (PINF & (1<<PF3)) return 1;
      else return 0;
      break;
    case BUTTON_ROTATE:
      if (PINF & (1<<PF4)) return 1;
     24a:	8f b1       	in	r24, 0x0f	; 15
uint8_t pDDRV_Button_readButton(__ButtonTypeDef buttonNum)
{
  switch (buttonNum)
  {
    case BUTTON_UP:
      if (PINF & (1<<PF0)) return 1;
     24c:	82 95       	swap	r24
     24e:	81 70       	andi	r24, 0x01	; 1
     250:	08 95       	ret
      else return 0;
      break;
    default:
      break;
  }
  return 2;
     252:	82 e0       	ldi	r24, 0x02	; 2
}
     254:	08 95       	ret

00000256 <pDDRV_Button_GetStatus>:

__Button_Status pDDRV_Button_GetStatus(void)
{
     256:	7f 92       	push	r7
     258:	8f 92       	push	r8
     25a:	9f 92       	push	r9
     25c:	af 92       	push	r10
     25e:	bf 92       	push	r11
     260:	cf 92       	push	r12
     262:	df 92       	push	r13
     264:	ef 92       	push	r14
     266:	ff 92       	push	r15
     268:	0f 93       	push	r16
     26a:	1f 93       	push	r17
     26c:	cf 93       	push	r28
     26e:	df 93       	push	r29
     270:	00 d0       	rcall	.+0      	; 0x272 <pDDRV_Button_GetStatus+0x1c>
     272:	1f 92       	push	r1
     274:	1f 92       	push	r1
     276:	cd b7       	in	r28, 0x3d	; 61
     278:	de b7       	in	r29, 0x3e	; 62
      outputButtonStatus = BUTTON_PRESSED;
      mButtonStatusOld[NumBut] = mButtonStatusNew;
    } 
    else
    {
      outputButtonStatus = BUTTON_UNPRESSED;
     27a:	dd 24       	eor	r13, r13
     27c:	d3 94       	inc	r13
    {
      mButtonStatusNew = BUTTON_PRESSED;
    }
    else
    {
      mButtonStatusNew = BUTTON_UNPRESSED;
     27e:	cc 24       	eor	r12, r12
     280:	c3 94       	inc	r12
     282:	47 c0       	rjmp	.+142    	; 0x312 <pDDRV_Button_GetStatus+0xbc>
  {
    mButtonStatusCount = 0;
    //Check button status several times in a roll
    for (int i = 0; i < BUTTON_READ_NUM; i++)
    {
      if (pDDRV_Button_readButton(NumBut) == 0)
     284:	8f 2d       	mov	r24, r15
     286:	c3 df       	rcall	.-122    	; 0x20e <pDDRV_Button_readButton>
     288:	81 11       	cpse	r24, r1
     28a:	01 c0       	rjmp	.+2      	; 0x28e <pDDRV_Button_GetStatus+0x38>
      {
        mButtonStatusCount++;
     28c:	e3 94       	inc	r14
     28e:	01 50       	subi	r16, 0x01	; 1
     290:	11 09       	sbc	r17, r1
  uint8_t mButtonStatusCount = 0;
  for (uint8_t NumBut = 0; NumBut < BUTTON_NUM; NumBut++)
  {
    mButtonStatusCount = 0;
    //Check button status several times in a roll
    for (int i = 0; i < BUTTON_READ_NUM; i++)
     292:	c1 f7       	brne	.-16     	; 0x284 <pDDRV_Button_GetStatus+0x2e>
        mButtonStatusCount++;
      }
    }

    //If button is low for all attempted reads, then it is pressed
    if (mButtonStatusCount >= BUTTON_READ_NUM)
     294:	84 e0       	ldi	r24, 0x04	; 4
     296:	8e 15       	cp	r24, r14
     298:	60 f4       	brcc	.+24     	; 0x2b2 <pDDRV_Button_GetStatus+0x5c>
    {
      mButtonStatusNew = BUTTON_PRESSED;
     29a:	10 92 ac 08 	sts	0x08AC, r1	; 0x8008ac <__data_end>
      mButtonStatusNew = BUTTON_UNPRESSED;
      mButtonStatusOld[NumBut] = BUTTON_UNPRESSED;
    }

    //If the new button status is pressed then output status is pressed
    if ((mButtonStatusNew == BUTTON_PRESSED) && (mButtonStatusNew != mButtonStatusOld[NumBut] ))
     29e:	8f 2d       	mov	r24, r15
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	fc 01       	movw	r30, r24
     2a4:	ec 5f       	subi	r30, 0xFC	; 252
     2a6:	fd 4f       	sbci	r31, 0xFD	; 253
     2a8:	20 81       	ld	r18, Z
     2aa:	21 11       	cpse	r18, r1
     2ac:	0c c0       	rjmp	.+24     	; 0x2c6 <pDDRV_Button_GetStatus+0x70>
      outputButtonStatus = BUTTON_PRESSED;
      mButtonStatusOld[NumBut] = mButtonStatusNew;
    } 
    else
    {
      outputButtonStatus = BUTTON_UNPRESSED;
     2ae:	8c 2d       	mov	r24, r12
     2b0:	10 c0       	rjmp	.+32     	; 0x2d2 <pDDRV_Button_GetStatus+0x7c>
    {
      mButtonStatusNew = BUTTON_PRESSED;
    }
    else
    {
      mButtonStatusNew = BUTTON_UNPRESSED;
     2b2:	c0 92 ac 08 	sts	0x08AC, r12	; 0x8008ac <__data_end>
      mButtonStatusOld[NumBut] = BUTTON_UNPRESSED;
     2b6:	ef 2d       	mov	r30, r15
     2b8:	f0 e0       	ldi	r31, 0x00	; 0
     2ba:	ec 5f       	subi	r30, 0xFC	; 252
     2bc:	fd 4f       	sbci	r31, 0xFD	; 253
     2be:	c0 82       	st	Z, r12
    }

    //If the new button status is pressed then output status is pressed
    if ((mButtonStatusNew == BUTTON_PRESSED) && (mButtonStatusNew != mButtonStatusOld[NumBut] ))
     2c0:	2c 2d       	mov	r18, r12
      outputButtonStatus = BUTTON_PRESSED;
      mButtonStatusOld[NumBut] = mButtonStatusNew;
    } 
    else
    {
      outputButtonStatus = BUTTON_UNPRESSED;
     2c2:	8c 2d       	mov	r24, r12
     2c4:	06 c0       	rjmp	.+12     	; 0x2d2 <pDDRV_Button_GetStatus+0x7c>

    //If the new button status is pressed then output status is pressed
    if ((mButtonStatusNew == BUTTON_PRESSED) && (mButtonStatusNew != mButtonStatusOld[NumBut] ))
    {
      outputButtonStatus = BUTTON_PRESSED;
      mButtonStatusOld[NumBut] = mButtonStatusNew;
     2c6:	fc 01       	movw	r30, r24
     2c8:	ec 5f       	subi	r30, 0xFC	; 252
     2ca:	fd 4f       	sbci	r31, 0xFD	; 253
     2cc:	10 82       	st	Z, r1
      mButtonStatusNew = BUTTON_UNPRESSED;
      mButtonStatusOld[NumBut] = BUTTON_UNPRESSED;
    }

    //If the new button status is pressed then output status is pressed
    if ((mButtonStatusNew == BUTTON_PRESSED) && (mButtonStatusNew != mButtonStatusOld[NumBut] ))
     2ce:	20 e0       	ldi	r18, 0x00	; 0
    {
      outputButtonStatus = BUTTON_PRESSED;
     2d0:	80 e0       	ldi	r24, 0x00	; 0
    else
    {
      outputButtonStatus = BUTTON_UNPRESSED;
    }

    switch (NumBut)
     2d2:	92 e0       	ldi	r25, 0x02	; 2
     2d4:	f9 16       	cp	r15, r25
     2d6:	99 f0       	breq	.+38     	; 0x2fe <pDDRV_Button_GetStatus+0xa8>
     2d8:	9f 15       	cp	r25, r15
     2da:	30 f0       	brcs	.+12     	; 0x2e8 <pDDRV_Button_GetStatus+0x92>
     2dc:	ff 20       	and	r15, r15
     2de:	59 f0       	breq	.+22     	; 0x2f6 <pDDRV_Button_GetStatus+0xa0>
     2e0:	91 e0       	ldi	r25, 0x01	; 1
     2e2:	f9 16       	cp	r15, r25
     2e4:	51 f0       	breq	.+20     	; 0x2fa <pDDRV_Button_GetStatus+0xa4>
     2e6:	11 c0       	rjmp	.+34     	; 0x30a <pDDRV_Button_GetStatus+0xb4>
     2e8:	93 e0       	ldi	r25, 0x03	; 3
     2ea:	f9 16       	cp	r15, r25
     2ec:	51 f0       	breq	.+20     	; 0x302 <pDDRV_Button_GetStatus+0xac>
     2ee:	94 e0       	ldi	r25, 0x04	; 4
     2f0:	f9 16       	cp	r15, r25
     2f2:	49 f0       	breq	.+18     	; 0x306 <pDDRV_Button_GetStatus+0xb0>
     2f4:	0a c0       	rjmp	.+20     	; 0x30a <pDDRV_Button_GetStatus+0xb4>
    {
      case BUTTON_UP:
        ButtonStatus.up = outputButtonStatus;
     2f6:	78 2e       	mov	r7, r24
        break;
     2f8:	0b c0       	rjmp	.+22     	; 0x310 <pDDRV_Button_GetStatus+0xba>
      case BUTTON_LEFT:
        ButtonStatus.left = outputButtonStatus;
     2fa:	88 2e       	mov	r8, r24
        break;
     2fc:	09 c0       	rjmp	.+18     	; 0x310 <pDDRV_Button_GetStatus+0xba>
      case BUTTON_DOWN:
        ButtonStatus.down = mButtonStatusNew;
     2fe:	92 2e       	mov	r9, r18
        break;
     300:	07 c0       	rjmp	.+14     	; 0x310 <pDDRV_Button_GetStatus+0xba>
      case BUTTON_RIGHT:
        ButtonStatus.right = outputButtonStatus;
     302:	a8 2e       	mov	r10, r24
        break;
     304:	05 c0       	rjmp	.+10     	; 0x310 <pDDRV_Button_GetStatus+0xba>
      case BUTTON_ROTATE:
        ButtonStatus.rotate = outputButtonStatus;
     306:	b8 2e       	mov	r11, r24
     308:	0b c0       	rjmp	.+22     	; 0x320 <pDDRV_Button_GetStatus+0xca>
{
  __Button_Status ButtonStatus;

  bool outputButtonStatus = 2;
  uint8_t mButtonStatusCount = 0;
  for (uint8_t NumBut = 0; NumBut < BUTTON_NUM; NumBut++)
     30a:	84 e0       	ldi	r24, 0x04	; 4
     30c:	8d 15       	cp	r24, r13
     30e:	40 f0       	brcs	.+16     	; 0x320 <pDDRV_Button_GetStatus+0xca>
     310:	d3 94       	inc	r13
     312:	ff 24       	eor	r15, r15
     314:	fa 94       	dec	r15
     316:	fd 0c       	add	r15, r13
  }
  return 2;
}

__Button_Status pDDRV_Button_GetStatus(void)
{
     318:	05 e0       	ldi	r16, 0x05	; 5
     31a:	10 e0       	ldi	r17, 0x00	; 0
     31c:	e1 2c       	mov	r14, r1
     31e:	b2 cf       	rjmp	.-156    	; 0x284 <pDDRV_Button_GetStatus+0x2e>
        break;
    }
  }

  return ButtonStatus;
     320:	27 2d       	mov	r18, r7
     322:	38 2d       	mov	r19, r8
     324:	49 2d       	mov	r20, r9
     326:	5a 2d       	mov	r21, r10
     328:	6b 2d       	mov	r22, r11
     32a:	70 e0       	ldi	r23, 0x00	; 0
     32c:	80 e0       	ldi	r24, 0x00	; 0
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	0f 90       	pop	r0
     332:	0f 90       	pop	r0
     334:	0f 90       	pop	r0
     336:	0f 90       	pop	r0
     338:	0f 90       	pop	r0
     33a:	df 91       	pop	r29
     33c:	cf 91       	pop	r28
     33e:	1f 91       	pop	r17
     340:	0f 91       	pop	r16
     342:	ff 90       	pop	r15
     344:	ef 90       	pop	r14
     346:	df 90       	pop	r13
     348:	cf 90       	pop	r12
     34a:	bf 90       	pop	r11
     34c:	af 90       	pop	r10
     34e:	9f 90       	pop	r9
     350:	8f 90       	pop	r8
     352:	7f 90       	pop	r7
     354:	08 95       	ret

00000356 <LCD_WR_DATA>:
  LCD_CS_SET;
}

static void LCD_WR_DATA(uint8_t data)
{
  LCD_CS_CLR;
     356:	28 98       	cbi	0x05, 0	; 5
  LCD_RS_SET;
     358:	75 9a       	sbi	0x0e, 5	; 14
  SPI_Master_transmit(data);
     35a:	f8 d3       	rcall	.+2032   	; 0xb4c <SPI_Master_transmit>
  LCD_CS_SET;
     35c:	28 9a       	sbi	0x05, 0	; 5
     35e:	08 95       	ret

00000360 <LCD_WR_REG>:
/************************************************************************/
/* Private function definitions                                         */
/************************************************************************/
static void LCD_WR_REG(uint8_t data)
{
  LCD_CS_CLR;
     360:	28 98       	cbi	0x05, 0	; 5
  LCD_RS_CLR;
     362:	75 98       	cbi	0x0e, 5	; 14
  SPI_Master_transmit(data);
     364:	f3 d3       	rcall	.+2022   	; 0xb4c <SPI_Master_transmit>
  LCD_CS_SET;
     366:	28 9a       	sbi	0x05, 0	; 5
     368:	08 95       	ret

0000036a <LCD_RESET>:
  LCD_CS_SET;
}

void LCD_RESET(void)
{
  LCD_RST_CLR;
     36a:	74 98       	cbi	0x0e, 4	; 14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     36c:	2f ef       	ldi	r18, 0xFF	; 255
     36e:	81 ee       	ldi	r24, 0xE1	; 225
     370:	94 e0       	ldi	r25, 0x04	; 4
     372:	21 50       	subi	r18, 0x01	; 1
     374:	80 40       	sbci	r24, 0x00	; 0
     376:	90 40       	sbci	r25, 0x00	; 0
     378:	e1 f7       	brne	.-8      	; 0x372 <LCD_RESET+0x8>
     37a:	00 c0       	rjmp	.+0      	; 0x37c <LCD_RESET+0x12>
     37c:	00 00       	nop
  _delay_ms(100);
  LCD_RST_SET;
     37e:	74 9a       	sbi	0x0e, 4	; 14
     380:	2f ef       	ldi	r18, 0xFF	; 255
     382:	80 e7       	ldi	r24, 0x70	; 112
     384:	92 e0       	ldi	r25, 0x02	; 2
     386:	21 50       	subi	r18, 0x01	; 1
     388:	80 40       	sbci	r24, 0x00	; 0
     38a:	90 40       	sbci	r25, 0x00	; 0
     38c:	e1 f7       	brne	.-8      	; 0x386 <LCD_RESET+0x1c>
     38e:	00 c0       	rjmp	.+0      	; 0x390 <LCD_RESET+0x26>
     390:	00 00       	nop
     392:	08 95       	ret

00000394 <LCD_SetWindows>:
  _delay_ms(50);
}

void LCD_SetWindows(uint16_t xStar, uint16_t yStar, uint16_t xEnd, uint16_t yEnd)
{
     394:	af 92       	push	r10
     396:	bf 92       	push	r11
     398:	cf 92       	push	r12
     39a:	df 92       	push	r13
     39c:	ef 92       	push	r14
     39e:	ff 92       	push	r15
     3a0:	0f 93       	push	r16
     3a2:	1f 93       	push	r17
     3a4:	cf 93       	push	r28
     3a6:	df 93       	push	r29
     3a8:	b8 2e       	mov	r11, r24
     3aa:	a9 2e       	mov	r10, r25
     3ac:	f6 2e       	mov	r15, r22
     3ae:	e7 2e       	mov	r14, r23
     3b0:	d4 2e       	mov	r13, r20
     3b2:	c5 2e       	mov	r12, r21
     3b4:	12 2f       	mov	r17, r18
     3b6:	03 2f       	mov	r16, r19
  LCD_WR_REG(lcddev.setxcmd);
     3b8:	cb ee       	ldi	r28, 0xEB	; 235
     3ba:	da e0       	ldi	r29, 0x0A	; 10
     3bc:	89 85       	ldd	r24, Y+9	; 0x09
     3be:	d0 df       	rcall	.-96     	; 0x360 <LCD_WR_REG>
  LCD_WR_DATA(xStar >> 8);
     3c0:	8a 2d       	mov	r24, r10
     3c2:	c9 df       	rcall	.-110    	; 0x356 <LCD_WR_DATA>
  LCD_WR_DATA(0x00FF & xStar);
     3c4:	8b 2d       	mov	r24, r11
     3c6:	c7 df       	rcall	.-114    	; 0x356 <LCD_WR_DATA>
  LCD_WR_DATA(xEnd >> 8);
     3c8:	8c 2d       	mov	r24, r12
     3ca:	c5 df       	rcall	.-118    	; 0x356 <LCD_WR_DATA>
  LCD_WR_DATA(0x00FF & xEnd);
     3cc:	8d 2d       	mov	r24, r13
     3ce:	c3 df       	rcall	.-122    	; 0x356 <LCD_WR_DATA>

  LCD_WR_REG(lcddev.setycmd);
     3d0:	8b 85       	ldd	r24, Y+11	; 0x0b
     3d2:	c6 df       	rcall	.-116    	; 0x360 <LCD_WR_REG>
  LCD_WR_DATA(yStar >> 8);
     3d4:	8e 2d       	mov	r24, r14
     3d6:	bf df       	rcall	.-130    	; 0x356 <LCD_WR_DATA>
  LCD_WR_DATA(0x00FF & yStar);
     3d8:	8f 2d       	mov	r24, r15
     3da:	bd df       	rcall	.-134    	; 0x356 <LCD_WR_DATA>
  LCD_WR_DATA(yEnd >> 8);
     3dc:	80 2f       	mov	r24, r16
     3de:	bb df       	rcall	.-138    	; 0x356 <LCD_WR_DATA>
     3e0:	81 2f       	mov	r24, r17
  LCD_WR_DATA(0x00FF & yEnd);
     3e2:	b9 df       	rcall	.-142    	; 0x356 <LCD_WR_DATA>
     3e4:	8f 81       	ldd	r24, Y+7	; 0x07
     3e6:	bc df       	rcall	.-136    	; 0x360 <LCD_WR_REG>
  LCD_WR_DATA(LCD_RegValue);
}

static void LCD_WriteRAM_Prepare(void)
{
  LCD_WR_REG(lcddev.wramcmd);
     3e8:	df 91       	pop	r29
     3ea:	cf 91       	pop	r28
     3ec:	1f 91       	pop	r17
  LCD_WR_DATA(0x00FF & yStar);
  LCD_WR_DATA(yEnd >> 8);
  LCD_WR_DATA(0x00FF & yEnd);

  LCD_WriteRAM_Prepare();
}
     3ee:	0f 91       	pop	r16
     3f0:	ff 90       	pop	r15
     3f2:	ef 90       	pop	r14
     3f4:	df 90       	pop	r13
     3f6:	cf 90       	pop	r12
     3f8:	bf 90       	pop	r11
     3fa:	af 90       	pop	r10
     3fc:	08 95       	ret

000003fe <LCD_SetCursor>:
     3fe:	9b 01       	movw	r18, r22
     400:	ac 01       	movw	r20, r24
     402:	c8 cf       	rjmp	.-112    	; 0x394 <LCD_SetWindows>

void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
  LCD_SetWindows(Xpos,Ypos,Xpos,Ypos);
     404:	08 95       	ret

00000406 <LCD_direction>:
}

void LCD_direction(LCD_Rotation_t direction)
{
  lcddev.setxcmd=0x2A;
     406:	eb ee       	ldi	r30, 0xEB	; 235
     408:	fa e0       	ldi	r31, 0x0A	; 10
     40a:	2a e2       	ldi	r18, 0x2A	; 42
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	32 87       	std	Z+10, r19	; 0x0a
     410:	21 87       	std	Z+9, r18	; 0x09
  lcddev.setycmd=0x2B;
     412:	2b e2       	ldi	r18, 0x2B	; 43
     414:	30 e0       	ldi	r19, 0x00	; 0
     416:	34 87       	std	Z+12, r19	; 0x0c
     418:	23 87       	std	Z+11, r18	; 0x0b
  lcddev.wramcmd=0x2C;
     41a:	2c e2       	ldi	r18, 0x2C	; 44
     41c:	30 e0       	ldi	r19, 0x00	; 0
     41e:	30 87       	std	Z+8, r19	; 0x08
     420:	27 83       	std	Z+7, r18	; 0x07
  switch(direction)
     422:	81 30       	cpi	r24, 0x01	; 1
     424:	a9 f0       	breq	.+42     	; 0x450 <LCD_direction+0x4a>
     426:	28 f0       	brcs	.+10     	; 0x432 <LCD_direction+0x2c>
     428:	82 30       	cpi	r24, 0x02	; 2
     42a:	09 f1       	breq	.+66     	; 0x46e <LCD_direction+0x68>
     42c:	83 30       	cpi	r24, 0x03	; 3
     42e:	71 f1       	breq	.+92     	; 0x48c <LCD_direction+0x86>
     430:	08 95       	ret
  {
    case LCD_ROTATE_0:
      lcddev.width=LCD_W;
     432:	eb ee       	ldi	r30, 0xEB	; 235
     434:	fa e0       	ldi	r31, 0x0A	; 10
     436:	80 e4       	ldi	r24, 0x40	; 64
     438:	91 e0       	ldi	r25, 0x01	; 1
     43a:	91 83       	std	Z+1, r25	; 0x01
     43c:	80 83       	st	Z, r24
      lcddev.height=LCD_H;
     43e:	80 ee       	ldi	r24, 0xE0	; 224
     440:	91 e0       	ldi	r25, 0x01	; 1
     442:	93 83       	std	Z+3, r25	; 0x03
     444:	82 83       	std	Z+2, r24	; 0x02
  LCD_CS_SET;
}

static void LCD_WriteReg(uint8_t LCD_Reg, uint8_t LCD_RegValue)
{
  LCD_WR_REG(LCD_Reg);
     446:	86 e3       	ldi	r24, 0x36	; 54
     448:	8b df       	rcall	.-234    	; 0x360 <LCD_WR_REG>
  LCD_WR_DATA(LCD_RegValue);
     44a:	88 e4       	ldi	r24, 0x48	; 72
     44c:	84 cf       	rjmp	.-248    	; 0x356 <LCD_WR_DATA>
     44e:	08 95       	ret
      lcddev.width=LCD_W;
      lcddev.height=LCD_H;
      LCD_WriteReg(0x36,(1<<3)|(1<<6));
      break;
    case LCD_ROTATE_90:
      lcddev.width=LCD_H;
     450:	eb ee       	ldi	r30, 0xEB	; 235
     452:	fa e0       	ldi	r31, 0x0A	; 10
     454:	80 ee       	ldi	r24, 0xE0	; 224
     456:	91 e0       	ldi	r25, 0x01	; 1
     458:	91 83       	std	Z+1, r25	; 0x01
     45a:	80 83       	st	Z, r24
      lcddev.height=LCD_W;
     45c:	80 e4       	ldi	r24, 0x40	; 64
     45e:	91 e0       	ldi	r25, 0x01	; 1
     460:	93 83       	std	Z+3, r25	; 0x03
  LCD_CS_SET;
}

static void LCD_WriteReg(uint8_t LCD_Reg, uint8_t LCD_RegValue)
{
  LCD_WR_REG(LCD_Reg);
     462:	82 83       	std	Z+2, r24	; 0x02
     464:	86 e3       	ldi	r24, 0x36	; 54
  LCD_WR_DATA(LCD_RegValue);
     466:	7c df       	rcall	.-264    	; 0x360 <LCD_WR_REG>
     468:	88 e2       	ldi	r24, 0x28	; 40
     46a:	75 cf       	rjmp	.-278    	; 0x356 <LCD_WR_DATA>
     46c:	08 95       	ret
      lcddev.width=LCD_H;
      lcddev.height=LCD_W;
      LCD_WriteReg(0x36,(1<<3)|(1<<5));
      break;
    case LCD_ROTATE_180:
      lcddev.width=LCD_W;
     46e:	eb ee       	ldi	r30, 0xEB	; 235
     470:	fa e0       	ldi	r31, 0x0A	; 10
     472:	80 e4       	ldi	r24, 0x40	; 64
     474:	91 e0       	ldi	r25, 0x01	; 1
     476:	91 83       	std	Z+1, r25	; 0x01
     478:	80 83       	st	Z, r24
      lcddev.height=LCD_H;
     47a:	80 ee       	ldi	r24, 0xE0	; 224
     47c:	91 e0       	ldi	r25, 0x01	; 1
     47e:	93 83       	std	Z+3, r25	; 0x03
  LCD_CS_SET;
}

static void LCD_WriteReg(uint8_t LCD_Reg, uint8_t LCD_RegValue)
{
  LCD_WR_REG(LCD_Reg);
     480:	82 83       	std	Z+2, r24	; 0x02
     482:	86 e3       	ldi	r24, 0x36	; 54
     484:	6d df       	rcall	.-294    	; 0x360 <LCD_WR_REG>
  LCD_WR_DATA(LCD_RegValue);
     486:	88 e8       	ldi	r24, 0x88	; 136
     488:	66 cf       	rjmp	.-308    	; 0x356 <LCD_WR_DATA>
     48a:	08 95       	ret
     48c:	eb ee       	ldi	r30, 0xEB	; 235
      lcddev.width=LCD_W;
      lcddev.height=LCD_H;
      LCD_WriteReg(0x36,(1<<3)|(1<<7));
      break;
    case LCD_ROTATE_270:
      lcddev.width=LCD_H;
     48e:	fa e0       	ldi	r31, 0x0A	; 10
     490:	80 ee       	ldi	r24, 0xE0	; 224
     492:	91 e0       	ldi	r25, 0x01	; 1
     494:	91 83       	std	Z+1, r25	; 0x01
     496:	80 83       	st	Z, r24
      lcddev.height=LCD_W;
     498:	80 e4       	ldi	r24, 0x40	; 64
     49a:	91 e0       	ldi	r25, 0x01	; 1
     49c:	93 83       	std	Z+3, r25	; 0x03
  LCD_CS_SET;
}

static void LCD_WriteReg(uint8_t LCD_Reg, uint8_t LCD_RegValue)
{
  LCD_WR_REG(LCD_Reg);
     49e:	82 83       	std	Z+2, r24	; 0x02
     4a0:	86 e3       	ldi	r24, 0x36	; 54
     4a2:	5e df       	rcall	.-324    	; 0x360 <LCD_WR_REG>
  LCD_WR_DATA(LCD_RegValue);
     4a4:	88 ee       	ldi	r24, 0xE8	; 232
     4a6:	57 cf       	rjmp	.-338    	; 0x356 <LCD_WR_DATA>
     4a8:	08 95       	ret

000004aa <LCD_SetBackLight>:
     4aa:	47 ce       	rjmp	.-882    	; 0x13a <SetBackLightDuty>
  LCD_WriteData_16Bit(colour);
}

void LCD_SetBackLight(uint8_t duty)
{
  SetBackLightDuty(duty);
     4ac:	08 95       	ret

000004ae <LCD_WriteData_16Bit>:
}

void LCD_WriteData_16Bit(uint16_t Data)
{
     4ae:	cf 93       	push	r28
     4b0:	c8 2f       	mov	r28, r24
  LCD_CS_CLR;
     4b2:	28 98       	cbi	0x05, 0	; 5
  LCD_RS_SET;
     4b4:	75 9a       	sbi	0x0e, 5	; 14
  SPI_Master_transmit(Data>>8);
     4b6:	89 2f       	mov	r24, r25
     4b8:	49 d3       	rcall	.+1682   	; 0xb4c <SPI_Master_transmit>
  SPI_Master_transmit(Data);
     4ba:	8c 2f       	mov	r24, r28
     4bc:	47 d3       	rcall	.+1678   	; 0xb4c <SPI_Master_transmit>
  LCD_CS_SET;
     4be:	28 9a       	sbi	0x05, 0	; 5
}
     4c0:	cf 91       	pop	r28
     4c2:	08 95       	ret

000004c4 <LCD_Clear>:
  SetBackLightDuty(100);
  LCD_Clear(BLACK);
}

void LCD_Clear(uint16_t Color)
{
     4c4:	cf 92       	push	r12
     4c6:	df 92       	push	r13
     4c8:	ef 92       	push	r14
     4ca:	ff 92       	push	r15
     4cc:	0f 93       	push	r16
     4ce:	1f 93       	push	r17
     4d0:	cf 93       	push	r28
     4d2:	df 93       	push	r29
     4d4:	7c 01       	movw	r14, r24
  unsigned int i,m;
  LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);
     4d6:	cb ee       	ldi	r28, 0xEB	; 235
     4d8:	da e0       	ldi	r29, 0x0A	; 10
     4da:	2a 81       	ldd	r18, Y+2	; 0x02
     4dc:	3b 81       	ldd	r19, Y+3	; 0x03
     4de:	21 50       	subi	r18, 0x01	; 1
     4e0:	31 09       	sbc	r19, r1
     4e2:	48 81       	ld	r20, Y
     4e4:	59 81       	ldd	r21, Y+1	; 0x01
     4e6:	41 50       	subi	r20, 0x01	; 1
     4e8:	51 09       	sbc	r21, r1
     4ea:	60 e0       	ldi	r22, 0x00	; 0
     4ec:	70 e0       	ldi	r23, 0x00	; 0
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	50 df       	rcall	.-352    	; 0x394 <LCD_SetWindows>
  LCD_CS_CLR;
     4f4:	28 98       	cbi	0x05, 0	; 5
  LCD_RS_SET;
     4f6:	75 9a       	sbi	0x0e, 5	; 14
  for(i=0;i<lcddev.height;i++)
     4f8:	8a 81       	ldd	r24, Y+2	; 0x02
     4fa:	9b 81       	ldd	r25, Y+3	; 0x03
     4fc:	89 2b       	or	r24, r25
     4fe:	b1 f4       	brne	.+44     	; 0x52c <LCD_Clear+0x68>
     500:	1f c0       	rjmp	.+62     	; 0x540 <LCD_Clear+0x7c>
  {
    for(m=0;m<lcddev.width;m++)
     502:	c0 e0       	ldi	r28, 0x00	; 0
     504:	d0 e0       	ldi	r29, 0x00	; 0
    {
      LCD_WriteData_16Bit(Color);
     506:	c7 01       	movw	r24, r14
     508:	d2 df       	rcall	.-92     	; 0x4ae <LCD_WriteData_16Bit>
  LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);
  LCD_CS_CLR;
  LCD_RS_SET;
  for(i=0;i<lcddev.height;i++)
  {
    for(m=0;m<lcddev.width;m++)
     50a:	21 96       	adiw	r28, 0x01	; 1
     50c:	f8 01       	movw	r30, r16
     50e:	80 81       	ld	r24, Z
     510:	91 81       	ldd	r25, Z+1	; 0x01
     512:	c8 17       	cp	r28, r24
     514:	d9 07       	cpc	r29, r25
     516:	b8 f3       	brcs	.-18     	; 0x506 <LCD_Clear+0x42>
{
  unsigned int i,m;
  LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);
  LCD_CS_CLR;
  LCD_RS_SET;
  for(i=0;i<lcddev.height;i++)
     518:	ff ef       	ldi	r31, 0xFF	; 255
     51a:	cf 1a       	sub	r12, r31
     51c:	df 0a       	sbc	r13, r31
     51e:	f8 01       	movw	r30, r16
     520:	82 81       	ldd	r24, Z+2	; 0x02
     522:	93 81       	ldd	r25, Z+3	; 0x03
     524:	c8 16       	cp	r12, r24
     526:	d9 06       	cpc	r13, r25
     528:	28 f0       	brcs	.+10     	; 0x534 <LCD_Clear+0x70>
     52a:	0a c0       	rjmp	.+20     	; 0x540 <LCD_Clear+0x7c>
     52c:	c1 2c       	mov	r12, r1
     52e:	d1 2c       	mov	r13, r1
  {
    for(m=0;m<lcddev.width;m++)
     530:	0b ee       	ldi	r16, 0xEB	; 235
     532:	1a e0       	ldi	r17, 0x0A	; 10
     534:	f8 01       	movw	r30, r16
     536:	80 81       	ld	r24, Z
     538:	91 81       	ldd	r25, Z+1	; 0x01
     53a:	89 2b       	or	r24, r25
     53c:	11 f7       	brne	.-60     	; 0x502 <LCD_Clear+0x3e>
     53e:	ec cf       	rjmp	.-40     	; 0x518 <LCD_Clear+0x54>
    {
      LCD_WriteData_16Bit(Color);
    }
  }
  LCD_CS_SET;
     540:	28 9a       	sbi	0x05, 0	; 5
}
     542:	df 91       	pop	r29
     544:	cf 91       	pop	r28
     546:	1f 91       	pop	r17
     548:	0f 91       	pop	r16
     54a:	ff 90       	pop	r15
     54c:	ef 90       	pop	r14
     54e:	df 90       	pop	r13
     550:	cf 90       	pop	r12
     552:	08 95       	ret

00000554 <LCD_Init>:
/************************************************************************/
/* Public function definitions                                          */
/************************************************************************/
void LCD_Init(void)
{
  SPI_Master_init();
     554:	d3 d2       	rcall	.+1446   	; 0xafc <SPI_Master_init>
  LCD_WR_REG(lcddev.wramcmd);
}

void LCD_GPIOInit(void)
{
  DDR_LCD_CTRL |= ((1 << LCD_RST) | (1 << LCD_RS));
     556:	8d b1       	in	r24, 0x0d	; 13
     558:	80 63       	ori	r24, 0x30	; 48
/************************************************************************/
void LCD_Init(void)
{
  SPI_Master_init();
  LCD_GPIOInit();
  Backlight_Init();
     55a:	8d b9       	out	0x0d, r24	; 13
  LCD_RESET();
     55c:	ec dd       	rcall	.-1064   	; 0x136 <Backlight_Init>

  LCD_WR_REG(0xF0);
     55e:	05 df       	rcall	.-502    	; 0x36a <LCD_RESET>
     560:	80 ef       	ldi	r24, 0xF0	; 240
  LCD_WR_DATA(0xC3);
     562:	fe de       	rcall	.-516    	; 0x360 <LCD_WR_REG>
     564:	83 ec       	ldi	r24, 0xC3	; 195
  LCD_WR_REG(0xF0);
     566:	f7 de       	rcall	.-530    	; 0x356 <LCD_WR_DATA>
     568:	80 ef       	ldi	r24, 0xF0	; 240
  LCD_WR_DATA(0x96);
     56a:	fa de       	rcall	.-524    	; 0x360 <LCD_WR_REG>
     56c:	86 e9       	ldi	r24, 0x96	; 150
  LCD_WR_REG(0x36);
     56e:	f3 de       	rcall	.-538    	; 0x356 <LCD_WR_DATA>
     570:	86 e3       	ldi	r24, 0x36	; 54
  LCD_WR_DATA(0x68);
     572:	f6 de       	rcall	.-532    	; 0x360 <LCD_WR_REG>
     574:	88 e6       	ldi	r24, 0x68	; 104
  LCD_WR_REG(0x3A);
     576:	ef de       	rcall	.-546    	; 0x356 <LCD_WR_DATA>
     578:	8a e3       	ldi	r24, 0x3A	; 58
  LCD_WR_DATA(0x05);
     57a:	f2 de       	rcall	.-540    	; 0x360 <LCD_WR_REG>
     57c:	85 e0       	ldi	r24, 0x05	; 5
  LCD_WR_REG(0xB0);
     57e:	eb de       	rcall	.-554    	; 0x356 <LCD_WR_DATA>
     580:	80 eb       	ldi	r24, 0xB0	; 176
  LCD_WR_DATA(0x80);
     582:	ee de       	rcall	.-548    	; 0x360 <LCD_WR_REG>
     584:	80 e8       	ldi	r24, 0x80	; 128
  LCD_WR_REG(0xB6);
     586:	e7 de       	rcall	.-562    	; 0x356 <LCD_WR_DATA>
     588:	86 eb       	ldi	r24, 0xB6	; 182
  LCD_WR_DATA(0x00);
     58a:	ea de       	rcall	.-556    	; 0x360 <LCD_WR_REG>
     58c:	80 e0       	ldi	r24, 0x00	; 0
  LCD_WR_DATA(0x02);
     58e:	e3 de       	rcall	.-570    	; 0x356 <LCD_WR_DATA>
     590:	82 e0       	ldi	r24, 0x02	; 2
  LCD_WR_REG(0xB5);
     592:	e1 de       	rcall	.-574    	; 0x356 <LCD_WR_DATA>
     594:	85 eb       	ldi	r24, 0xB5	; 181
  LCD_WR_DATA(0x02);
     596:	e4 de       	rcall	.-568    	; 0x360 <LCD_WR_REG>
     598:	82 e0       	ldi	r24, 0x02	; 2
  LCD_WR_DATA(0x03);
     59a:	dd de       	rcall	.-582    	; 0x356 <LCD_WR_DATA>
     59c:	83 e0       	ldi	r24, 0x03	; 3
  LCD_WR_DATA(0x00);
     59e:	db de       	rcall	.-586    	; 0x356 <LCD_WR_DATA>
     5a0:	80 e0       	ldi	r24, 0x00	; 0
  LCD_WR_DATA(0x04);
     5a2:	d9 de       	rcall	.-590    	; 0x356 <LCD_WR_DATA>
     5a4:	84 e0       	ldi	r24, 0x04	; 4
  LCD_WR_REG(0xB1);
     5a6:	d7 de       	rcall	.-594    	; 0x356 <LCD_WR_DATA>
     5a8:	81 eb       	ldi	r24, 0xB1	; 177
  LCD_WR_DATA(0x80);
     5aa:	da de       	rcall	.-588    	; 0x360 <LCD_WR_REG>
     5ac:	80 e8       	ldi	r24, 0x80	; 128
  LCD_WR_DATA(0x10);
     5ae:	d3 de       	rcall	.-602    	; 0x356 <LCD_WR_DATA>
     5b0:	80 e1       	ldi	r24, 0x10	; 16
  LCD_WR_REG(0xB4);
     5b2:	d1 de       	rcall	.-606    	; 0x356 <LCD_WR_DATA>
     5b4:	84 eb       	ldi	r24, 0xB4	; 180
  LCD_WR_DATA(0x00);
     5b6:	d4 de       	rcall	.-600    	; 0x360 <LCD_WR_REG>
     5b8:	80 e0       	ldi	r24, 0x00	; 0
  LCD_WR_REG(0xB7);
     5ba:	cd de       	rcall	.-614    	; 0x356 <LCD_WR_DATA>
     5bc:	87 eb       	ldi	r24, 0xB7	; 183
  LCD_WR_DATA(0xC6);
     5be:	d0 de       	rcall	.-608    	; 0x360 <LCD_WR_REG>
     5c0:	86 ec       	ldi	r24, 0xC6	; 198
  LCD_WR_REG(0xC5);
     5c2:	c9 de       	rcall	.-622    	; 0x356 <LCD_WR_DATA>
     5c4:	85 ec       	ldi	r24, 0xC5	; 197
  LCD_WR_DATA(0x24);
     5c6:	cc de       	rcall	.-616    	; 0x360 <LCD_WR_REG>
     5c8:	84 e2       	ldi	r24, 0x24	; 36
  LCD_WR_REG(0xE4);
     5ca:	c5 de       	rcall	.-630    	; 0x356 <LCD_WR_DATA>
     5cc:	84 ee       	ldi	r24, 0xE4	; 228
  LCD_WR_DATA(0x31);
     5ce:	c8 de       	rcall	.-624    	; 0x360 <LCD_WR_REG>
     5d0:	81 e3       	ldi	r24, 0x31	; 49
  LCD_WR_REG(0xE8);
     5d2:	c1 de       	rcall	.-638    	; 0x356 <LCD_WR_DATA>
     5d4:	88 ee       	ldi	r24, 0xE8	; 232
  LCD_WR_DATA(0x40);
     5d6:	c4 de       	rcall	.-632    	; 0x360 <LCD_WR_REG>
     5d8:	80 e4       	ldi	r24, 0x40	; 64
  LCD_WR_DATA(0x8A);
     5da:	bd de       	rcall	.-646    	; 0x356 <LCD_WR_DATA>
     5dc:	8a e8       	ldi	r24, 0x8A	; 138
  LCD_WR_DATA(0x00);
     5de:	bb de       	rcall	.-650    	; 0x356 <LCD_WR_DATA>
     5e0:	80 e0       	ldi	r24, 0x00	; 0
  LCD_WR_DATA(0x00);
     5e2:	b9 de       	rcall	.-654    	; 0x356 <LCD_WR_DATA>
     5e4:	80 e0       	ldi	r24, 0x00	; 0
  LCD_WR_DATA(0x29);
     5e6:	b7 de       	rcall	.-658    	; 0x356 <LCD_WR_DATA>
     5e8:	89 e2       	ldi	r24, 0x29	; 41
  LCD_WR_DATA(0x19);
     5ea:	b5 de       	rcall	.-662    	; 0x356 <LCD_WR_DATA>
     5ec:	89 e1       	ldi	r24, 0x19	; 25
  LCD_WR_DATA(0xA5);
     5ee:	b3 de       	rcall	.-666    	; 0x356 <LCD_WR_DATA>
     5f0:	85 ea       	ldi	r24, 0xA5	; 165
  LCD_WR_DATA(0x33);
     5f2:	b1 de       	rcall	.-670    	; 0x356 <LCD_WR_DATA>
     5f4:	83 e3       	ldi	r24, 0x33	; 51
  LCD_WR_REG(0xC2);
     5f6:	af de       	rcall	.-674    	; 0x356 <LCD_WR_DATA>
     5f8:	82 ec       	ldi	r24, 0xC2	; 194
  LCD_WR_REG(0xA7);
     5fa:	b2 de       	rcall	.-668    	; 0x360 <LCD_WR_REG>
     5fc:	87 ea       	ldi	r24, 0xA7	; 167

  LCD_WR_REG(0xE0);
     5fe:	b0 de       	rcall	.-672    	; 0x360 <LCD_WR_REG>
     600:	80 ee       	ldi	r24, 0xE0	; 224
  LCD_WR_DATA(0xF0);
     602:	ae de       	rcall	.-676    	; 0x360 <LCD_WR_REG>
     604:	80 ef       	ldi	r24, 0xF0	; 240
  LCD_WR_DATA(0x09);
     606:	a7 de       	rcall	.-690    	; 0x356 <LCD_WR_DATA>
     608:	89 e0       	ldi	r24, 0x09	; 9
  LCD_WR_DATA(0x13);
     60a:	a5 de       	rcall	.-694    	; 0x356 <LCD_WR_DATA>
     60c:	83 e1       	ldi	r24, 0x13	; 19
  LCD_WR_DATA(0x12);
     60e:	a3 de       	rcall	.-698    	; 0x356 <LCD_WR_DATA>
     610:	82 e1       	ldi	r24, 0x12	; 18
  LCD_WR_DATA(0x12);
     612:	a1 de       	rcall	.-702    	; 0x356 <LCD_WR_DATA>
     614:	82 e1       	ldi	r24, 0x12	; 18
  LCD_WR_DATA(0x2B);
     616:	9f de       	rcall	.-706    	; 0x356 <LCD_WR_DATA>
     618:	8b e2       	ldi	r24, 0x2B	; 43
  LCD_WR_DATA(0x3C);
     61a:	9d de       	rcall	.-710    	; 0x356 <LCD_WR_DATA>
     61c:	8c e3       	ldi	r24, 0x3C	; 60
  LCD_WR_DATA(0x44);
     61e:	9b de       	rcall	.-714    	; 0x356 <LCD_WR_DATA>
     620:	84 e4       	ldi	r24, 0x44	; 68
  LCD_WR_DATA(0x4B);
     622:	99 de       	rcall	.-718    	; 0x356 <LCD_WR_DATA>
     624:	8b e4       	ldi	r24, 0x4B	; 75
  LCD_WR_DATA(0x1B);
     626:	97 de       	rcall	.-722    	; 0x356 <LCD_WR_DATA>
     628:	8b e1       	ldi	r24, 0x1B	; 27
  LCD_WR_DATA(0x18);
     62a:	95 de       	rcall	.-726    	; 0x356 <LCD_WR_DATA>
     62c:	88 e1       	ldi	r24, 0x18	; 24
  LCD_WR_DATA(0x17);
     62e:	93 de       	rcall	.-730    	; 0x356 <LCD_WR_DATA>
     630:	87 e1       	ldi	r24, 0x17	; 23
  LCD_WR_DATA(0x1D);
     632:	91 de       	rcall	.-734    	; 0x356 <LCD_WR_DATA>
     634:	8d e1       	ldi	r24, 0x1D	; 29
  LCD_WR_DATA(0x21);
     636:	8f de       	rcall	.-738    	; 0x356 <LCD_WR_DATA>
     638:	81 e2       	ldi	r24, 0x21	; 33
     63a:	8d de       	rcall	.-742    	; 0x356 <LCD_WR_DATA>

  LCD_WR_REG(0XE1);
     63c:	81 ee       	ldi	r24, 0xE1	; 225
     63e:	90 de       	rcall	.-736    	; 0x360 <LCD_WR_REG>
     640:	80 ef       	ldi	r24, 0xF0	; 240
  LCD_WR_DATA(0xF0);
     642:	89 de       	rcall	.-750    	; 0x356 <LCD_WR_DATA>
     644:	89 e0       	ldi	r24, 0x09	; 9
     646:	87 de       	rcall	.-754    	; 0x356 <LCD_WR_DATA>
  LCD_WR_DATA(0x09);
     648:	83 e1       	ldi	r24, 0x13	; 19
     64a:	85 de       	rcall	.-758    	; 0x356 <LCD_WR_DATA>
     64c:	8c e0       	ldi	r24, 0x0C	; 12
  LCD_WR_DATA(0x13);
     64e:	83 de       	rcall	.-762    	; 0x356 <LCD_WR_DATA>
     650:	8d e0       	ldi	r24, 0x0D	; 13
     652:	81 de       	rcall	.-766    	; 0x356 <LCD_WR_DATA>
  LCD_WR_DATA(0x0C);
     654:	87 e2       	ldi	r24, 0x27	; 39
     656:	7f de       	rcall	.-770    	; 0x356 <LCD_WR_DATA>
     658:	8b e3       	ldi	r24, 0x3B	; 59
  LCD_WR_DATA(0x0D);
     65a:	7d de       	rcall	.-774    	; 0x356 <LCD_WR_DATA>
     65c:	84 e4       	ldi	r24, 0x44	; 68
     65e:	7b de       	rcall	.-778    	; 0x356 <LCD_WR_DATA>
  LCD_WR_DATA(0x27);
     660:	8d e4       	ldi	r24, 0x4D	; 77
     662:	79 de       	rcall	.-782    	; 0x356 <LCD_WR_DATA>
     664:	8b e0       	ldi	r24, 0x0B	; 11
  LCD_WR_DATA(0x3B);
     666:	77 de       	rcall	.-786    	; 0x356 <LCD_WR_DATA>
     668:	87 e1       	ldi	r24, 0x17	; 23
     66a:	75 de       	rcall	.-790    	; 0x356 <LCD_WR_DATA>
  LCD_WR_DATA(0x44);
     66c:	87 e1       	ldi	r24, 0x17	; 23
     66e:	73 de       	rcall	.-794    	; 0x356 <LCD_WR_DATA>
     670:	8d e1       	ldi	r24, 0x1D	; 29
  LCD_WR_DATA(0x4D);
     672:	71 de       	rcall	.-798    	; 0x356 <LCD_WR_DATA>
     674:	81 e2       	ldi	r24, 0x21	; 33
     676:	6f de       	rcall	.-802    	; 0x356 <LCD_WR_DATA>
  LCD_WR_DATA(0x0B);
     678:	86 e3       	ldi	r24, 0x36	; 54
     67a:	72 de       	rcall	.-796    	; 0x360 <LCD_WR_REG>
     67c:	8c ee       	ldi	r24, 0xEC	; 236
  LCD_WR_DATA(0x17);
     67e:	6b de       	rcall	.-810    	; 0x356 <LCD_WR_DATA>
     680:	80 ef       	ldi	r24, 0xF0	; 240
     682:	6e de       	rcall	.-804    	; 0x360 <LCD_WR_REG>
  LCD_WR_DATA(0x17);
     684:	83 ec       	ldi	r24, 0xC3	; 195
     686:	67 de       	rcall	.-818    	; 0x356 <LCD_WR_DATA>
     688:	80 ef       	ldi	r24, 0xF0	; 240
  LCD_WR_DATA(0x1D);
     68a:	6a de       	rcall	.-812    	; 0x360 <LCD_WR_REG>
     68c:	89 e6       	ldi	r24, 0x69	; 105
     68e:	63 de       	rcall	.-826    	; 0x356 <LCD_WR_DATA>
  LCD_WR_DATA(0x21);
     690:	83 e1       	ldi	r24, 0x13	; 19
     692:	66 de       	rcall	.-820    	; 0x360 <LCD_WR_REG>
     694:	81 e1       	ldi	r24, 0x11	; 17

  LCD_WR_REG(0X36);
     696:	64 de       	rcall	.-824    	; 0x360 <LCD_WR_REG>
     698:	89 e2       	ldi	r24, 0x29	; 41
     69a:	62 de       	rcall	.-828    	; 0x360 <LCD_WR_REG>
  LCD_WR_DATA(0xEC);
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	b3 de       	rcall	.-666    	; 0x406 <LCD_direction>
     6a0:	84 e6       	ldi	r24, 0x64	; 100
  LCD_WR_REG(0xF0);
     6a2:	4b dd       	rcall	.-1386   	; 0x13a <SetBackLightDuty>
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	90 e0       	ldi	r25, 0x00	; 0
  LCD_WR_DATA(0xC3);
     6a8:	0d cf       	rjmp	.-486    	; 0x4c4 <LCD_Clear>
     6aa:	08 95       	ret

000006ac <LCD_GUI_DrawPoint>:
     6ac:	cf 93       	push	r28
  LCD_WR_REG(0xF0);
     6ae:	df 93       	push	r29
     6b0:	ea 01       	movw	r28, r20
     6b2:	a5 de       	rcall	.-694    	; 0x3fe <LCD_SetCursor>
  LCD_WR_DATA(0x69);
     6b4:	ce 01       	movw	r24, r28
     6b6:	fb de       	rcall	.-522    	; 0x4ae <LCD_WriteData_16Bit>
     6b8:	df 91       	pop	r29
  LCD_WR_REG(0X13);
     6ba:	cf 91       	pop	r28
     6bc:	08 95       	ret

000006be <LCD_GUI_Fill>:
     6be:	af 92       	push	r10
  LCD_WR_REG(0X11);
     6c0:	bf 92       	push	r11
     6c2:	cf 92       	push	r12
     6c4:	df 92       	push	r13
  LCD_WR_REG(0X29);
     6c6:	ef 92       	push	r14
     6c8:	ff 92       	push	r15
     6ca:	0f 93       	push	r16

  LCD_direction(LCD_ROTATE_0);
     6cc:	1f 93       	push	r17
     6ce:	cf 93       	push	r28
     6d0:	df 93       	push	r29
  SetBackLightDuty(100);
     6d2:	48 17       	cp	r20, r24
     6d4:	59 07       	cpc	r21, r25
     6d6:	28 f4       	brcc	.+10     	; 0x6e2 <LCD_GUI_Fill+0x24>
  LCD_Clear(BLACK);
     6d8:	f8 2f       	mov	r31, r24
     6da:	e9 2f       	mov	r30, r25
     6dc:	ca 01       	movw	r24, r20
     6de:	4f 2f       	mov	r20, r31
     6e0:	5e 2f       	mov	r21, r30
    {
      if(temp & (1<<(7-t)))LCD_WriteData_16Bit(fc);
      else LCD_WriteData_16Bit(bc);
    }
  }
}
     6e2:	26 17       	cp	r18, r22
     6e4:	37 07       	cpc	r19, r23
     6e6:	28 f4       	brcc	.+10     	; 0x6f2 <LCD_GUI_Fill+0x34>
     6e8:	f6 2f       	mov	r31, r22
     6ea:	e7 2f       	mov	r30, r23
     6ec:	b9 01       	movw	r22, r18
     6ee:	2f 2f       	mov	r18, r31
     6f0:	3e 2f       	mov	r19, r30
     6f2:	7a 01       	movw	r14, r20
     6f4:	ef ef       	ldi	r30, 0xFF	; 255
     6f6:	ee 1a       	sub	r14, r30
     6f8:	fe 0a       	sbc	r15, r30
     6fa:	e8 1a       	sub	r14, r24
     6fc:	f9 0a       	sbc	r15, r25
     6fe:	59 01       	movw	r10, r18
     700:	ef ef       	ldi	r30, 0xFF	; 255
     702:	ae 1a       	sub	r10, r30
     704:	be 0a       	sbc	r11, r30
     706:	a6 1a       	sub	r10, r22
     708:	b7 0a       	sbc	r11, r23
     70a:	44 de       	rcall	.-888    	; 0x394 <LCD_SetWindows>
     70c:	a1 14       	cp	r10, r1
     70e:	b1 04       	cpc	r11, r1
     710:	81 f4       	brne	.+32     	; 0x732 <LCD_GUI_Fill+0x74>
     712:	15 c0       	rjmp	.+42     	; 0x73e <LCD_GUI_Fill+0x80>
     714:	c0 e0       	ldi	r28, 0x00	; 0
     716:	d0 e0       	ldi	r29, 0x00	; 0
     718:	c8 01       	movw	r24, r16
     71a:	c9 de       	rcall	.-622    	; 0x4ae <LCD_WriteData_16Bit>
     71c:	21 96       	adiw	r28, 0x01	; 1
     71e:	ec 16       	cp	r14, r28
     720:	fd 06       	cpc	r15, r29
     722:	d1 f7       	brne	.-12     	; 0x718 <LCD_GUI_Fill+0x5a>
     724:	8f ef       	ldi	r24, 0xFF	; 255
     726:	c8 1a       	sub	r12, r24
     728:	d8 0a       	sbc	r13, r24
     72a:	ac 14       	cp	r10, r12
     72c:	bd 04       	cpc	r11, r13
     72e:	19 f4       	brne	.+6      	; 0x736 <LCD_GUI_Fill+0x78>
     730:	06 c0       	rjmp	.+12     	; 0x73e <LCD_GUI_Fill+0x80>
     732:	c1 2c       	mov	r12, r1
     734:	d1 2c       	mov	r13, r1
     736:	e1 14       	cp	r14, r1
     738:	f1 04       	cpc	r15, r1
     73a:	61 f7       	brne	.-40     	; 0x714 <LCD_GUI_Fill+0x56>
     73c:	f3 cf       	rjmp	.-26     	; 0x724 <LCD_GUI_Fill+0x66>
     73e:	df 91       	pop	r29
     740:	cf 91       	pop	r28
     742:	1f 91       	pop	r17
     744:	0f 91       	pop	r16
     746:	ff 90       	pop	r15
     748:	ef 90       	pop	r14
     74a:	df 90       	pop	r13
     74c:	cf 90       	pop	r12
     74e:	bf 90       	pop	r11
     750:	af 90       	pop	r10
     752:	08 95       	ret

00000754 <LCD_GUI_DrawLine>:
     754:	2f 92       	push	r2
     756:	3f 92       	push	r3
     758:	4f 92       	push	r4
     75a:	5f 92       	push	r5
     75c:	6f 92       	push	r6
     75e:	7f 92       	push	r7
     760:	8f 92       	push	r8
     762:	9f 92       	push	r9
     764:	af 92       	push	r10
     766:	bf 92       	push	r11
     768:	cf 92       	push	r12
     76a:	df 92       	push	r13
     76c:	ef 92       	push	r14
     76e:	ff 92       	push	r15
     770:	0f 93       	push	r16
     772:	1f 93       	push	r17
     774:	cf 93       	push	r28
     776:	df 93       	push	r29
     778:	cd b7       	in	r28, 0x3d	; 61
     77a:	de b7       	in	r29, 0x3e	; 62
     77c:	28 97       	sbiw	r28, 0x08	; 8
     77e:	0f b6       	in	r0, 0x3f	; 63
     780:	f8 94       	cli
     782:	de bf       	out	0x3e, r29	; 62
     784:	0f be       	out	0x3f, r0	; 63
     786:	cd bf       	out	0x3d, r28	; 61
     788:	1a 83       	std	Y+2, r17	; 0x02
     78a:	09 83       	std	Y+1, r16	; 0x01
     78c:	6a 01       	movw	r12, r20
     78e:	c8 1a       	sub	r12, r24
     790:	d9 0a       	sbc	r13, r25
     792:	39 01       	movw	r6, r18
     794:	66 1a       	sub	r6, r22
     796:	77 0a       	sbc	r7, r23
     798:	1c 01       	movw	r2, r24
     79a:	2b 01       	movw	r4, r22
     79c:	1c 14       	cp	r1, r12
     79e:	1d 04       	cpc	r1, r13
     7a0:	5c f0       	brlt	.+22     	; 0x7b8 <LCD_GUI_DrawLine+0x64>
     7a2:	c1 14       	cp	r12, r1
     7a4:	d1 04       	cpc	r13, r1
     7a6:	69 f0       	breq	.+26     	; 0x7c2 <LCD_GUI_DrawLine+0x6e>
     7a8:	d1 94       	neg	r13
     7aa:	c1 94       	neg	r12
     7ac:	d1 08       	sbc	r13, r1
     7ae:	8f ef       	ldi	r24, 0xFF	; 255
     7b0:	9f ef       	ldi	r25, 0xFF	; 255
     7b2:	9c 83       	std	Y+4, r25	; 0x04
     7b4:	8b 83       	std	Y+3, r24	; 0x03
     7b6:	07 c0       	rjmp	.+14     	; 0x7c6 <LCD_GUI_DrawLine+0x72>
     7b8:	81 e0       	ldi	r24, 0x01	; 1
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	9c 83       	std	Y+4, r25	; 0x04
     7be:	8b 83       	std	Y+3, r24	; 0x03
     7c0:	02 c0       	rjmp	.+4      	; 0x7c6 <LCD_GUI_DrawLine+0x72>
     7c2:	1c 82       	std	Y+4, r1	; 0x04
     7c4:	1b 82       	std	Y+3, r1	; 0x03
     7c6:	16 14       	cp	r1, r6
     7c8:	17 04       	cpc	r1, r7
     7ca:	5c f0       	brlt	.+22     	; 0x7e2 <LCD_GUI_DrawLine+0x8e>
     7cc:	61 14       	cp	r6, r1
     7ce:	71 04       	cpc	r7, r1
     7d0:	69 f0       	breq	.+26     	; 0x7ec <LCD_GUI_DrawLine+0x98>
     7d2:	71 94       	neg	r7
     7d4:	61 94       	neg	r6
     7d6:	71 08       	sbc	r7, r1
     7d8:	8f ef       	ldi	r24, 0xFF	; 255
     7da:	9f ef       	ldi	r25, 0xFF	; 255
     7dc:	9e 83       	std	Y+6, r25	; 0x06
     7de:	8d 83       	std	Y+5, r24	; 0x05
     7e0:	07 c0       	rjmp	.+14     	; 0x7f0 <LCD_GUI_DrawLine+0x9c>
     7e2:	81 e0       	ldi	r24, 0x01	; 1
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	9e 83       	std	Y+6, r25	; 0x06
     7e8:	8d 83       	std	Y+5, r24	; 0x05
     7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <LCD_GUI_DrawLine+0x9c>
     7ec:	1e 82       	std	Y+6, r1	; 0x06
     7ee:	1d 82       	std	Y+5, r1	; 0x05
     7f0:	76 01       	movw	r14, r12
     7f2:	c6 14       	cp	r12, r6
     7f4:	d7 04       	cpc	r13, r7
     7f6:	0c f4       	brge	.+2      	; 0x7fa <LCD_GUI_DrawLine+0xa6>
     7f8:	73 01       	movw	r14, r6
     7fa:	57 01       	movw	r10, r14
     7fc:	9f ef       	ldi	r25, 0xFF	; 255
     7fe:	a9 1a       	sub	r10, r25
     800:	b9 0a       	sbc	r11, r25
     802:	00 e0       	ldi	r16, 0x00	; 0
     804:	10 e0       	ldi	r17, 0x00	; 0
     806:	18 86       	std	Y+8, r1	; 0x08
     808:	1f 82       	std	Y+7, r1	; 0x07
     80a:	81 2c       	mov	r8, r1
     80c:	91 2c       	mov	r9, r1
     80e:	49 81       	ldd	r20, Y+1	; 0x01
     810:	5a 81       	ldd	r21, Y+2	; 0x02
     812:	b2 01       	movw	r22, r4
     814:	c1 01       	movw	r24, r2
     816:	4a df       	rcall	.-364    	; 0x6ac <LCD_GUI_DrawPoint>
     818:	8f 81       	ldd	r24, Y+7	; 0x07
     81a:	98 85       	ldd	r25, Y+8	; 0x08
     81c:	8c 0d       	add	r24, r12
     81e:	9d 1d       	adc	r25, r13
     820:	98 87       	std	Y+8, r25	; 0x08
     822:	8f 83       	std	Y+7, r24	; 0x07
     824:	06 0d       	add	r16, r6
     826:	17 1d       	adc	r17, r7
     828:	e8 16       	cp	r14, r24
     82a:	f9 06       	cpc	r15, r25
     82c:	44 f4       	brge	.+16     	; 0x83e <LCD_GUI_DrawLine+0xea>
     82e:	8e 19       	sub	r24, r14
     830:	9f 09       	sbc	r25, r15
     832:	98 87       	std	Y+8, r25	; 0x08
     834:	8f 83       	std	Y+7, r24	; 0x07
     836:	8b 81       	ldd	r24, Y+3	; 0x03
     838:	9c 81       	ldd	r25, Y+4	; 0x04
     83a:	28 0e       	add	r2, r24
     83c:	39 1e       	adc	r3, r25
     83e:	e0 16       	cp	r14, r16
     840:	f1 06       	cpc	r15, r17
     842:	34 f4       	brge	.+12     	; 0x850 <LCD_GUI_DrawLine+0xfc>
     844:	0e 19       	sub	r16, r14
     846:	1f 09       	sbc	r17, r15
     848:	8d 81       	ldd	r24, Y+5	; 0x05
     84a:	9e 81       	ldd	r25, Y+6	; 0x06
     84c:	48 0e       	add	r4, r24
     84e:	59 1e       	adc	r5, r25
     850:	9f ef       	ldi	r25, 0xFF	; 255
     852:	89 1a       	sub	r8, r25
     854:	99 0a       	sbc	r9, r25
     856:	a8 14       	cp	r10, r8
     858:	b9 04       	cpc	r11, r9
     85a:	c8 f6       	brcc	.-78     	; 0x80e <LCD_GUI_DrawLine+0xba>
     85c:	28 96       	adiw	r28, 0x08	; 8
     85e:	0f b6       	in	r0, 0x3f	; 63
     860:	f8 94       	cli
     862:	de bf       	out	0x3e, r29	; 62
     864:	0f be       	out	0x3f, r0	; 63
     866:	cd bf       	out	0x3d, r28	; 61
     868:	df 91       	pop	r29
     86a:	cf 91       	pop	r28
     86c:	1f 91       	pop	r17
     86e:	0f 91       	pop	r16
     870:	ff 90       	pop	r15
     872:	ef 90       	pop	r14
     874:	df 90       	pop	r13
     876:	cf 90       	pop	r12
     878:	bf 90       	pop	r11
     87a:	af 90       	pop	r10
     87c:	9f 90       	pop	r9
     87e:	8f 90       	pop	r8
     880:	7f 90       	pop	r7
     882:	6f 90       	pop	r6
     884:	5f 90       	pop	r5
     886:	4f 90       	pop	r4
     888:	3f 90       	pop	r3
     88a:	2f 90       	pop	r2
     88c:	08 95       	ret

0000088e <LCD_GUI_DrawRectangle>:
     88e:	8f 92       	push	r8
     890:	9f 92       	push	r9
     892:	af 92       	push	r10
     894:	bf 92       	push	r11
     896:	cf 92       	push	r12
     898:	df 92       	push	r13
     89a:	ef 92       	push	r14
     89c:	ff 92       	push	r15
     89e:	0f 93       	push	r16
     8a0:	1f 93       	push	r17
     8a2:	cf 93       	push	r28
     8a4:	df 93       	push	r29
     8a6:	4c 01       	movw	r8, r24
     8a8:	7b 01       	movw	r14, r22
     8aa:	ea 01       	movw	r28, r20
     8ac:	69 01       	movw	r12, r18
     8ae:	9b 01       	movw	r18, r22
     8b0:	51 df       	rcall	.-350    	; 0x754 <LCD_GUI_DrawLine>
     8b2:	96 01       	movw	r18, r12
     8b4:	a4 01       	movw	r20, r8
     8b6:	b7 01       	movw	r22, r14
     8b8:	c4 01       	movw	r24, r8
     8ba:	4c df       	rcall	.-360    	; 0x754 <LCD_GUI_DrawLine>
     8bc:	96 01       	movw	r18, r12
     8be:	ae 01       	movw	r20, r28
     8c0:	b6 01       	movw	r22, r12
     8c2:	c4 01       	movw	r24, r8
     8c4:	47 df       	rcall	.-370    	; 0x754 <LCD_GUI_DrawLine>
     8c6:	96 01       	movw	r18, r12
     8c8:	ae 01       	movw	r20, r28
     8ca:	b7 01       	movw	r22, r14
     8cc:	ce 01       	movw	r24, r28
     8ce:	42 df       	rcall	.-380    	; 0x754 <LCD_GUI_DrawLine>
     8d0:	df 91       	pop	r29
     8d2:	cf 91       	pop	r28
     8d4:	1f 91       	pop	r17
     8d6:	0f 91       	pop	r16
     8d8:	ff 90       	pop	r15
     8da:	ef 90       	pop	r14
     8dc:	df 90       	pop	r13
     8de:	cf 90       	pop	r12
     8e0:	bf 90       	pop	r11
     8e2:	af 90       	pop	r10
     8e4:	9f 90       	pop	r9
     8e6:	8f 90       	pop	r8
     8e8:	08 95       	ret

000008ea <LCD_GUI_DrawFillRectangle>:
     8ea:	0f 93       	push	r16
     8ec:	1f 93       	push	r17
     8ee:	e7 de       	rcall	.-562    	; 0x6be <LCD_GUI_Fill>
     8f0:	1f 91       	pop	r17
     8f2:	0f 91       	pop	r16
     8f4:	08 95       	ret

000008f6 <LCD_ShowChar>:
     8f6:	3f 92       	push	r3
     8f8:	4f 92       	push	r4
     8fa:	5f 92       	push	r5
     8fc:	6f 92       	push	r6
     8fe:	7f 92       	push	r7
     900:	8f 92       	push	r8
     902:	9f 92       	push	r9
     904:	af 92       	push	r10
     906:	bf 92       	push	r11
     908:	cf 92       	push	r12
     90a:	df 92       	push	r13
     90c:	ef 92       	push	r14
     90e:	ff 92       	push	r15
     910:	0f 93       	push	r16
     912:	1f 93       	push	r17
     914:	cf 93       	push	r28
     916:	df 93       	push	r29
     918:	6a 01       	movw	r12, r20
     91a:	59 01       	movw	r10, r18
     91c:	00 52       	subi	r16, 0x20	; 32
     91e:	6e 2c       	mov	r6, r14
     920:	71 2c       	mov	r7, r1
     922:	23 01       	movw	r4, r6
     924:	44 0c       	add	r4, r4
     926:	55 1c       	adc	r5, r5
     928:	44 0c       	add	r4, r4
     92a:	55 1c       	adc	r5, r5
     92c:	44 0c       	add	r4, r4
     92e:	55 1c       	adc	r5, r5
     930:	44 0c       	add	r4, r4
     932:	55 1c       	adc	r5, r5
     934:	66 0c       	add	r6, r6
     936:	77 1c       	adc	r7, r7
     938:	66 0c       	add	r6, r6
     93a:	77 1c       	adc	r7, r7
     93c:	66 0c       	add	r6, r6
     93e:	77 1c       	adc	r7, r7
     940:	9b 01       	movw	r18, r22
     942:	21 50       	subi	r18, 0x01	; 1
     944:	31 09       	sbc	r19, r1
     946:	24 0d       	add	r18, r4
     948:	35 1d       	adc	r19, r5
     94a:	ac 01       	movw	r20, r24
     94c:	41 50       	subi	r20, 0x01	; 1
     94e:	51 09       	sbc	r21, r1
     950:	46 0d       	add	r20, r6
     952:	57 1d       	adc	r21, r7
     954:	1f dd       	rcall	.-1474   	; 0x394 <LCD_SetWindows>
     956:	14 14       	cp	r1, r4
     958:	15 04       	cpc	r1, r5
     95a:	bc f5       	brge	.+110    	; 0x9ca <LCD_ShowChar+0xd4>
     95c:	20 e1       	ldi	r18, 0x10	; 16
     95e:	02 9f       	mul	r16, r18
     960:	c0 01       	movw	r24, r0
     962:	11 24       	eor	r1, r1
     964:	31 2c       	mov	r3, r1
     966:	9c 01       	movw	r18, r24
     968:	22 5f       	subi	r18, 0xF2	; 242
     96a:	3d 4f       	sbci	r19, 0xFD	; 253
     96c:	49 01       	movw	r8, r18
     96e:	07 e0       	ldi	r16, 0x07	; 7
     970:	10 e0       	ldi	r17, 0x00	; 0
     972:	83 2d       	mov	r24, r3
     974:	6e 2d       	mov	r22, r14
     976:	67 d6       	rcall	.+3278   	; 0x1646 <__udivmodqi4>
     978:	f4 01       	movw	r30, r8
     97a:	e8 0f       	add	r30, r24
     97c:	f1 1d       	adc	r31, r1
     97e:	c5 81       	ldd	r28, Z+5	; 0x05
     980:	16 14       	cp	r1, r6
     982:	17 04       	cpc	r1, r7
     984:	e4 f4       	brge	.+56     	; 0x9be <LCD_ShowChar+0xc8>
     986:	f1 2c       	mov	r15, r1
     988:	d0 e0       	ldi	r29, 0x00	; 0
     98a:	8f 2d       	mov	r24, r15
     98c:	6e 2d       	mov	r22, r14
     98e:	5b d6       	rcall	.+3254   	; 0x1646 <__udivmodqi4>
     990:	98 01       	movw	r18, r16
     992:	28 1b       	sub	r18, r24
     994:	31 09       	sbc	r19, r1
     996:	c9 01       	movw	r24, r18
     998:	9e 01       	movw	r18, r28
     99a:	02 c0       	rjmp	.+4      	; 0x9a0 <LCD_ShowChar+0xaa>
     99c:	35 95       	asr	r19
     99e:	27 95       	ror	r18
     9a0:	8a 95       	dec	r24
     9a2:	e2 f7       	brpl	.-8      	; 0x99c <LCD_ShowChar+0xa6>
     9a4:	20 ff       	sbrs	r18, 0
     9a6:	03 c0       	rjmp	.+6      	; 0x9ae <LCD_ShowChar+0xb8>
     9a8:	c6 01       	movw	r24, r12
     9aa:	81 dd       	rcall	.-1278   	; 0x4ae <LCD_WriteData_16Bit>
     9ac:	02 c0       	rjmp	.+4      	; 0x9b2 <LCD_ShowChar+0xbc>
     9ae:	c5 01       	movw	r24, r10
     9b0:	7e dd       	rcall	.-1284   	; 0x4ae <LCD_WriteData_16Bit>
     9b2:	f3 94       	inc	r15
     9b4:	8f 2d       	mov	r24, r15
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	86 15       	cp	r24, r6
     9ba:	97 05       	cpc	r25, r7
     9bc:	34 f3       	brlt	.-52     	; 0x98a <LCD_ShowChar+0x94>
     9be:	33 94       	inc	r3
     9c0:	83 2d       	mov	r24, r3
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	84 15       	cp	r24, r4
     9c6:	95 05       	cpc	r25, r5
     9c8:	a4 f2       	brlt	.-88     	; 0x972 <LCD_ShowChar+0x7c>
     9ca:	df 91       	pop	r29
     9cc:	cf 91       	pop	r28
     9ce:	1f 91       	pop	r17
     9d0:	0f 91       	pop	r16
     9d2:	ff 90       	pop	r15
     9d4:	ef 90       	pop	r14
     9d6:	df 90       	pop	r13
     9d8:	cf 90       	pop	r12
     9da:	bf 90       	pop	r11
     9dc:	af 90       	pop	r10
     9de:	9f 90       	pop	r9
     9e0:	8f 90       	pop	r8
     9e2:	7f 90       	pop	r7
     9e4:	6f 90       	pop	r6
     9e6:	5f 90       	pop	r5
     9e8:	4f 90       	pop	r4
     9ea:	3f 90       	pop	r3
     9ec:	08 95       	ret

000009ee <LCD_ShowString>:
// 
//   LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);
// }

void LCD_ShowString(uint16_t x,uint16_t y,uint8_t size, uint8_t *p, uint16_t fc, uint16_t bc, uint8_t mode)
{
     9ee:	2f 92       	push	r2
     9f0:	3f 92       	push	r3
     9f2:	4f 92       	push	r4
     9f4:	5f 92       	push	r5
     9f6:	6f 92       	push	r6
     9f8:	7f 92       	push	r7
     9fa:	8f 92       	push	r8
     9fc:	9f 92       	push	r9
     9fe:	af 92       	push	r10
     a00:	bf 92       	push	r11
     a02:	cf 92       	push	r12
     a04:	df 92       	push	r13
     a06:	ef 92       	push	r14
     a08:	ff 92       	push	r15
     a0a:	0f 93       	push	r16
     a0c:	1f 93       	push	r17
     a0e:	cf 93       	push	r28
     a10:	df 93       	push	r29
     a12:	00 d0       	rcall	.+0      	; 0xa14 <LCD_ShowString+0x26>
     a14:	1f 92       	push	r1
     a16:	cd b7       	in	r28, 0x3d	; 61
     a18:	de b7       	in	r29, 0x3e	; 62
     a1a:	9c 83       	std	Y+4, r25	; 0x04
     a1c:	8b 83       	std	Y+3, r24	; 0x03
     a1e:	4b 01       	movw	r8, r22
     a20:	d4 2e       	mov	r13, r20
     a22:	1a 83       	std	Y+2, r17	; 0x02
     a24:	09 83       	std	Y+1, r16	; 0x01
     a26:	17 01       	movw	r2, r14
     a28:	1c 2d       	mov	r17, r12
  while((*p<='~')&&(*p>=' '))
     a2a:	f9 01       	movw	r30, r18
     a2c:	00 81       	ld	r16, Z
     a2e:	80 ee       	ldi	r24, 0xE0	; 224
     a30:	80 0f       	add	r24, r16
     a32:	8f 35       	cpi	r24, 0x5F	; 95
     a34:	08 f0       	brcs	.+2      	; 0xa38 <LCD_ShowString+0x4a>
     a36:	4b c0       	rjmp	.+150    	; 0xace <LCD_ShowString+0xe0>
  {
    if(x>(lcddev.width-1)||y>(lcddev.height-1))
     a38:	80 91 eb 0a 	lds	r24, 0x0AEB	; 0x800aeb <lcddev>
     a3c:	90 91 ec 0a 	lds	r25, 0x0AEC	; 0x800aec <lcddev+0x1>
     a40:	01 97       	sbiw	r24, 0x01	; 1
     a42:	4b 81       	ldd	r20, Y+3	; 0x03
     a44:	5c 81       	ldd	r21, Y+4	; 0x04
     a46:	84 17       	cp	r24, r20
     a48:	95 07       	cpc	r25, r21
     a4a:	08 f4       	brcc	.+2      	; 0xa4e <LCD_ShowString+0x60>
     a4c:	40 c0       	rjmp	.+128    	; 0xace <LCD_ShowString+0xe0>
     a4e:	80 91 ed 0a 	lds	r24, 0x0AED	; 0x800aed <lcddev+0x2>
     a52:	90 91 ee 0a 	lds	r25, 0x0AEE	; 0x800aee <lcddev+0x3>
     a56:	01 97       	sbiw	r24, 0x01	; 1
     a58:	86 17       	cp	r24, r22
     a5a:	97 07       	cpc	r25, r23
     a5c:	c0 f1       	brcs	.+112    	; 0xace <LCD_ShowString+0xe0>
    return;
    LCD_ShowChar(x,y,fc,bc,*p,size,mode);
    x+=8*size;
     a5e:	4d 2c       	mov	r4, r13
     a60:	51 2c       	mov	r5, r1
     a62:	44 0c       	add	r4, r4
     a64:	55 1c       	adc	r5, r5
     a66:	44 0c       	add	r4, r4
     a68:	55 1c       	adc	r5, r5
     a6a:	44 0c       	add	r4, r4
     a6c:	55 1c       	adc	r5, r5
     a6e:	59 01       	movw	r10, r18
     a70:	5f ef       	ldi	r21, 0xFF	; 255
     a72:	a5 1a       	sub	r10, r21
     a74:	b5 0a       	sbc	r11, r21

void LCD_ShowString(uint16_t x,uint16_t y,uint8_t size, uint8_t *p, uint16_t fc, uint16_t bc, uint8_t mode)
{
  while((*p<='~')&&(*p>=' '))
  {
    if(x>(lcddev.width-1)||y>(lcddev.height-1))
     a76:	0f 2e       	mov	r0, r31
     a78:	fb ee       	ldi	r31, 0xEB	; 235
     a7a:	6f 2e       	mov	r6, r31
     a7c:	fa e0       	ldi	r31, 0x0A	; 10
     a7e:	7f 2e       	mov	r7, r31
     a80:	f0 2d       	mov	r31, r0
     a82:	0f c0       	rjmp	.+30     	; 0xaa2 <LCD_ShowString+0xb4>
     a84:	f3 01       	movw	r30, r6
     a86:	80 81       	ld	r24, Z
     a88:	91 81       	ldd	r25, Z+1	; 0x01
     a8a:	01 97       	sbiw	r24, 0x01	; 1
     a8c:	2b 81       	ldd	r18, Y+3	; 0x03
     a8e:	3c 81       	ldd	r19, Y+4	; 0x04
     a90:	82 17       	cp	r24, r18
     a92:	93 07       	cpc	r25, r19
     a94:	e0 f0       	brcs	.+56     	; 0xace <LCD_ShowString+0xe0>
     a96:	82 81       	ldd	r24, Z+2	; 0x02
     a98:	93 81       	ldd	r25, Z+3	; 0x03
     a9a:	01 97       	sbiw	r24, 0x01	; 1
     a9c:	88 15       	cp	r24, r8
     a9e:	99 05       	cpc	r25, r9
     aa0:	b0 f0       	brcs	.+44     	; 0xace <LCD_ShowString+0xe0>
    return;
    LCD_ShowChar(x,y,fc,bc,*p,size,mode);
     aa2:	c1 2e       	mov	r12, r17
     aa4:	ed 2c       	mov	r14, r13
     aa6:	91 01       	movw	r18, r2
     aa8:	49 81       	ldd	r20, Y+1	; 0x01
     aaa:	5a 81       	ldd	r21, Y+2	; 0x02
     aac:	b4 01       	movw	r22, r8
     aae:	8b 81       	ldd	r24, Y+3	; 0x03
     ab0:	9c 81       	ldd	r25, Y+4	; 0x04
     ab2:	21 df       	rcall	.-446    	; 0x8f6 <LCD_ShowChar>
    x+=8*size;
     ab4:	4b 81       	ldd	r20, Y+3	; 0x03
     ab6:	5c 81       	ldd	r21, Y+4	; 0x04
     ab8:	44 0d       	add	r20, r4
     aba:	55 1d       	adc	r21, r5
     abc:	5c 83       	std	Y+4, r21	; 0x04
     abe:	4b 83       	std	Y+3, r20	; 0x03
//   LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);
// }

void LCD_ShowString(uint16_t x,uint16_t y,uint8_t size, uint8_t *p, uint16_t fc, uint16_t bc, uint8_t mode)
{
  while((*p<='~')&&(*p>=' '))
     ac0:	f5 01       	movw	r30, r10
     ac2:	01 91       	ld	r16, Z+
     ac4:	5f 01       	movw	r10, r30
     ac6:	80 ee       	ldi	r24, 0xE0	; 224
     ac8:	80 0f       	add	r24, r16
     aca:	8f 35       	cpi	r24, 0x5F	; 95
     acc:	d8 f2       	brcs	.-74     	; 0xa84 <LCD_ShowString+0x96>
    return;
    LCD_ShowChar(x,y,fc,bc,*p,size,mode);
    x+=8*size;
    p++;
  }
}
     ace:	0f 90       	pop	r0
     ad0:	0f 90       	pop	r0
     ad2:	0f 90       	pop	r0
     ad4:	0f 90       	pop	r0
     ad6:	df 91       	pop	r29
     ad8:	cf 91       	pop	r28
     ada:	1f 91       	pop	r17
     adc:	0f 91       	pop	r16
     ade:	ff 90       	pop	r15
     ae0:	ef 90       	pop	r14
     ae2:	df 90       	pop	r13
     ae4:	cf 90       	pop	r12
     ae6:	bf 90       	pop	r11
     ae8:	af 90       	pop	r10
     aea:	9f 90       	pop	r9
     aec:	8f 90       	pop	r8
     aee:	7f 90       	pop	r7
     af0:	6f 90       	pop	r6
     af2:	5f 90       	pop	r5
     af4:	4f 90       	pop	r4
     af6:	3f 90       	pop	r3
     af8:	2f 90       	pop	r2
     afa:	08 95       	ret

00000afc <SPI_Master_init>:
  SPI_Clock_Polarity_Select(LEADING_EDGE_RISING);
  SPI_Clock_Phase_Select(LEADING_EDGE_SAMPLE);
  SPI_Clock_Rate(SPI_CLOCK_RATE_8MHz);
  SPI_enable();

  mIsSlaveInitialised = true;
     afc:	80 91 ad 08 	lds	r24, 0x08AD	; 0x8008ad <mIsMasterInitialised>
     b00:	90 91 ae 08 	lds	r25, 0x08AE	; 0x8008ae <mIsMasterInitialised+0x1>
     b04:	89 2b       	or	r24, r25
     b06:	09 f5       	brne	.+66     	; 0xb4a <SPI_Master_init+0x4e>
     b08:	84 b1       	in	r24, 0x04	; 4
     b0a:	87 60       	ori	r24, 0x07	; 7
     b0c:	84 b9       	out	0x04, r24	; 4
     b0e:	8c b5       	in	r24, 0x2c	; 44
     b10:	80 61       	ori	r24, 0x10	; 16
     b12:	8c bd       	out	0x2c, r24	; 44
     b14:	8c b5       	in	r24, 0x2c	; 44
     b16:	8f 7d       	andi	r24, 0xDF	; 223
     b18:	8c bd       	out	0x2c, r24	; 44
     b1a:	8c b5       	in	r24, 0x2c	; 44
     b1c:	87 7f       	andi	r24, 0xF7	; 247
     b1e:	8c bd       	out	0x2c, r24	; 44
     b20:	8c b5       	in	r24, 0x2c	; 44
     b22:	8b 7f       	andi	r24, 0xFB	; 251
     b24:	8c bd       	out	0x2c, r24	; 44
     b26:	8c b5       	in	r24, 0x2c	; 44
     b28:	8d 7f       	andi	r24, 0xFD	; 253
     b2a:	8c bd       	out	0x2c, r24	; 44
     b2c:	8c b5       	in	r24, 0x2c	; 44
     b2e:	8e 7f       	andi	r24, 0xFE	; 254
     b30:	8c bd       	out	0x2c, r24	; 44
     b32:	8d b5       	in	r24, 0x2d	; 45
     b34:	81 60       	ori	r24, 0x01	; 1
     b36:	8d bd       	out	0x2d, r24	; 45
     b38:	8c b5       	in	r24, 0x2c	; 44
     b3a:	80 64       	ori	r24, 0x40	; 64
     b3c:	8c bd       	out	0x2c, r24	; 44
     b3e:	81 e0       	ldi	r24, 0x01	; 1
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	90 93 ae 08 	sts	0x08AE, r25	; 0x8008ae <mIsMasterInitialised+0x1>
     b46:	80 93 ad 08 	sts	0x08AD, r24	; 0x8008ad <mIsMasterInitialised>
     b4a:	08 95       	ret

00000b4c <SPI_Master_transmit>:
}

//Need to select slave before sending the data
char SPI_Master_transmit(char data)
{
  SPDR = data;
     b4c:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & (1<<SPIF))) {};
     b4e:	0d b4       	in	r0, 0x2d	; 45
     b50:	07 fe       	sbrs	r0, 7
     b52:	fd cf       	rjmp	.-6      	; 0xb4e <SPI_Master_transmit+0x2>
  return SPDR;
     b54:	8e b5       	in	r24, 0x2e	; 46
}
     b56:	08 95       	ret

00000b58 <USART_putstring>:
long USART_received_Int(void)
{
	long number;
	number = atol(Rx_buffer);
	return number;
}
     b58:	cf 93       	push	r28
     b5a:	df 93       	push	r29
     b5c:	fc 01       	movw	r30, r24
     b5e:	20 81       	ld	r18, Z
     b60:	22 23       	and	r18, r18
     b62:	69 f0       	breq	.+26     	; 0xb7e <USART_putstring+0x26>
     b64:	dc 01       	movw	r26, r24
     b66:	11 96       	adiw	r26, 0x01	; 1
     b68:	e0 ec       	ldi	r30, 0xC0	; 192
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	c6 ec       	ldi	r28, 0xC6	; 198
     b6e:	d0 e0       	ldi	r29, 0x00	; 0
     b70:	90 81       	ld	r25, Z
     b72:	95 ff       	sbrs	r25, 5
     b74:	fd cf       	rjmp	.-6      	; 0xb70 <USART_putstring+0x18>
     b76:	28 83       	st	Y, r18
     b78:	2d 91       	ld	r18, X+
     b7a:	21 11       	cpse	r18, r1
     b7c:	f9 cf       	rjmp	.-14     	; 0xb70 <USART_putstring+0x18>
     b7e:	df 91       	pop	r29
     b80:	cf 91       	pop	r28
     b82:	08 95       	ret

00000b84 <__vector_25>:
  while (!(UCSR0A & (1 << UDRE0)));  //wait until UDRE0 is set
  UDR0 = data;
}

ISR(USART0_RX_vect)
{
     b84:	1f 92       	push	r1
     b86:	0f 92       	push	r0
     b88:	0f b6       	in	r0, 0x3f	; 63
     b8a:	0f 92       	push	r0
     b8c:	11 24       	eor	r1, r1
     b8e:	0b b6       	in	r0, 0x3b	; 59
     b90:	0f 92       	push	r0
     b92:	2f 93       	push	r18
     b94:	3f 93       	push	r19
     b96:	4f 93       	push	r20
     b98:	5f 93       	push	r21
     b9a:	6f 93       	push	r22
     b9c:	7f 93       	push	r23
     b9e:	8f 93       	push	r24
     ba0:	9f 93       	push	r25
     ba2:	af 93       	push	r26
     ba4:	bf 93       	push	r27
     ba6:	ef 93       	push	r30
     ba8:	ff 93       	push	r31
	char ReceivedByte;
	ReceivedByte = UDR0; // Fetch the received byte value into the variable "ByteReceived"
     baa:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	//UDR0 = ReceivedByte; // Echo back the received byte back to the computer
	Rx_buffer[Rx_buffer_index++] = ReceivedByte;
     bae:	e0 91 af 08 	lds	r30, 0x08AF	; 0x8008af <Rx_buffer_index>
     bb2:	91 e0       	ldi	r25, 0x01	; 1
     bb4:	9e 0f       	add	r25, r30
     bb6:	90 93 af 08 	sts	0x08AF, r25	; 0x8008af <Rx_buffer_index>
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	e0 5e       	subi	r30, 0xE0	; 224
     bbe:	f4 4f       	sbci	r31, 0xF4	; 244
     bc0:	80 83       	st	Z, r24
	if (ReceivedByte == '\n') 
     bc2:	8a 30       	cpi	r24, 0x0A	; 10
     bc4:	71 f4       	brne	.+28     	; 0xbe2 <__vector_25+0x5e>
	{
		Rx_buffer[Rx_buffer_index] = 0; //put zero to terminate the string array
     bc6:	e0 91 af 08 	lds	r30, 0x08AF	; 0x8008af <Rx_buffer_index>
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	e0 5e       	subi	r30, 0xE0	; 224
     bce:	f4 4f       	sbci	r31, 0xF4	; 244
     bd0:	10 82       	st	Z, r1
		USART_putstring("[Rx echo]: ");
     bd2:	8a e0       	ldi	r24, 0x0A	; 10
     bd4:	98 e0       	ldi	r25, 0x08	; 8
     bd6:	c0 df       	rcall	.-128    	; 0xb58 <USART_putstring>
		USART_putstring(Rx_buffer);
     bd8:	80 e2       	ldi	r24, 0x20	; 32
     bda:	9b e0       	ldi	r25, 0x0B	; 11
     bdc:	bd df       	rcall	.-134    	; 0xb58 <USART_putstring>
		Rx_buffer_index = 0;
     bde:	10 92 af 08 	sts	0x08AF, r1	; 0x8008af <Rx_buffer_index>
		ReceivedByte = 0x00;
	}
}
     be2:	ff 91       	pop	r31
     be4:	ef 91       	pop	r30
     be6:	bf 91       	pop	r27
     be8:	af 91       	pop	r26
     bea:	9f 91       	pop	r25
     bec:	8f 91       	pop	r24
     bee:	7f 91       	pop	r23
     bf0:	6f 91       	pop	r22
     bf2:	5f 91       	pop	r21
     bf4:	4f 91       	pop	r20
     bf6:	3f 91       	pop	r19
     bf8:	2f 91       	pop	r18
     bfa:	0f 90       	pop	r0
     bfc:	0b be       	out	0x3b, r0	; 59
     bfe:	0f 90       	pop	r0
     c00:	0f be       	out	0x3f, r0	; 63
     c02:	0f 90       	pop	r0
     c04:	1f 90       	pop	r1
     c06:	18 95       	reti

00000c08 <main>:
  MAGENTA,
  BROWN
};

int main(void)
{
     c08:	cf 93       	push	r28
     c0a:	df 93       	push	r29
     c0c:	cd b7       	in	r28, 0x3d	; 61
     c0e:	de b7       	in	r29, 0x3e	; 62
     c10:	6d 97       	sbiw	r28, 0x1d	; 29
     c12:	0f b6       	in	r0, 0x3f	; 63
     c14:	f8 94       	cli
     c16:	de bf       	out	0x3e, r29	; 62
     c18:	0f be       	out	0x3f, r0	; 63
     c1a:	cd bf       	out	0x3d, r28	; 61
  LCD_Init();
     c1c:	9b dc       	rcall	.-1738   	; 0x554 <LCD_Init>
  LCD_SetBackLight(20);
     c1e:	84 e1       	ldi	r24, 0x14	; 20
     c20:	44 dc       	rcall	.-1912   	; 0x4aa <LCD_SetBackLight>
  LCD_direction(LCD_ROTATE_90);
     c22:	81 e0       	ldi	r24, 0x01	; 1
  pDDRV_Button_init();
     c24:	f0 db       	rcall	.-2080   	; 0x406 <LCD_direction>
     c26:	e9 da       	rcall	.-2606   	; 0x1fa <pDDRV_Button_init>
  
  aTRS_ENG_drawBoundary();
     c28:	10 d1       	rcall	.+544    	; 0xe4a <aTRS_ENG_drawBoundary>
     c2a:	c1 2c       	mov	r12, r1
  LCD_ShowString(320, 20, 2, "TETRIS", YELLOW, BLACK, 0);
     c2c:	d1 2c       	mov	r13, r1
     c2e:	e1 2c       	mov	r14, r1
     c30:	f1 2c       	mov	r15, r1
     c32:	00 ee       	ldi	r16, 0xE0	; 224
     c34:	1f ef       	ldi	r17, 0xFF	; 255
     c36:	26 e1       	ldi	r18, 0x16	; 22
     c38:	38 e0       	ldi	r19, 0x08	; 8
     c3a:	42 e0       	ldi	r20, 0x02	; 2
     c3c:	50 e0       	ldi	r21, 0x00	; 0
     c3e:	64 e1       	ldi	r22, 0x14	; 20
     c40:	70 e0       	ldi	r23, 0x00	; 0
     c42:	80 e4       	ldi	r24, 0x40	; 64
     c44:	91 e0       	ldi	r25, 0x01	; 1
     c46:	d3 de       	rcall	.-602    	; 0x9ee <LCD_ShowString>
     c48:	0f 2e       	mov	r0, r31
    char B_down[2];
    char B_right[2];
    char B_rotate[2];

    sprintf(ScoreString, "%6d", aTRS_ENG_GetScore());
    sprintf(B_up, "%d", button.up);
     c4a:	f1 e2       	ldi	r31, 0x21	; 33
     c4c:	af 2e       	mov	r10, r31
     c4e:	f8 e0       	ldi	r31, 0x08	; 8
     c50:	bf 2e       	mov	r11, r31
     c52:	f0 2d       	mov	r31, r0
     c54:	3e 01       	movw	r6, r28
     c56:	25 e1       	ldi	r18, 0x15	; 21
     c58:	62 0e       	add	r6, r18
     c5a:	71 1c       	adc	r7, r1
     c5c:	ce 01       	movw	r24, r28
    sprintf(B_left, "%d", button.left);
     c5e:	43 96       	adiw	r24, 0x13	; 19
     c60:	98 8f       	std	Y+24, r25	; 0x18
     c62:	8f 8b       	std	Y+23, r24	; 0x17
     c64:	02 97       	sbiw	r24, 0x02	; 2
    sprintf(B_down, "%d", button.down);
     c66:	9a 8f       	std	Y+26, r25	; 0x1a
     c68:	89 8f       	std	Y+25, r24	; 0x19
     c6a:	02 97       	sbiw	r24, 0x02	; 2
    sprintf(B_right, "%d", button.right);
     c6c:	9c 8f       	std	Y+28, r25	; 0x1c
     c6e:	8b 8f       	std	Y+27, r24	; 0x1b
    sprintf(B_rotate, "%d", button.rotate);
     c70:	1e 01       	movw	r2, r28
     c72:	9d e0       	ldi	r25, 0x0D	; 13
     c74:	29 0e       	add	r2, r25
     c76:	31 1c       	adc	r3, r1
  aTRS_ENG_drawBoundary();
  LCD_ShowString(320, 20, 2, "TETRIS", YELLOW, BLACK, 0);
  
  while (1)
  {
    __Button_Status button = pDDRV_Button_GetStatus();
     c78:	ee da       	rcall	.-2596   	; 0x256 <pDDRV_Button_GetStatus>
     c7a:	92 2e       	mov	r9, r18
     c7c:	e3 2e       	mov	r14, r19
     c7e:	f4 2e       	mov	r15, r20
     c80:	05 2f       	mov	r16, r21
     c82:	16 2f       	mov	r17, r22
     c84:	28 87       	std	Y+8, r18	; 0x08
     c86:	39 87       	std	Y+9, r19	; 0x09
     c88:	4a 87       	std	Y+10, r20	; 0x0a
     c8a:	5b 87       	std	Y+11, r21	; 0x0b
     c8c:	6c 87       	std	Y+12, r22	; 0x0c
     c8e:	53 2e       	mov	r5, r19
     c90:	4d 8f       	std	Y+29, r20	; 0x1d
     c92:	45 2e       	mov	r4, r21
     c94:	86 2e       	mov	r8, r22
    char B_left[2];
    char B_down[2];
    char B_right[2];
    char B_rotate[2];

    sprintf(ScoreString, "%6d", aTRS_ENG_GetScore());
     c96:	5b d4       	rcall	.+2230   	; 0x154e <aTRS_ENG_GetScore>
     c98:	9f 93       	push	r25
     c9a:	8f 93       	push	r24
     c9c:	8d e1       	ldi	r24, 0x1D	; 29
     c9e:	98 e0       	ldi	r25, 0x08	; 8
     ca0:	9f 93       	push	r25
     ca2:	8f 93       	push	r24
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	8c 0f       	add	r24, r28
     caa:	9d 1f       	adc	r25, r29
     cac:	9f 93       	push	r25
     cae:	8f 93       	push	r24
     cb0:	74 d5       	rcall	.+2792   	; 0x179a <sprintf>
    sprintf(B_up, "%d", button.up);
     cb2:	1f 92       	push	r1
     cb4:	9f 92       	push	r9
     cb6:	bf 92       	push	r11
     cb8:	af 92       	push	r10
     cba:	7f 92       	push	r7
     cbc:	6f 92       	push	r6
     cbe:	6d d5       	rcall	.+2778   	; 0x179a <sprintf>
    sprintf(B_left, "%d", button.left);
     cc0:	1f 92       	push	r1
     cc2:	ef 92       	push	r14
     cc4:	bf 92       	push	r11
     cc6:	af 92       	push	r10
     cc8:	98 8d       	ldd	r25, Y+24	; 0x18
     cca:	9f 93       	push	r25
     ccc:	2f 89       	ldd	r18, Y+23	; 0x17
     cce:	2f 93       	push	r18
     cd0:	64 d5       	rcall	.+2760   	; 0x179a <sprintf>
    sprintf(B_down, "%d", button.down);
     cd2:	1f 92       	push	r1
     cd4:	ff 92       	push	r15
     cd6:	bf 92       	push	r11
     cd8:	af 92       	push	r10
     cda:	8a 8d       	ldd	r24, Y+26	; 0x1a
     cdc:	8f 93       	push	r24
     cde:	99 8d       	ldd	r25, Y+25	; 0x19
     ce0:	9f 93       	push	r25
     ce2:	5b d5       	rcall	.+2742   	; 0x179a <sprintf>
    sprintf(B_right, "%d", button.right);
     ce4:	1f 92       	push	r1
     ce6:	0f 93       	push	r16
     ce8:	bf 92       	push	r11
     cea:	af 92       	push	r10
     cec:	2c 8d       	ldd	r18, Y+28	; 0x1c
     cee:	2f 93       	push	r18
     cf0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cf2:	8f 93       	push	r24
     cf4:	52 d5       	rcall	.+2724   	; 0x179a <sprintf>
    sprintf(B_rotate, "%d", button.rotate);
     cf6:	1f 92       	push	r1
     cf8:	1f 93       	push	r17
     cfa:	bf 92       	push	r11
     cfc:	af 92       	push	r10
     cfe:	3f 92       	push	r3
     d00:	2f 92       	push	r2
     d02:	4b d5       	rcall	.+2710   	; 0x179a <sprintf>
     d04:	0f b6       	in	r0, 0x3f	; 63

    LCD_ShowString(320, 80, 1, ScoreString, WHITE, BLACK, 0);
     d06:	f8 94       	cli
     d08:	de bf       	out	0x3e, r29	; 62
     d0a:	0f be       	out	0x3f, r0	; 63
     d0c:	cd bf       	out	0x3d, r28	; 61
     d0e:	c1 2c       	mov	r12, r1
     d10:	d1 2c       	mov	r13, r1
     d12:	e1 2c       	mov	r14, r1
     d14:	f1 2c       	mov	r15, r1
     d16:	0f ef       	ldi	r16, 0xFF	; 255
     d18:	1f ef       	ldi	r17, 0xFF	; 255
     d1a:	9e 01       	movw	r18, r28
     d1c:	2f 5f       	subi	r18, 0xFF	; 255
     d1e:	3f 4f       	sbci	r19, 0xFF	; 255
     d20:	41 e0       	ldi	r20, 0x01	; 1
     d22:	50 e0       	ldi	r21, 0x00	; 0
     d24:	60 e5       	ldi	r22, 0x50	; 80
     d26:	70 e0       	ldi	r23, 0x00	; 0
     d28:	80 e4       	ldi	r24, 0x40	; 64
     d2a:	91 e0       	ldi	r25, 0x01	; 1
     d2c:	60 de       	rcall	.-832    	; 0x9ee <LCD_ShowString>
    LCD_ShowString(320, 100, 1, B_up, WHITE, BLACK, 0);
     d2e:	93 01       	movw	r18, r6
     d30:	41 e0       	ldi	r20, 0x01	; 1
     d32:	50 e0       	ldi	r21, 0x00	; 0
     d34:	64 e6       	ldi	r22, 0x64	; 100
     d36:	70 e0       	ldi	r23, 0x00	; 0
     d38:	80 e4       	ldi	r24, 0x40	; 64
     d3a:	91 e0       	ldi	r25, 0x01	; 1
     d3c:	58 de       	rcall	.-848    	; 0x9ee <LCD_ShowString>
    LCD_ShowString(320, 120, 1, B_left, WHITE, BLACK, 0);
     d3e:	9e 01       	movw	r18, r28
     d40:	2d 5e       	subi	r18, 0xED	; 237
     d42:	3f 4f       	sbci	r19, 0xFF	; 255
     d44:	41 e0       	ldi	r20, 0x01	; 1
     d46:	50 e0       	ldi	r21, 0x00	; 0
     d48:	68 e7       	ldi	r22, 0x78	; 120
     d4a:	70 e0       	ldi	r23, 0x00	; 0
     d4c:	80 e4       	ldi	r24, 0x40	; 64
     d4e:	91 e0       	ldi	r25, 0x01	; 1
     d50:	4e de       	rcall	.-868    	; 0x9ee <LCD_ShowString>
    LCD_ShowString(320, 140, 1, B_down, WHITE, BLACK, 0);
     d52:	9e 01       	movw	r18, r28
     d54:	2f 5e       	subi	r18, 0xEF	; 239
     d56:	3f 4f       	sbci	r19, 0xFF	; 255
     d58:	41 e0       	ldi	r20, 0x01	; 1
     d5a:	50 e0       	ldi	r21, 0x00	; 0
     d5c:	6c e8       	ldi	r22, 0x8C	; 140
     d5e:	70 e0       	ldi	r23, 0x00	; 0
     d60:	80 e4       	ldi	r24, 0x40	; 64
     d62:	91 e0       	ldi	r25, 0x01	; 1
     d64:	44 de       	rcall	.-888    	; 0x9ee <LCD_ShowString>
    LCD_ShowString(320, 160, 1, B_right, WHITE, BLACK, 0);
     d66:	9e 01       	movw	r18, r28
     d68:	21 5f       	subi	r18, 0xF1	; 241
     d6a:	3f 4f       	sbci	r19, 0xFF	; 255
     d6c:	41 e0       	ldi	r20, 0x01	; 1
     d6e:	50 e0       	ldi	r21, 0x00	; 0
     d70:	60 ea       	ldi	r22, 0xA0	; 160
     d72:	70 e0       	ldi	r23, 0x00	; 0
     d74:	80 e4       	ldi	r24, 0x40	; 64
     d76:	91 e0       	ldi	r25, 0x01	; 1
    LCD_ShowString(320, 180, 1, B_rotate, WHITE, BLACK, 0);
     d78:	3a de       	rcall	.-908    	; 0x9ee <LCD_ShowString>
     d7a:	91 01       	movw	r18, r2
     d7c:	41 e0       	ldi	r20, 0x01	; 1
     d7e:	50 e0       	ldi	r21, 0x00	; 0
     d80:	64 eb       	ldi	r22, 0xB4	; 180
     d82:	70 e0       	ldi	r23, 0x00	; 0
     d84:	80 e4       	ldi	r24, 0x40	; 64
     d86:	91 e0       	ldi	r25, 0x01	; 1

    

    if (button.up == BUTTON_PRESSED) 
     d88:	32 de       	rcall	.-924    	; 0x9ee <LCD_ShowString>
    {
      if (aTRS_ENG_BoundaryCheck_Translate(0))
     d8a:	91 10       	cpse	r9, r1
     d8c:	08 c0       	rjmp	.+16     	; 0xd9e <main+0x196>
      {
        aTRS_ENG_drawCurrentShape(BLACK);
     d8e:	80 e0       	ldi	r24, 0x00	; 0
     d90:	2c d2       	rcall	.+1112   	; 0x11ea <aTRS_ENG_BoundaryCheck_Translate>
     d92:	88 23       	and	r24, r24
        aTRS_ENG_ShapeShiftUp();
     d94:	21 f0       	breq	.+8      	; 0xd9e <main+0x196>
      }
    }
    
    if (button.down == BUTTON_PRESSED)
     d96:	80 e0       	ldi	r24, 0x00	; 0
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	ff d0       	rcall	.+510    	; 0xf9a <aTRS_ENG_drawCurrentShape>
    {
      if (aTRS_ENG_BoundaryCheck_Translate(2))
     d9c:	db d0       	rcall	.+438    	; 0xf54 <aTRS_ENG_ShapeShiftUp>
     d9e:	9d 8d       	ldd	r25, Y+29	; 0x1d
     da0:	91 11       	cpse	r25, r1
      {
        aTRS_ENG_drawCurrentShape(BLACK);
     da2:	0f c0       	rjmp	.+30     	; 0xdc2 <main+0x1ba>
     da4:	82 e0       	ldi	r24, 0x02	; 2
     da6:	21 d2       	rcall	.+1090   	; 0x11ea <aTRS_ENG_BoundaryCheck_Translate>
        aTRS_ENG_ShapeShiftDown();
     da8:	88 23       	and	r24, r24
     daa:	29 f0       	breq	.+10     	; 0xdb6 <main+0x1ae>
      }
      else
      {
        aTRS_ENG_AttachToField();
     dac:	80 e0       	ldi	r24, 0x00	; 0
     dae:	90 e0       	ldi	r25, 0x00	; 0
        aTRS_ENG_CheckClearedRows();
     db0:	f4 d0       	rcall	.+488    	; 0xf9a <aTRS_ENG_drawCurrentShape>
        
        if (aTRS_ENG_GenerateNewShape() == NULL) 
     db2:	d6 d0       	rcall	.+428    	; 0xf60 <aTRS_ENG_ShapeShiftDown>
     db4:	06 c0       	rjmp	.+12     	; 0xdc2 <main+0x1ba>
     db6:	89 d1       	rcall	.+786    	; 0x10ca <aTRS_ENG_AttachToField>
        {
          aTRS_ENG_GameOver();
     db8:	f2 d2       	rcall	.+1508   	; 0x139e <aTRS_ENG_CheckClearedRows>
     dba:	66 d0       	rcall	.+204    	; 0xe88 <aTRS_ENG_GenerateNewShape>

        }
      }
    } 

    if (button.right == BUTTON_PRESSED)
     dbc:	89 2b       	or	r24, r25
     dbe:	09 f4       	brne	.+2      	; 0xdc2 <main+0x1ba>
    {
      if (aTRS_ENG_BoundaryCheck_Translate(1))
     dc0:	08 d4       	rcall	.+2064   	; 0x15d2 <aTRS_ENG_GameOver>
     dc2:	41 10       	cpse	r4, r1
     dc4:	08 c0       	rjmp	.+16     	; 0xdd6 <main+0x1ce>
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	10 d2       	rcall	.+1056   	; 0x11ea <aTRS_ENG_BoundaryCheck_Translate>
      {
        aTRS_ENG_drawCurrentShape(BLACK);
     dca:	88 23       	and	r24, r24
     dcc:	21 f0       	breq	.+8      	; 0xdd6 <main+0x1ce>
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	90 e0       	ldi	r25, 0x00	; 0
        aTRS_ENG_ShapeShiftRight();    
     dd2:	e3 d0       	rcall	.+454    	; 0xf9a <aTRS_ENG_drawCurrentShape>
     dd4:	cb d0       	rcall	.+406    	; 0xf6c <aTRS_ENG_ShapeShiftRight>
      }     
    }

    if (button.left == BUTTON_PRESSED)
     dd6:	51 10       	cpse	r5, r1
     dd8:	08 c0       	rjmp	.+16     	; 0xdea <main+0x1e2>
    {
      if (aTRS_ENG_BoundaryCheck_Translate(3))
     dda:	83 e0       	ldi	r24, 0x03	; 3
     ddc:	06 d2       	rcall	.+1036   	; 0x11ea <aTRS_ENG_BoundaryCheck_Translate>
     dde:	88 23       	and	r24, r24
     de0:	21 f0       	breq	.+8      	; 0xdea <main+0x1e2>
     de2:	80 e0       	ldi	r24, 0x00	; 0
      {
        aTRS_ENG_drawCurrentShape(BLACK);
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	d9 d0       	rcall	.+434    	; 0xf9a <aTRS_ENG_drawCurrentShape>
     de8:	c7 d0       	rcall	.+398    	; 0xf78 <aTRS_ENG_ShapeShiftLeft>
     dea:	81 10       	cpse	r8, r1
        aTRS_ENG_ShapeShiftLeft();
     dec:	03 c0       	rjmp	.+6      	; 0xdf4 <main+0x1ec>
     dee:	84 d2       	rcall	.+1288   	; 0x12f8 <aTRS_ENG_BoundaryCheck_Rotate>
      }
    }

    if (button.rotate == BUTTON_PRESSED) 
     df0:	81 11       	cpse	r24, r1
     df2:	c8 d0       	rcall	.+400    	; 0xf84 <aTRS_ENG_ShapeRotate>
    {
      if(aTRS_ENG_BoundaryCheck_Rotate())
     df4:	80 ee       	ldi	r24, 0xE0	; 224
     df6:	9f ef       	ldi	r25, 0xFF	; 255
     df8:	d0 d0       	rcall	.+416    	; 0xf9a <aTRS_ENG_drawCurrentShape>
      {
        aTRS_ENG_ShapeRotate();
     dfa:	8f e3       	ldi	r24, 0x3F	; 63
     dfc:	9c e9       	ldi	r25, 0x9C	; 156
      }
    }

    aTRS_ENG_drawCurrentShape(YELLOW);
     dfe:	01 97       	sbiw	r24, 0x01	; 1
     e00:	f1 f7       	brne	.-4      	; 0xdfe <main+0x1f6>
     e02:	00 c0       	rjmp	.+0      	; 0xe04 <main+0x1fc>
     e04:	00 00       	nop
     e06:	38 cf       	rjmp	.-400    	; 0xc78 <main+0x70>

00000e08 <Rotate>:
     e08:	43 70       	andi	r20, 0x03	; 3
     e0a:	41 30       	cpi	r20, 0x01	; 1
     e0c:	59 f0       	breq	.+22     	; 0xe24 <Rotate+0x1c>
     e0e:	28 f0       	brcs	.+10     	; 0xe1a <Rotate+0x12>
     e10:	42 30       	cpi	r20, 0x02	; 2
    _delay_ms(10);


  }
     e12:	71 f0       	breq	.+28     	; 0xe30 <Rotate+0x28>
}

void aTRS_ENG_moveShapeCursor(uint8_t row, uint8_t col)
{
  mShapeCursor.row = row;
  mShapeCursor.col = col;
     e14:	43 30       	cpi	r20, 0x03	; 3
     e16:	91 f0       	breq	.+36     	; 0xe3c <Rotate+0x34>
     e18:	16 c0       	rjmp	.+44     	; 0xe46 <Rotate+0x3e>
     e1a:	66 0f       	add	r22, r22
     e1c:	66 0f       	add	r22, r22
     e1e:	96 2f       	mov	r25, r22
     e20:	98 0f       	add	r25, r24
     e22:	11 c0       	rjmp	.+34     	; 0xe46 <Rotate+0x3e>
     e24:	64 5f       	subi	r22, 0xF4	; 244
     e26:	88 0f       	add	r24, r24
     e28:	88 0f       	add	r24, r24
     e2a:	96 2f       	mov	r25, r22
     e2c:	98 1b       	sub	r25, r24
     e2e:	0b c0       	rjmp	.+22     	; 0xe46 <Rotate+0x3e>
     e30:	9f e0       	ldi	r25, 0x0F	; 15
     e32:	98 1b       	sub	r25, r24
     e34:	66 0f       	add	r22, r22
     e36:	66 0f       	add	r22, r22
     e38:	96 1b       	sub	r25, r22
     e3a:	05 c0       	rjmp	.+10     	; 0xe46 <Rotate+0x3e>
     e3c:	88 0f       	add	r24, r24
     e3e:	88 0f       	add	r24, r24
     e40:	8d 5f       	subi	r24, 0xFD	; 253
     e42:	98 2f       	mov	r25, r24
     e44:	96 1b       	sub	r25, r22
     e46:	89 2f       	mov	r24, r25
     e48:	08 95       	ret

00000e4a <aTRS_ENG_drawBoundary>:
     e4a:	0f 93       	push	r16
     e4c:	1f 93       	push	r17
     e4e:	0f ef       	ldi	r16, 0xFF	; 255
     e50:	1f ef       	ldi	r17, 0xFF	; 255
     e52:	26 e3       	ldi	r18, 0x36	; 54
     e54:	31 e0       	ldi	r19, 0x01	; 1
     e56:	4e ed       	ldi	r20, 0xDE	; 222
     e58:	50 e0       	ldi	r21, 0x00	; 0
     e5a:	68 e0       	ldi	r22, 0x08	; 8
     e5c:	70 e0       	ldi	r23, 0x00	; 0
     e5e:	8a e0       	ldi	r24, 0x0A	; 10
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	15 dd       	rcall	.-1494   	; 0x88e <LCD_GUI_DrawRectangle>
     e64:	28 e3       	ldi	r18, 0x38	; 56
     e66:	31 e0       	ldi	r19, 0x01	; 1
     e68:	40 ee       	ldi	r20, 0xE0	; 224
     e6a:	50 e0       	ldi	r21, 0x00	; 0
     e6c:	66 e0       	ldi	r22, 0x06	; 6
     e6e:	70 e0       	ldi	r23, 0x00	; 0
     e70:	88 e0       	ldi	r24, 0x08	; 8
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	0c dd       	rcall	.-1512   	; 0x88e <LCD_GUI_DrawRectangle>
     e76:	1f 91       	pop	r17
     e78:	0f 91       	pop	r16
     e7a:	08 95       	ret

00000e7c <aTRS_ENG_returnShapeCursorHome>:
  return mCurrentShape;
}

void aTRS_ENG_moveShapeCursor(uint8_t row, uint8_t col)
{
  mShapeCursor.row = row;
     e7c:	e9 e0       	ldi	r30, 0x09	; 9
     e7e:	f2 e0       	ldi	r31, 0x02	; 2
     e80:	10 82       	st	Z, r1
  mShapeCursor.col = col;
     e82:	85 e0       	ldi	r24, 0x05	; 5
     e84:	81 83       	std	Z+1, r24	; 0x01
     e86:	08 95       	ret

00000e88 <aTRS_ENG_GenerateNewShape>:
                        TetrisFrame.frame_y2 + TetrisFrame.frame_thickness,
                        TetrisFrame.frame_colour);
}

uint8_t* aTRS_ENG_GenerateNewShape(void)
{
     e88:	9f 92       	push	r9
     e8a:	af 92       	push	r10
     e8c:	bf 92       	push	r11
     e8e:	cf 92       	push	r12
     e90:	df 92       	push	r13
     e92:	ef 92       	push	r14
     e94:	ff 92       	push	r15
     e96:	0f 93       	push	r16
     e98:	1f 93       	push	r17
     e9a:	cf 93       	push	r28
     e9c:	df 93       	push	r29
  uint8_t newShape = rand() % 7;
     e9e:	6f d4       	rcall	.+2270   	; 0x177e <rand>
  mCurrentShape = mShapeArray[newShape];
     ea0:	67 e0       	ldi	r22, 0x07	; 7
     ea2:	70 e0       	ldi	r23, 0x00	; 0
     ea4:	dc d3       	rcall	.+1976   	; 0x165e <__divmodhi4>
     ea6:	fc 01       	movw	r30, r24
     ea8:	ff 27       	eor	r31, r31
     eaa:	ee 0f       	add	r30, r30
     eac:	ff 1f       	adc	r31, r31
     eae:	e2 5d       	subi	r30, 0xD2	; 210
     eb0:	f7 4f       	sbci	r31, 0xF7	; 247
     eb2:	d0 81       	ld	r29, Z
     eb4:	c1 81       	ldd	r28, Z+1	; 0x01
     eb6:	d0 93 0c 02 	sts	0x020C, r29	; 0x80020c <mCurrentShape>
     eba:	c0 93 0d 02 	sts	0x020D, r28	; 0x80020d <mCurrentShape+0x1>
  aTRS_ENG_returnShapeCursorHome();
     ebe:	de df       	rcall	.-68     	; 0xe7c <aTRS_ENG_returnShapeCursorHome>

  for (uint8_t nRow = 0; nRow < 4; nRow++)
  {
    for (uint8_t nCol = 0; nCol < 4; nCol++)
    {
      if ((mCurrentShape[Rotate(nCol, nRow, mShapeCursor.rot)] != 0) && (field[(mShapeCursor.row + nRow)  * SCREEN_WIDTH + mShapeCursor.col + nCol] !=0))
     ec0:	e9 e0       	ldi	r30, 0x09	; 9
     ec2:	f2 e0       	ldi	r31, 0x02	; 2
     ec4:	b2 80       	ldd	r11, Z+2	; 0x02
     ec6:	80 81       	ld	r24, Z
     ec8:	c1 80       	ldd	r12, Z+1	; 0x01
     eca:	0c 2c       	mov	r0, r12
     ecc:	00 0c       	add	r0, r0
     ece:	dd 08       	sbc	r13, r13
     ed0:	2e e0       	ldi	r18, 0x0E	; 14
     ed2:	82 02       	muls	r24, r18
     ed4:	c0 0c       	add	r12, r0
     ed6:	d1 1c       	adc	r13, r1
     ed8:	11 24       	eor	r1, r1
     eda:	c6 01       	movw	r24, r12
     edc:	88 0f       	add	r24, r24
     ede:	99 1f       	adc	r25, r25
     ee0:	fc 01       	movw	r30, r24
     ee2:	ee 54       	subi	r30, 0x4E	; 78
     ee4:	f7 4f       	sbci	r31, 0xF7	; 247
     ee6:	6f 01       	movw	r12, r30
     ee8:	ed 2e       	mov	r14, r29
     eea:	fc 2e       	mov	r15, r28
{
  uint8_t newShape = rand() % 7;
  mCurrentShape = mShapeArray[newShape];
  aTRS_ENG_returnShapeCursorHome();

  for (uint8_t nRow = 0; nRow < 4; nRow++)
     eec:	d0 e0       	ldi	r29, 0x00	; 0
  {
    for (uint8_t nCol = 0; nCol < 4; nCol++)
    {
      if ((mCurrentShape[Rotate(nCol, nRow, mShapeCursor.rot)] != 0) && (field[(mShapeCursor.row + nRow)  * SCREEN_WIDTH + mShapeCursor.col + nCol] !=0))
      {
        mCurrentShape = NULL;
     eee:	91 2c       	mov	r9, r1
     ef0:	a1 2c       	mov	r10, r1
     ef2:	1c c0       	rjmp	.+56     	; 0xf2c <aTRS_ENG_GenerateNewShape+0xa4>

  for (uint8_t nRow = 0; nRow < 4; nRow++)
  {
    for (uint8_t nCol = 0; nCol < 4; nCol++)
    {
      if ((mCurrentShape[Rotate(nCol, nRow, mShapeCursor.rot)] != 0) && (field[(mShapeCursor.row + nRow)  * SCREEN_WIDTH + mShapeCursor.col + nCol] !=0))
     ef4:	4b 2d       	mov	r20, r11
     ef6:	6d 2f       	mov	r22, r29
     ef8:	8c 2f       	mov	r24, r28
     efa:	86 df       	rcall	.-244    	; 0xe08 <Rotate>
     efc:	f7 01       	movw	r30, r14
     efe:	e8 0f       	add	r30, r24
     f00:	f1 1d       	adc	r31, r1
     f02:	80 81       	ld	r24, Z
     f04:	88 23       	and	r24, r24
     f06:	39 f0       	breq	.+14     	; 0xf16 <aTRS_ENG_GenerateNewShape+0x8e>
     f08:	f8 01       	movw	r30, r16
     f0a:	80 81       	ld	r24, Z
     f0c:	91 81       	ldd	r25, Z+1	; 0x01
     f0e:	89 2b       	or	r24, r25
     f10:	11 f0       	breq	.+4      	; 0xf16 <aTRS_ENG_GenerateNewShape+0x8e>
      {
        mCurrentShape = NULL;
     f12:	e9 2c       	mov	r14, r9
     f14:	fa 2c       	mov	r15, r10
  mCurrentShape = mShapeArray[newShape];
  aTRS_ENG_returnShapeCursorHome();

  for (uint8_t nRow = 0; nRow < 4; nRow++)
  {
    for (uint8_t nCol = 0; nCol < 4; nCol++)
     f16:	cf 5f       	subi	r28, 0xFF	; 255
     f18:	0e 5f       	subi	r16, 0xFE	; 254
     f1a:	1f 4f       	sbci	r17, 0xFF	; 255
     f1c:	c4 30       	cpi	r28, 0x04	; 4
     f1e:	51 f7       	brne	.-44     	; 0xef4 <aTRS_ENG_GenerateNewShape+0x6c>
{
  uint8_t newShape = rand() % 7;
  mCurrentShape = mShapeArray[newShape];
  aTRS_ENG_returnShapeCursorHome();

  for (uint8_t nRow = 0; nRow < 4; nRow++)
     f20:	df 5f       	subi	r29, 0xFF	; 255
     f22:	fc e1       	ldi	r31, 0x1C	; 28
     f24:	cf 0e       	add	r12, r31
     f26:	d1 1c       	adc	r13, r1
     f28:	d4 30       	cpi	r29, 0x04	; 4
     f2a:	19 f0       	breq	.+6      	; 0xf32 <aTRS_ENG_GenerateNewShape+0xaa>
                        TetrisFrame.frame_y2 + TetrisFrame.frame_thickness,
                        TetrisFrame.frame_colour);
}

uint8_t* aTRS_ENG_GenerateNewShape(void)
{
     f2c:	86 01       	movw	r16, r12
     f2e:	c0 e0       	ldi	r28, 0x00	; 0
     f30:	e1 cf       	rjmp	.-62     	; 0xef4 <aTRS_ENG_GenerateNewShape+0x6c>
     f32:	f0 92 0d 02 	sts	0x020D, r15	; 0x80020d <mCurrentShape+0x1>
     f36:	e0 92 0c 02 	sts	0x020C, r14	; 0x80020c <mCurrentShape>
    }
  }

  
  return mCurrentShape;
}
     f3a:	c7 01       	movw	r24, r14
     f3c:	df 91       	pop	r29
     f3e:	cf 91       	pop	r28
     f40:	1f 91       	pop	r17
     f42:	0f 91       	pop	r16
     f44:	ff 90       	pop	r15
     f46:	ef 90       	pop	r14
     f48:	df 90       	pop	r13
     f4a:	cf 90       	pop	r12
     f4c:	bf 90       	pop	r11
     f4e:	af 90       	pop	r10
     f50:	9f 90       	pop	r9
     f52:	08 95       	ret

00000f54 <aTRS_ENG_ShapeShiftUp>:
}

void aTRS_ENG_ShapeShiftUp(void)
{
  mPreviousCursor = mShapeCursor;
  mShapeCursor.row--;
     f54:	e9 e0       	ldi	r30, 0x09	; 9
     f56:	f2 e0       	ldi	r31, 0x02	; 2
     f58:	80 81       	ld	r24, Z
     f5a:	81 50       	subi	r24, 0x01	; 1
     f5c:	80 83       	st	Z, r24
     f5e:	08 95       	ret

00000f60 <aTRS_ENG_ShapeShiftDown>:
}

void aTRS_ENG_ShapeShiftDown(void)
{
  mPreviousCursor = mShapeCursor;
  mShapeCursor.row++;
     f60:	e9 e0       	ldi	r30, 0x09	; 9
     f62:	f2 e0       	ldi	r31, 0x02	; 2
     f64:	80 81       	ld	r24, Z
     f66:	8f 5f       	subi	r24, 0xFF	; 255
     f68:	80 83       	st	Z, r24
     f6a:	08 95       	ret

00000f6c <aTRS_ENG_ShapeShiftRight>:
}

void aTRS_ENG_ShapeShiftRight(void)
{
  mPreviousCursor = mShapeCursor;
  mShapeCursor.col++;
     f6c:	e9 e0       	ldi	r30, 0x09	; 9
     f6e:	f2 e0       	ldi	r31, 0x02	; 2
     f70:	81 81       	ldd	r24, Z+1	; 0x01
     f72:	8f 5f       	subi	r24, 0xFF	; 255
     f74:	81 83       	std	Z+1, r24	; 0x01
     f76:	08 95       	ret

00000f78 <aTRS_ENG_ShapeShiftLeft>:
}

void aTRS_ENG_ShapeShiftLeft(void)
{
  mPreviousCursor = mShapeCursor;
  mShapeCursor.col--;
     f78:	e9 e0       	ldi	r30, 0x09	; 9
     f7a:	f2 e0       	ldi	r31, 0x02	; 2
     f7c:	81 81       	ldd	r24, Z+1	; 0x01
     f7e:	81 50       	subi	r24, 0x01	; 1
     f80:	81 83       	std	Z+1, r24	; 0x01
     f82:	08 95       	ret

00000f84 <aTRS_ENG_ShapeRotate>:
}

void aTRS_ENG_ShapeRotate(void)
{
  mPreviousCursor = mShapeCursor;
  mShapeCursor.rot++;
     f84:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <mShapeCursor+0x2>
     f88:	8f 5f       	subi	r24, 0xFF	; 255
  if (mShapeCursor.rot >= 4) 
     f8a:	84 30       	cpi	r24, 0x04	; 4
     f8c:	18 f4       	brcc	.+6      	; 0xf94 <aTRS_ENG_ShapeRotate+0x10>
}

void aTRS_ENG_ShapeRotate(void)
{
  mPreviousCursor = mShapeCursor;
  mShapeCursor.rot++;
     f8e:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <mShapeCursor+0x2>
     f92:	08 95       	ret
  if (mShapeCursor.rot >= 4) 
  {
    mShapeCursor.rot = 0;
     f94:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <mShapeCursor+0x2>
     f98:	08 95       	ret

00000f9a <aTRS_ENG_drawCurrentShape>:
  }
}

void aTRS_ENG_drawCurrentShape(uint16_t colour)
{
     f9a:	2f 92       	push	r2
     f9c:	3f 92       	push	r3
     f9e:	4f 92       	push	r4
     fa0:	5f 92       	push	r5
     fa2:	6f 92       	push	r6
     fa4:	7f 92       	push	r7
     fa6:	8f 92       	push	r8
     fa8:	9f 92       	push	r9
     faa:	af 92       	push	r10
     fac:	bf 92       	push	r11
     fae:	cf 92       	push	r12
     fb0:	df 92       	push	r13
     fb2:	ef 92       	push	r14
     fb4:	ff 92       	push	r15
     fb6:	0f 93       	push	r16
     fb8:	1f 93       	push	r17
     fba:	cf 93       	push	r28
     fbc:	df 93       	push	r29
  
  uint8_t rowPos = mShapeCursor.row;
     fbe:	e9 e0       	ldi	r30, 0x09	; 9
     fc0:	f2 e0       	ldi	r31, 0x02	; 2
     fc2:	50 80       	ld	r5, Z
  uint8_t colPos = mShapeCursor.col;
     fc4:	71 80       	ldd	r7, Z+1	; 0x01
     fc6:	c1 2c       	mov	r12, r1
     fc8:	d1 2c       	mov	r13, r1
  
  for (uint8_t i = 0; i < 4; i++)
  {
    for (uint8_t j = 0; j < 4; j++)
    {
      if (mCurrentShape[Rotate(j, i, mShapeCursor.rot)]) mColour = colour;
     fca:	7f 01       	movw	r14, r30
      else mColour = BLACK;
     fcc:	21 2c       	mov	r2, r1
  
  for (uint8_t i = 0; i < 4; i++)
  {
    for (uint8_t j = 0; j < 4; j++)
    {
      if (mCurrentShape[Rotate(j, i, mShapeCursor.rot)]) mColour = colour;
     fce:	48 2e       	mov	r4, r24
     fd0:	39 2e       	mov	r3, r25
     fd2:	59 c0       	rjmp	.+178    	; 0x1086 <aTRS_ENG_drawCurrentShape+0xec>
     fd4:	00 91 0c 02 	lds	r16, 0x020C	; 0x80020c <mCurrentShape>
     fd8:	10 91 0d 02 	lds	r17, 0x020D	; 0x80020d <mCurrentShape+0x1>
     fdc:	f7 01       	movw	r30, r14
     fde:	42 81       	ldd	r20, Z+2	; 0x02
     fe0:	66 2d       	mov	r22, r6
     fe2:	8c 2f       	mov	r24, r28
     fe4:	11 df       	rcall	.-478    	; 0xe08 <Rotate>
     fe6:	f8 01       	movw	r30, r16
     fe8:	e8 0f       	add	r30, r24
     fea:	f1 1d       	adc	r31, r1
     fec:	80 81       	ld	r24, Z
     fee:	88 23       	and	r24, r24
     ff0:	19 f0       	breq	.+6      	; 0xff8 <aTRS_ENG_drawCurrentShape+0x5e>
     ff2:	04 2d       	mov	r16, r4
     ff4:	13 2d       	mov	r17, r3
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <aTRS_ENG_drawCurrentShape+0x62>
      else mColour = BLACK;
     ff8:	00 e0       	ldi	r16, 0x00	; 0
     ffa:	12 2d       	mov	r17, r2

      if ((mShapeCursor.col + j >= 0) && (mShapeCursor.col + j < SCREEN_WIDTH) && (mShapeCursor.row + i < SCREEN_HEIGHT) && (mShapeCursor.row + i >= 0)) //Check if shape is out of field
     ffc:	f7 01       	movw	r30, r14
     ffe:	81 81       	ldd	r24, Z+1	; 0x01
    1000:	9e 01       	movw	r18, r28
    1002:	28 0f       	add	r18, r24
    1004:	31 1d       	adc	r19, r1
    1006:	87 fd       	sbrc	r24, 7
    1008:	3a 95       	dec	r19
    100a:	c9 01       	movw	r24, r18
    100c:	2e 30       	cpi	r18, 0x0E	; 14
    100e:	31 05       	cpc	r19, r1
    1010:	50 f5       	brcc	.+84     	; 0x1066 <aTRS_ENG_drawCurrentShape+0xcc>
    1012:	20 81       	ld	r18, Z
    1014:	a6 01       	movw	r20, r12
    1016:	42 0f       	add	r20, r18
    1018:	51 1d       	adc	r21, r1
    101a:	27 fd       	sbrc	r18, 7
    101c:	5a 95       	dec	r21
    101e:	9a 01       	movw	r18, r20
    1020:	44 31       	cpi	r20, 0x14	; 20
    1022:	51 05       	cpc	r21, r1
    1024:	00 f5       	brcc	.+64     	; 0x1066 <aTRS_ENG_drawCurrentShape+0xcc>
      {
        if (field[(mShapeCursor.row + i) * SCREEN_WIDTH + (mShapeCursor.col + j)] == 0) //Check if field pos is blank
    1026:	22 0f       	add	r18, r18
    1028:	33 1f       	adc	r19, r19
    102a:	f9 01       	movw	r30, r18
    102c:	ee 0f       	add	r30, r30
    102e:	ff 1f       	adc	r31, r31
    1030:	ee 0f       	add	r30, r30
    1032:	ff 1f       	adc	r31, r31
    1034:	ee 0f       	add	r30, r30
    1036:	ff 1f       	adc	r31, r31
    1038:	e2 1b       	sub	r30, r18
    103a:	f3 0b       	sbc	r31, r19
    103c:	e8 0f       	add	r30, r24
    103e:	f9 1f       	adc	r31, r25
    1040:	ee 0f       	add	r30, r30
    1042:	ff 1f       	adc	r31, r31
    1044:	ee 54       	subi	r30, 0x4E	; 78
    1046:	f7 4f       	sbci	r31, 0xF7	; 247
    1048:	80 81       	ld	r24, Z
    104a:	91 81       	ldd	r25, Z+1	; 0x01
    104c:	89 2b       	or	r24, r25
    104e:	59 f4       	brne	.+22     	; 0x1066 <aTRS_ENG_drawCurrentShape+0xcc>

static __unitBlockPos getUnitBlockPos(uint8_t row, uint8_t col)
{
  __unitBlockPos blockPos =
  {
    .unitBlock_x1 = 11 +(col*UNIT_BLOCK_SIZE + col) + 1,
    1050:	5f e0       	ldi	r21, 0x0F	; 15
    1052:	57 9d       	mul	r21, r7
    1054:	c0 01       	movw	r24, r0
    1056:	11 24       	eor	r1, r1
      {
        if (field[(mShapeCursor.row + i) * SCREEN_WIDTH + (mShapeCursor.col + j)] == 0) //Check if field pos is blank
        {
            blockPos = getUnitBlockPos(rowPos, colPos) ;
            
            LCD_GUI_DrawFillRectangle(blockPos.unitBlock_x1,
    1058:	ac 01       	movw	r20, r24
    105a:	47 5e       	subi	r20, 0xE7	; 231
    105c:	5f 4f       	sbci	r21, 0xFF	; 255
    105e:	94 01       	movw	r18, r8
    1060:	b5 01       	movw	r22, r10
    1062:	0c 96       	adiw	r24, 0x0c	; 12
    1064:	42 dc       	rcall	.-1916   	; 0x8ea <LCD_GUI_DrawFillRectangle>
                                      blockPos.unitBlock_y2,
                                      mColour);
        }
      }

      colPos++;
    1066:	73 94       	inc	r7
    1068:	21 96       	adiw	r28, 0x01	; 1
  __unitBlockPos blockPos;
  uint16_t mColour;
  
  for (uint8_t i = 0; i < 4; i++)
  {
    for (uint8_t j = 0; j < 4; j++)
    106a:	c4 30       	cpi	r28, 0x04	; 4
    106c:	d1 05       	cpc	r29, r1
    106e:	09 f0       	breq	.+2      	; 0x1072 <aTRS_ENG_drawCurrentShape+0xd8>
    1070:	b1 cf       	rjmp	.-158    	; 0xfd4 <aTRS_ENG_drawCurrentShape+0x3a>
        }
      }

      colPos++;
    }
    colPos = mShapeCursor.col;
    1072:	f7 01       	movw	r30, r14
    1074:	71 80       	ldd	r7, Z+1	; 0x01
    rowPos++;
    1076:	53 94       	inc	r5
    1078:	ff ef       	ldi	r31, 0xFF	; 255
    107a:	cf 1a       	sub	r12, r31
    107c:	df 0a       	sbc	r13, r31
  uint8_t colPos = mShapeCursor.col;
  
  __unitBlockPos blockPos;
  uint16_t mColour;
  
  for (uint8_t i = 0; i < 4; i++)
    107e:	24 e0       	ldi	r18, 0x04	; 4
    1080:	c2 16       	cp	r12, r18
    1082:	d1 04       	cpc	r13, r1
    1084:	79 f0       	breq	.+30     	; 0x10a4 <aTRS_ENG_drawCurrentShape+0x10a>
    1086:	6c 2c       	mov	r6, r12
static __unitBlockPos getUnitBlockPos(uint8_t row, uint8_t col)
{
  __unitBlockPos blockPos =
  {
    .unitBlock_x1 = 11 +(col*UNIT_BLOCK_SIZE + col) + 1,
    .unitBlock_y1 = 9 + (row*UNIT_BLOCK_SIZE + row) + 1,
    1088:	3f e0       	ldi	r19, 0x0F	; 15
    108a:	35 9d       	mul	r19, r5
    108c:	40 01       	movw	r8, r0
    108e:	11 24       	eor	r1, r1
  return tmp;
}

static __unitBlockPos getUnitBlockPos(uint8_t row, uint8_t col)
{
  __unitBlockPos blockPos =
    1090:	54 01       	movw	r10, r8
    1092:	4a e0       	ldi	r20, 0x0A	; 10
    1094:	a4 0e       	add	r10, r20
    1096:	b1 1c       	adc	r11, r1
    1098:	57 e1       	ldi	r21, 0x17	; 23
    109a:	85 0e       	add	r8, r21
    109c:	91 1c       	adc	r9, r1
    109e:	c0 e0       	ldi	r28, 0x00	; 0
    10a0:	d0 e0       	ldi	r29, 0x00	; 0
    10a2:	98 cf       	rjmp	.-208    	; 0xfd4 <aTRS_ENG_drawCurrentShape+0x3a>
    }
    colPos = mShapeCursor.col;
    rowPos++;
  }
  aTRS_ENG_moveShapeCursor(mShapeCursor.row, mShapeCursor.col);
}
    10a4:	df 91       	pop	r29
    10a6:	cf 91       	pop	r28
    10a8:	1f 91       	pop	r17
    10aa:	0f 91       	pop	r16
    10ac:	ff 90       	pop	r15
    10ae:	ef 90       	pop	r14
    10b0:	df 90       	pop	r13
    10b2:	cf 90       	pop	r12
    10b4:	bf 90       	pop	r11
    10b6:	af 90       	pop	r10
    10b8:	9f 90       	pop	r9
    10ba:	8f 90       	pop	r8
    10bc:	7f 90       	pop	r7
    10be:	6f 90       	pop	r6
    10c0:	5f 90       	pop	r5
    10c2:	4f 90       	pop	r4
    10c4:	3f 90       	pop	r3
    10c6:	2f 90       	pop	r2
    10c8:	08 95       	ret

000010ca <aTRS_ENG_AttachToField>:

void aTRS_ENG_AttachToField(void)
{
    10ca:	2f 92       	push	r2
    10cc:	3f 92       	push	r3
    10ce:	4f 92       	push	r4
    10d0:	5f 92       	push	r5
    10d2:	6f 92       	push	r6
    10d4:	7f 92       	push	r7
    10d6:	8f 92       	push	r8
    10d8:	9f 92       	push	r9
    10da:	af 92       	push	r10
    10dc:	bf 92       	push	r11
    10de:	cf 92       	push	r12
    10e0:	df 92       	push	r13
    10e2:	ef 92       	push	r14
    10e4:	ff 92       	push	r15
    10e6:	0f 93       	push	r16
    10e8:	1f 93       	push	r17
    10ea:	cf 93       	push	r28
    10ec:	df 93       	push	r29
    10ee:	e1 2c       	mov	r14, r1
    10f0:	f1 2c       	mov	r15, r1
  __unitBlockPos blockPos;
  for (uint8_t nRow = 0; nRow < 4; nRow++)
  {
    for (uint8_t nCol= 0; nCol < 4; nCol++)
    {
      if ((mShapeCursor.row + nRow < SCREEN_HEIGHT) && 
    10f2:	0f 2e       	mov	r0, r31
    10f4:	f9 e0       	ldi	r31, 0x09	; 9
    10f6:	cf 2e       	mov	r12, r31
    10f8:	f2 e0       	ldi	r31, 0x02	; 2
    10fa:	df 2e       	mov	r13, r31
    10fc:	f0 2d       	mov	r31, r0
    10fe:	5e c0       	rjmp	.+188    	; 0x11bc <aTRS_ENG_AttachToField+0xf2>
    1100:	3c 2e       	mov	r3, r28
    1102:	f6 01       	movw	r30, r12
    1104:	50 80       	ld	r5, Z
    1106:	87 01       	movw	r16, r14
    1108:	05 0d       	add	r16, r5
    110a:	11 1d       	adc	r17, r1
    110c:	57 fc       	sbrc	r5, 7
    110e:	1a 95       	dec	r17
    1110:	04 31       	cpi	r16, 0x14	; 20
    1112:	11 05       	cpc	r17, r1
    1114:	0c f0       	brlt	.+2      	; 0x1118 <aTRS_ENG_AttachToField+0x4e>
    1116:	46 c0       	rjmp	.+140    	; 0x11a4 <aTRS_ENG_AttachToField+0xda>
          (mShapeCursor.col + nCol < SCREEN_WIDTH)  && 
    1118:	21 80       	ldd	r2, Z+1	; 0x01
    111a:	82 2c       	mov	r8, r2
    111c:	02 2c       	mov	r0, r2
    111e:	00 0c       	add	r0, r0
    1120:	99 08       	sbc	r9, r9
    1122:	3e 01       	movw	r6, r28
  __unitBlockPos blockPos;
  for (uint8_t nRow = 0; nRow < 4; nRow++)
  {
    for (uint8_t nCol= 0; nCol < 4; nCol++)
    {
      if ((mShapeCursor.row + nRow < SCREEN_HEIGHT) && 
    1124:	c4 01       	movw	r24, r8
    1126:	8c 0f       	add	r24, r28
    1128:	9d 1f       	adc	r25, r29
    112a:	0e 97       	sbiw	r24, 0x0e	; 14
    112c:	d8 f5       	brcc	.+118    	; 0x11a4 <aTRS_ENG_AttachToField+0xda>
          (mShapeCursor.col + nCol < SCREEN_WIDTH)  && 
          (mShapeCursor.col + nCol >= 0) && 
          (mCurrentShape[Rotate(nCol, nRow, mShapeCursor.rot)] != 0))
    112e:	a0 90 0c 02 	lds	r10, 0x020C	; 0x80020c <mCurrentShape>
    1132:	b0 90 0d 02 	lds	r11, 0x020D	; 0x80020d <mCurrentShape+0x1>
    1136:	42 81       	ldd	r20, Z+2	; 0x02
    1138:	64 2d       	mov	r22, r4
    113a:	8c 2f       	mov	r24, r28
    113c:	65 de       	rcall	.-822    	; 0xe08 <Rotate>
    113e:	f5 01       	movw	r30, r10
    1140:	e8 0f       	add	r30, r24
    1142:	f1 1d       	adc	r31, r1
  {
    for (uint8_t nCol= 0; nCol < 4; nCol++)
    {
      if ((mShapeCursor.row + nRow < SCREEN_HEIGHT) && 
          (mShapeCursor.col + nCol < SCREEN_WIDTH)  && 
          (mShapeCursor.col + nCol >= 0) && 
    1144:	80 81       	ld	r24, Z
    1146:	88 23       	and	r24, r24
    1148:	69 f1       	breq	.+90     	; 0x11a4 <aTRS_ENG_AttachToField+0xda>
          (mCurrentShape[Rotate(nCol, nRow, mShapeCursor.rot)] != 0))
      {
        field[(mShapeCursor.row + nRow)* SCREEN_WIDTH + mShapeCursor.col+ nCol] = 1;
    114a:	00 0f       	add	r16, r16
    114c:	11 1f       	adc	r17, r17
    114e:	c8 01       	movw	r24, r16
    1150:	88 0f       	add	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	88 0f       	add	r24, r24
    1156:	99 1f       	adc	r25, r25
    1158:	88 0f       	add	r24, r24
    115a:	99 1f       	adc	r25, r25
    115c:	80 1b       	sub	r24, r16
    115e:	91 0b       	sbc	r25, r17
    1160:	88 0e       	add	r8, r24
    1162:	99 1e       	adc	r9, r25
    1164:	86 0c       	add	r8, r6
    1166:	97 1c       	adc	r9, r7
    1168:	f4 01       	movw	r30, r8
    116a:	ee 0f       	add	r30, r30
    116c:	ff 1f       	adc	r31, r31
    116e:	ee 54       	subi	r30, 0x4E	; 78
    1170:	f7 4f       	sbci	r31, 0xF7	; 247
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	91 83       	std	Z+1, r25	; 0x01
    1178:	80 83       	st	Z, r24

static __unitBlockPos getUnitBlockPos(uint8_t row, uint8_t col)
{
  __unitBlockPos blockPos =
  {
    .unitBlock_x1 = 11 +(col*UNIT_BLOCK_SIZE + col) + 1,
    117a:	32 0c       	add	r3, r2
    117c:	ef e0       	ldi	r30, 0x0F	; 15
    117e:	e3 9d       	mul	r30, r3
    1180:	c0 01       	movw	r24, r0
    1182:	11 24       	eor	r1, r1
    .unitBlock_y1 = 9 + (row*UNIT_BLOCK_SIZE + row) + 1,
    1184:	54 0c       	add	r5, r4
    1186:	e5 9d       	mul	r30, r5
    1188:	b0 01       	movw	r22, r0
    118a:	11 24       	eor	r1, r1
          (mShapeCursor.col + nCol >= 0) && 
          (mCurrentShape[Rotate(nCol, nRow, mShapeCursor.rot)] != 0))
      {
        field[(mShapeCursor.row + nRow)* SCREEN_WIDTH + mShapeCursor.col+ nCol] = 1;
        blockPos = getUnitBlockPos(mShapeCursor.row + nRow, mShapeCursor.col+ nCol) ;
        LCD_GUI_DrawFillRectangle(blockPos.unitBlock_x1,
    118c:	9b 01       	movw	r18, r22
    118e:	29 5e       	subi	r18, 0xE9	; 233
    1190:	3f 4f       	sbci	r19, 0xFF	; 255
    1192:	ac 01       	movw	r20, r24
    1194:	47 5e       	subi	r20, 0xE7	; 231
    1196:	5f 4f       	sbci	r21, 0xFF	; 255
    1198:	66 5f       	subi	r22, 0xF6	; 246
    119a:	7f 4f       	sbci	r23, 0xFF	; 255
    119c:	00 e0       	ldi	r16, 0x00	; 0
    119e:	18 ef       	ldi	r17, 0xF8	; 248
    11a0:	0c 96       	adiw	r24, 0x0c	; 12
    11a2:	a3 db       	rcall	.-2234   	; 0x8ea <LCD_GUI_DrawFillRectangle>
    11a4:	21 96       	adiw	r28, 0x01	; 1
void aTRS_ENG_AttachToField(void)
{
  __unitBlockPos blockPos;
  for (uint8_t nRow = 0; nRow < 4; nRow++)
  {
    for (uint8_t nCol= 0; nCol < 4; nCol++)
    11a6:	c4 30       	cpi	r28, 0x04	; 4
    11a8:	d1 05       	cpc	r29, r1
    11aa:	09 f0       	breq	.+2      	; 0x11ae <aTRS_ENG_AttachToField+0xe4>
    11ac:	a9 cf       	rjmp	.-174    	; 0x1100 <aTRS_ENG_AttachToField+0x36>
    11ae:	ff ef       	ldi	r31, 0xFF	; 255
    11b0:	ef 1a       	sub	r14, r31
    11b2:	ff 0a       	sbc	r15, r31
}

void aTRS_ENG_AttachToField(void)
{
  __unitBlockPos blockPos;
  for (uint8_t nRow = 0; nRow < 4; nRow++)
    11b4:	24 e0       	ldi	r18, 0x04	; 4
    11b6:	e2 16       	cp	r14, r18
    11b8:	f1 04       	cpc	r15, r1
    11ba:	21 f0       	breq	.+8      	; 0x11c4 <aTRS_ENG_AttachToField+0xfa>
    11bc:	4e 2c       	mov	r4, r14
  }
  aTRS_ENG_moveShapeCursor(mShapeCursor.row, mShapeCursor.col);
}

void aTRS_ENG_AttachToField(void)
{
    11be:	c0 e0       	ldi	r28, 0x00	; 0
    11c0:	d0 e0       	ldi	r29, 0x00	; 0
    11c2:	9e cf       	rjmp	.-196    	; 0x1100 <aTRS_ENG_AttachToField+0x36>
                                  blockPos.unitBlock_y2,
                                  RED);
      }
    }
  }
}
    11c4:	df 91       	pop	r29
    11c6:	cf 91       	pop	r28
    11c8:	1f 91       	pop	r17
    11ca:	0f 91       	pop	r16
    11cc:	ff 90       	pop	r15
    11ce:	ef 90       	pop	r14
    11d0:	df 90       	pop	r13
    11d2:	cf 90       	pop	r12
    11d4:	bf 90       	pop	r11
    11d6:	af 90       	pop	r10
    11d8:	9f 90       	pop	r9
    11da:	8f 90       	pop	r8
    11dc:	7f 90       	pop	r7
    11de:	6f 90       	pop	r6
    11e0:	5f 90       	pop	r5
    11e2:	4f 90       	pop	r4
    11e4:	3f 90       	pop	r3
    11e6:	2f 90       	pop	r2
    11e8:	08 95       	ret

000011ea <aTRS_ENG_BoundaryCheck_Translate>:

/*
 * Boundary Checks
 */
bool aTRS_ENG_BoundaryCheck_Translate(uint8_t direction)
{
    11ea:	6f 92       	push	r6
    11ec:	7f 92       	push	r7
    11ee:	8f 92       	push	r8
    11f0:	9f 92       	push	r9
    11f2:	af 92       	push	r10
    11f4:	bf 92       	push	r11
    11f6:	cf 92       	push	r12
    11f8:	df 92       	push	r13
    11fa:	ef 92       	push	r14
    11fc:	ff 92       	push	r15
    11fe:	0f 93       	push	r16
    1200:	1f 93       	push	r17
    1202:	cf 93       	push	r28
    1204:	df 93       	push	r29
  __shapeCursor tmpShapeCursor = mShapeCursor;
    1206:	e9 e0       	ldi	r30, 0x09	; 9
    1208:	f2 e0       	ldi	r31, 0x02	; 2
    120a:	a0 80       	ld	r10, Z
    120c:	61 80       	ldd	r6, Z+1	; 0x01

  switch (direction)
    120e:	81 30       	cpi	r24, 0x01	; 1
    1210:	41 f0       	breq	.+16     	; 0x1222 <aTRS_ENG_BoundaryCheck_Translate+0x38>
    1212:	28 f0       	brcs	.+10     	; 0x121e <aTRS_ENG_BoundaryCheck_Translate+0x34>
    1214:	82 30       	cpi	r24, 0x02	; 2
    1216:	39 f0       	breq	.+14     	; 0x1226 <aTRS_ENG_BoundaryCheck_Translate+0x3c>
    1218:	83 30       	cpi	r24, 0x03	; 3
    121a:	39 f0       	breq	.+14     	; 0x122a <aTRS_ENG_BoundaryCheck_Translate+0x40>
    121c:	07 c0       	rjmp	.+14     	; 0x122c <aTRS_ENG_BoundaryCheck_Translate+0x42>
  {
    case 0:
      tmpShapeCursor.row--;
    121e:	aa 94       	dec	r10
      break;
    1220:	05 c0       	rjmp	.+10     	; 0x122c <aTRS_ENG_BoundaryCheck_Translate+0x42>
    case 1:
      tmpShapeCursor.col++;
    1222:	63 94       	inc	r6
      break;
    1224:	03 c0       	rjmp	.+6      	; 0x122c <aTRS_ENG_BoundaryCheck_Translate+0x42>
    case 2:
      tmpShapeCursor.row++;
    1226:	a3 94       	inc	r10
      break;
    1228:	01 c0       	rjmp	.+2      	; 0x122c <aTRS_ENG_BoundaryCheck_Translate+0x42>
    case 3:
      tmpShapeCursor.col--;
    122a:	6a 94       	dec	r6
  for (uint8_t nRow = 0; nRow < 4; nRow++)
  {
    for (uint8_t nCol = 0; nCol < 4; nCol++)
    {
      //Check if exceed game frame
      if ((mCurrentShape[Rotate(nCol, nRow, mShapeCursor.rot)] != 0)
    122c:	80 90 0c 02 	lds	r8, 0x020C	; 0x80020c <mCurrentShape>
    1230:	90 90 0d 02 	lds	r9, 0x020D	; 0x80020d <mCurrentShape+0x1>
    1234:	70 90 0b 02 	lds	r7, 0x020B	; 0x80020b <mShapeCursor+0x2>
    1238:	0a 2c       	mov	r0, r10
    123a:	00 0c       	add	r0, r0
    123c:	bb 08       	sbc	r11, r11
    123e:	c5 01       	movw	r24, r10
    1240:	88 0f       	add	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	6c 01       	movw	r12, r24
    1246:	cc 0c       	add	r12, r12
    1248:	dd 1c       	adc	r13, r13
    124a:	cc 0c       	add	r12, r12
    124c:	dd 1c       	adc	r13, r13
    124e:	cc 0c       	add	r12, r12
    1250:	dd 1c       	adc	r13, r13
    1252:	c8 1a       	sub	r12, r24
    1254:	d9 0a       	sbc	r13, r25
    1256:	c6 0c       	add	r12, r6
    1258:	d1 1c       	adc	r13, r1
    125a:	67 fc       	sbrc	r6, 7
    125c:	da 94       	dec	r13
    125e:	c6 01       	movw	r24, r12
    1260:	88 0f       	add	r24, r24
    1262:	99 1f       	adc	r25, r25
    1264:	9c 01       	movw	r18, r24
    1266:	2e 54       	subi	r18, 0x4E	; 78
    1268:	37 4f       	sbci	r19, 0xF7	; 247
    126a:	69 01       	movw	r12, r18
      break;
    default:
    break;
  }

  for (uint8_t nRow = 0; nRow < 4; nRow++)
    126c:	d0 e0       	ldi	r29, 0x00	; 0
    126e:	27 c0       	rjmp	.+78     	; 0x12be <aTRS_ENG_BoundaryCheck_Translate+0xd4>
  {
    for (uint8_t nCol = 0; nCol < 4; nCol++)
    {
      //Check if exceed game frame
      if ((mCurrentShape[Rotate(nCol, nRow, mShapeCursor.rot)] != 0)
    1270:	47 2d       	mov	r20, r7
    1272:	6d 2f       	mov	r22, r29
    1274:	8c 2f       	mov	r24, r28
    1276:	c8 dd       	rcall	.-1136   	; 0xe08 <Rotate>
    1278:	f4 01       	movw	r30, r8
    127a:	e8 0f       	add	r30, r24
    127c:	f1 1d       	adc	r31, r1
    127e:	80 81       	ld	r24, Z
    1280:	88 23       	and	r24, r24
    1282:	61 f0       	breq	.+24     	; 0x129c <aTRS_ENG_BoundaryCheck_Translate+0xb2>
      && ((tmpShapeCursor.col + nCol < 0) || (tmpShapeCursor.col + nCol > SCREEN_WIDTH - 1) || (tmpShapeCursor.row + nRow < 0) || (tmpShapeCursor.row + nRow > SCREEN_HEIGHT -1)))
    1284:	0e 30       	cpi	r16, 0x0E	; 14
    1286:	11 05       	cpc	r17, r1
    1288:	08 f5       	brcc	.+66     	; 0x12cc <aTRS_ENG_BoundaryCheck_Translate+0xe2>
    128a:	34 e1       	ldi	r19, 0x14	; 20
    128c:	a3 16       	cp	r10, r19
    128e:	b1 04       	cpc	r11, r1
    1290:	f8 f4       	brcc	.+62     	; 0x12d0 <aTRS_ENG_BoundaryCheck_Translate+0xe6>
      {
        return false;
      }

      //Check if stopped by piled up shapes
      if ((mCurrentShape[Rotate(nCol, nRow, mShapeCursor.rot)] != 0) && (field[(tmpShapeCursor.row + nRow)  * SCREEN_WIDTH + tmpShapeCursor.col + nCol] !=0))
    1292:	f7 01       	movw	r30, r14
    1294:	80 81       	ld	r24, Z
    1296:	91 81       	ldd	r25, Z+1	; 0x01
    1298:	89 2b       	or	r24, r25
    129a:	e1 f4       	brne	.+56     	; 0x12d4 <aTRS_ENG_BoundaryCheck_Translate+0xea>
    break;
  }

  for (uint8_t nRow = 0; nRow < 4; nRow++)
  {
    for (uint8_t nCol = 0; nCol < 4; nCol++)
    129c:	cf 5f       	subi	r28, 0xFF	; 255
    129e:	f2 e0       	ldi	r31, 0x02	; 2
    12a0:	ef 0e       	add	r14, r31
    12a2:	f1 1c       	adc	r15, r1
    12a4:	0f 5f       	subi	r16, 0xFF	; 255
    12a6:	1f 4f       	sbci	r17, 0xFF	; 255
    12a8:	c4 30       	cpi	r28, 0x04	; 4
    12aa:	11 f7       	brne	.-60     	; 0x1270 <aTRS_ENG_BoundaryCheck_Translate+0x86>
      break;
    default:
    break;
  }

  for (uint8_t nRow = 0; nRow < 4; nRow++)
    12ac:	df 5f       	subi	r29, 0xFF	; 255
    12ae:	2c e1       	ldi	r18, 0x1C	; 28
    12b0:	c2 0e       	add	r12, r18
    12b2:	d1 1c       	adc	r13, r1
    12b4:	3f ef       	ldi	r19, 0xFF	; 255
    12b6:	a3 1a       	sub	r10, r19
    12b8:	b3 0a       	sbc	r11, r19
    12ba:	d4 30       	cpi	r29, 0x04	; 4
    12bc:	69 f0       	breq	.+26     	; 0x12d8 <aTRS_ENG_BoundaryCheck_Translate+0xee>
    12be:	06 2d       	mov	r16, r6
    12c0:	06 2c       	mov	r0, r6
    12c2:	00 0c       	add	r0, r0
    12c4:	11 0b       	sbc	r17, r17

/*
 * Boundary Checks
 */
bool aTRS_ENG_BoundaryCheck_Translate(uint8_t direction)
{
    12c6:	76 01       	movw	r14, r12
    12c8:	c0 e0       	ldi	r28, 0x00	; 0
    12ca:	d2 cf       	rjmp	.-92     	; 0x1270 <aTRS_ENG_BoundaryCheck_Translate+0x86>
    {
      //Check if exceed game frame
      if ((mCurrentShape[Rotate(nCol, nRow, mShapeCursor.rot)] != 0)
      && ((tmpShapeCursor.col + nCol < 0) || (tmpShapeCursor.col + nCol > SCREEN_WIDTH - 1) || (tmpShapeCursor.row + nRow < 0) || (tmpShapeCursor.row + nRow > SCREEN_HEIGHT -1)))
      {
        return false;
    12cc:	80 e0       	ldi	r24, 0x00	; 0
    12ce:	05 c0       	rjmp	.+10     	; 0x12da <aTRS_ENG_BoundaryCheck_Translate+0xf0>
    12d0:	80 e0       	ldi	r24, 0x00	; 0
    12d2:	03 c0       	rjmp	.+6      	; 0x12da <aTRS_ENG_BoundaryCheck_Translate+0xf0>
      }

      //Check if stopped by piled up shapes
      if ((mCurrentShape[Rotate(nCol, nRow, mShapeCursor.rot)] != 0) && (field[(tmpShapeCursor.row + nRow)  * SCREEN_WIDTH + tmpShapeCursor.col + nCol] !=0))
      {
        return false;
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	01 c0       	rjmp	.+2      	; 0x12da <aTRS_ENG_BoundaryCheck_Translate+0xf0>
      }
    }
  }
  return true;
    12d8:	81 e0       	ldi	r24, 0x01	; 1
}
    12da:	df 91       	pop	r29
    12dc:	cf 91       	pop	r28
    12de:	1f 91       	pop	r17
    12e0:	0f 91       	pop	r16
    12e2:	ff 90       	pop	r15
    12e4:	ef 90       	pop	r14
    12e6:	df 90       	pop	r13
    12e8:	cf 90       	pop	r12
    12ea:	bf 90       	pop	r11
    12ec:	af 90       	pop	r10
    12ee:	9f 90       	pop	r9
    12f0:	8f 90       	pop	r8
    12f2:	7f 90       	pop	r7
    12f4:	6f 90       	pop	r6
    12f6:	08 95       	ret

000012f8 <aTRS_ENG_BoundaryCheck_Rotate>:

bool aTRS_ENG_BoundaryCheck_Rotate(void)
{
    12f8:	af 92       	push	r10
    12fa:	bf 92       	push	r11
    12fc:	cf 92       	push	r12
    12fe:	df 92       	push	r13
    1300:	ef 92       	push	r14
    1302:	ff 92       	push	r15
    1304:	0f 93       	push	r16
    1306:	1f 93       	push	r17
    1308:	cf 93       	push	r28
    130a:	df 93       	push	r29
  __shapeCursor tmpShapeCursor = mShapeCursor;
    130c:	e9 e0       	ldi	r30, 0x09	; 9
    130e:	f2 e0       	ldi	r31, 0x02	; 2
    1310:	e0 80       	ld	r14, Z
    1312:	a1 80       	ldd	r10, Z+1	; 0x01
    1314:	82 81       	ldd	r24, Z+2	; 0x02
  tmpShapeCursor.rot++;
    1316:	bb 24       	eor	r11, r11
    1318:	b3 94       	inc	r11
    131a:	b8 0e       	add	r11, r24
  if (mShapeCursor.rot >= 4) mShapeCursor.rot = 0;
    131c:	84 30       	cpi	r24, 0x04	; 4
    131e:	58 f1       	brcs	.+86     	; 0x1376 <aTRS_ENG_BoundaryCheck_Rotate+0x7e>
    1320:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <mShapeCursor+0x2>
    1324:	28 c0       	rjmp	.+80     	; 0x1376 <aTRS_ENG_BoundaryCheck_Rotate+0x7e>

  for (uint8_t nRow = 0; nRow < 4; nRow++)
  {
    for (uint8_t nCol = 0; nCol < 4; nCol++)
    {
      if ((mCurrentShape[Rotate(nCol, nRow, tmpShapeCursor.rot)] != 0)
    1326:	4b 2d       	mov	r20, r11
    1328:	6d 2f       	mov	r22, r29
    132a:	8c 2f       	mov	r24, r28
    132c:	6d dd       	rcall	.-1318   	; 0xe08 <Rotate>
    132e:	f6 01       	movw	r30, r12
    1330:	e8 0f       	add	r30, r24
    1332:	f1 1d       	adc	r31, r1
    1334:	80 81       	ld	r24, Z
    1336:	88 23       	and	r24, r24
    1338:	39 f0       	breq	.+14     	; 0x1348 <aTRS_ENG_BoundaryCheck_Rotate+0x50>
      && ((tmpShapeCursor.col + nCol < 0) || (tmpShapeCursor.col + nCol > SCREEN_WIDTH - 1) || (tmpShapeCursor.row + nRow < 0) || (tmpShapeCursor.row + nRow > SCREEN_HEIGHT -1)))
    133a:	0e 30       	cpi	r16, 0x0E	; 14
    133c:	11 05       	cpc	r17, r1
    133e:	a8 f4       	brcc	.+42     	; 0x136a <aTRS_ENG_BoundaryCheck_Rotate+0x72>
    1340:	84 e1       	ldi	r24, 0x14	; 20
    1342:	e8 16       	cp	r14, r24
    1344:	f1 04       	cpc	r15, r1
    1346:	98 f4       	brcc	.+38     	; 0x136e <aTRS_ENG_BoundaryCheck_Rotate+0x76>
  tmpShapeCursor.rot++;
  if (mShapeCursor.rot >= 4) mShapeCursor.rot = 0;

  for (uint8_t nRow = 0; nRow < 4; nRow++)
  {
    for (uint8_t nCol = 0; nCol < 4; nCol++)
    1348:	cf 5f       	subi	r28, 0xFF	; 255
    134a:	0f 5f       	subi	r16, 0xFF	; 255
    134c:	1f 4f       	sbci	r17, 0xFF	; 255
    134e:	c4 30       	cpi	r28, 0x04	; 4
    1350:	51 f7       	brne	.-44     	; 0x1326 <aTRS_ENG_BoundaryCheck_Rotate+0x2e>
{
  __shapeCursor tmpShapeCursor = mShapeCursor;
  tmpShapeCursor.rot++;
  if (mShapeCursor.rot >= 4) mShapeCursor.rot = 0;

  for (uint8_t nRow = 0; nRow < 4; nRow++)
    1352:	df 5f       	subi	r29, 0xFF	; 255
    1354:	8f ef       	ldi	r24, 0xFF	; 255
    1356:	e8 1a       	sub	r14, r24
    1358:	f8 0a       	sbc	r15, r24
    135a:	d4 30       	cpi	r29, 0x04	; 4
    135c:	51 f0       	breq	.+20     	; 0x1372 <aTRS_ENG_BoundaryCheck_Rotate+0x7a>
    135e:	0a 2d       	mov	r16, r10
    1360:	0a 2c       	mov	r0, r10
    1362:	00 0c       	add	r0, r0
    1364:	11 0b       	sbc	r17, r17
  }
  return true;
}

bool aTRS_ENG_BoundaryCheck_Rotate(void)
{
    1366:	c0 e0       	ldi	r28, 0x00	; 0
    1368:	de cf       	rjmp	.-68     	; 0x1326 <aTRS_ENG_BoundaryCheck_Rotate+0x2e>
    for (uint8_t nCol = 0; nCol < 4; nCol++)
    {
      if ((mCurrentShape[Rotate(nCol, nRow, tmpShapeCursor.rot)] != 0)
      && ((tmpShapeCursor.col + nCol < 0) || (tmpShapeCursor.col + nCol > SCREEN_WIDTH - 1) || (tmpShapeCursor.row + nRow < 0) || (tmpShapeCursor.row + nRow > SCREEN_HEIGHT -1)))
      {
        return false;
    136a:	80 e0       	ldi	r24, 0x00	; 0
    136c:	0d c0       	rjmp	.+26     	; 0x1388 <aTRS_ENG_BoundaryCheck_Rotate+0x90>
    136e:	80 e0       	ldi	r24, 0x00	; 0
    1370:	0b c0       	rjmp	.+22     	; 0x1388 <aTRS_ENG_BoundaryCheck_Rotate+0x90>
      }
    }
  }
  return true;
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	09 c0       	rjmp	.+18     	; 0x1388 <aTRS_ENG_BoundaryCheck_Rotate+0x90>

  for (uint8_t nRow = 0; nRow < 4; nRow++)
  {
    for (uint8_t nCol = 0; nCol < 4; nCol++)
    {
      if ((mCurrentShape[Rotate(nCol, nRow, tmpShapeCursor.rot)] != 0)
    1376:	c0 90 0c 02 	lds	r12, 0x020C	; 0x80020c <mCurrentShape>
    137a:	d0 90 0d 02 	lds	r13, 0x020D	; 0x80020d <mCurrentShape+0x1>
    137e:	0e 2c       	mov	r0, r14
    1380:	00 0c       	add	r0, r0
    1382:	ff 08       	sbc	r15, r15
    1384:	d0 e0       	ldi	r29, 0x00	; 0
    1386:	eb cf       	rjmp	.-42     	; 0x135e <aTRS_ENG_BoundaryCheck_Rotate+0x66>
        return false;
      }
    }
  }
  return true;
}
    1388:	df 91       	pop	r29
    138a:	cf 91       	pop	r28
    138c:	1f 91       	pop	r17
    138e:	0f 91       	pop	r16
    1390:	ff 90       	pop	r15
    1392:	ef 90       	pop	r14
    1394:	df 90       	pop	r13
    1396:	cf 90       	pop	r12
    1398:	bf 90       	pop	r11
    139a:	af 90       	pop	r10
    139c:	08 95       	ret

0000139e <aTRS_ENG_CheckClearedRows>:

void aTRS_ENG_CheckClearedRows(void)
{
    139e:	2f 92       	push	r2
    13a0:	3f 92       	push	r3
    13a2:	4f 92       	push	r4
    13a4:	5f 92       	push	r5
    13a6:	6f 92       	push	r6
    13a8:	7f 92       	push	r7
    13aa:	8f 92       	push	r8
    13ac:	9f 92       	push	r9
    13ae:	af 92       	push	r10
    13b0:	bf 92       	push	r11
    13b2:	cf 92       	push	r12
    13b4:	df 92       	push	r13
    13b6:	ef 92       	push	r14
    13b8:	ff 92       	push	r15
    13ba:	0f 93       	push	r16
    13bc:	1f 93       	push	r17
    13be:	cf 93       	push	r28
    13c0:	df 93       	push	r29
    13c2:	0f 2e       	mov	r0, r31
    13c4:	f2 eb       	ldi	r31, 0xB2	; 178
    13c6:	ef 2e       	mov	r14, r31
    13c8:	f8 e0       	ldi	r31, 0x08	; 8
    13ca:	ff 2e       	mov	r15, r31
    13cc:	f0 2d       	mov	r31, r0
    13ce:	0f 2e       	mov	r0, r31
    13d0:	fa e0       	ldi	r31, 0x0A	; 10
    13d2:	6f 2e       	mov	r6, r31
    13d4:	71 2c       	mov	r7, r1
    13d6:	f0 2d       	mov	r31, r0
  __unitBlockPos blockPos;
  uint8_t clearedRowNum = 0;
  for (uint8_t i = 0; i < SCREEN_HEIGHT; i++)
    13d8:	41 2c       	mov	r4, r1
}

void aTRS_ENG_CheckClearedRows(void)
{
  __unitBlockPos blockPos;
  uint8_t clearedRowNum = 0;
    13da:	31 2c       	mov	r3, r1
static __unitBlockPos getUnitBlockPos(uint8_t row, uint8_t col)
{
  __unitBlockPos blockPos =
  {
    .unitBlock_x1 = 11 +(col*UNIT_BLOCK_SIZE + col) + 1,
    .unitBlock_y1 = 9 + (row*UNIT_BLOCK_SIZE + row) + 1,
    13dc:	0f 2e       	mov	r0, r31
    13de:	ff e0       	ldi	r31, 0x0F	; 15
    13e0:	5f 2e       	mov	r5, r31
    13e2:	f0 2d       	mov	r31, r0
    13e4:	7f c0       	rjmp	.+254    	; 0x14e4 <aTRS_ENG_CheckClearedRows+0x146>
  {
    uint8_t blockNum = 0;
    
    for (uint8_t j = 0; j < SCREEN_WIDTH; j++)
    {
      if (field[i*SCREEN_WIDTH + j])
    13e6:	81 91       	ld	r24, Z+
    13e8:	91 91       	ld	r25, Z+
    13ea:	89 2b       	or	r24, r25
    13ec:	09 f0       	breq	.+2      	; 0x13f0 <aTRS_ENG_CheckClearedRows+0x52>
      {
        blockNum++;
    13ee:	2f 5f       	subi	r18, 0xFF	; 255
  uint8_t clearedRowNum = 0;
  for (uint8_t i = 0; i < SCREEN_HEIGHT; i++)
  {
    uint8_t blockNum = 0;
    
    for (uint8_t j = 0; j < SCREEN_WIDTH; j++)
    13f0:	ae 16       	cp	r10, r30
    13f2:	bf 06       	cpc	r11, r31
    13f4:	c1 f7       	brne	.-16     	; 0x13e6 <aTRS_ENG_CheckClearedRows+0x48>
    13f6:	7d c0       	rjmp	.+250    	; 0x14f2 <aTRS_ENG_CheckClearedRows+0x154>
    { 
      //Render cleared row and update field array
      for (uint8_t k = 0; k < SCREEN_WIDTH; k++)
      {
        blockPos = getUnitBlockPos(i, k) ;
        LCD_GUI_DrawFillRectangle(blockPos.unitBlock_x1,
    13f8:	ae 01       	movw	r20, r28
    13fa:	43 5f       	subi	r20, 0xF3	; 243
    13fc:	5f 4f       	sbci	r21, 0xFF	; 255
    13fe:	00 e0       	ldi	r16, 0x00	; 0
    1400:	10 e0       	ldi	r17, 0x00	; 0
    1402:	96 01       	movw	r18, r12
    1404:	b3 01       	movw	r22, r6
    1406:	ce 01       	movw	r24, r28
    1408:	70 da       	rcall	.-2848   	; 0x8ea <LCD_GUI_DrawFillRectangle>
        blockPos.unitBlock_y1,
        blockPos.unitBlock_x2,
        blockPos.unitBlock_y2,
        BLACK);

        field[i*SCREEN_WIDTH + k] = 0;
    140a:	f7 01       	movw	r30, r14
    140c:	11 92       	st	Z+, r1
    140e:	11 92       	st	Z+, r1
    1410:	7f 01       	movw	r14, r30
    1412:	2f 96       	adiw	r28, 0x0f	; 15
    }

    if (blockNum == SCREEN_WIDTH)
    { 
      //Render cleared row and update field array
      for (uint8_t k = 0; k < SCREEN_WIDTH; k++)
    1414:	ce 3d       	cpi	r28, 0xDE	; 222
    1416:	d1 05       	cpc	r29, r1
    1418:	79 f7       	brne	.-34     	; 0x13f8 <aTRS_ENG_CheckClearedRows+0x5a>
    141a:	cc e0       	ldi	r28, 0x0C	; 12
    141c:	d0 e0       	ldi	r29, 0x00	; 0
    141e:	81 2c       	mov	r8, r1
    1420:	91 2c       	mov	r9, r1
    1422:	40 c0       	rjmp	.+128    	; 0x14a4 <aTRS_ENG_CheckClearedRows+0x106>
      for (uint8_t l = 0; l < SCREEN_WIDTH; l++)
      {
        //loop through each row to the top row 1
        for (uint8_t m = i; m > 0; m--)
        {
          field[(m)*SCREEN_WIDTH + l] = field[(m-1)*SCREEN_WIDTH + l];
    1424:	42 2d       	mov	r20, r2
    1426:	50 e0       	ldi	r21, 0x00	; 0
    1428:	9a 01       	movw	r18, r20
    142a:	22 0f       	add	r18, r18
    142c:	33 1f       	adc	r19, r19
    142e:	c9 01       	movw	r24, r18
    1430:	88 0f       	add	r24, r24
    1432:	99 1f       	adc	r25, r25
    1434:	88 0f       	add	r24, r24
    1436:	99 1f       	adc	r25, r25
    1438:	88 0f       	add	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	82 1b       	sub	r24, r18
    143e:	93 0b       	sbc	r25, r19
    1440:	8e 0d       	add	r24, r14
    1442:	9f 1d       	adc	r25, r15
    1444:	fc 01       	movw	r30, r24
    1446:	ee 0f       	add	r30, r30
    1448:	ff 1f       	adc	r31, r31
    144a:	ea 56       	subi	r30, 0x6A	; 106
    144c:	f7 4f       	sbci	r31, 0xF7	; 247
    144e:	a0 81       	ld	r26, Z
    1450:	b1 81       	ldd	r27, Z+1	; 0x01
    1452:	88 0f       	add	r24, r24
    1454:	99 1f       	adc	r25, r25
    1456:	fc 01       	movw	r30, r24
    1458:	ee 54       	subi	r30, 0x4E	; 78
    145a:	f7 4f       	sbci	r31, 0xF7	; 247
    145c:	b1 83       	std	Z+1, r27	; 0x01
    145e:	a0 83       	st	Z, r26
static __unitBlockPos getUnitBlockPos(uint8_t row, uint8_t col)
{
  __unitBlockPos blockPos =
  {
    .unitBlock_x1 = 11 +(col*UNIT_BLOCK_SIZE + col) + 1,
    .unitBlock_y1 = 9 + (row*UNIT_BLOCK_SIZE + row) + 1,
    1460:	54 9e       	mul	r5, r20
    1462:	90 01       	movw	r18, r0
    1464:	55 9e       	mul	r5, r21
    1466:	30 0d       	add	r19, r0
    1468:	11 24       	eor	r1, r1
  return tmp;
}

static __unitBlockPos getUnitBlockPos(uint8_t row, uint8_t col)
{
  __unitBlockPos blockPos =
    146a:	b9 01       	movw	r22, r18
    146c:	66 5f       	subi	r22, 0xF6	; 246
    146e:	7f 4f       	sbci	r23, 0xFF	; 255
    1470:	29 5e       	subi	r18, 0xE9	; 233
    1472:	3f 4f       	sbci	r19, 0xFF	; 255
        //loop through each row to the top row 1
        for (uint8_t m = i; m > 0; m--)
        {
          field[(m)*SCREEN_WIDTH + l] = field[(m-1)*SCREEN_WIDTH + l];
          blockPos = getUnitBlockPos(m, l);
          if (field[(m)*SCREEN_WIDTH + l])
    1474:	ab 2b       	or	r26, r27
    1476:	31 f0       	breq	.+12     	; 0x1484 <aTRS_ENG_CheckClearedRows+0xe6>
          {
            LCD_GUI_DrawFillRectangle(blockPos.unitBlock_x1,
    1478:	00 e0       	ldi	r16, 0x00	; 0
    147a:	18 ef       	ldi	r17, 0xF8	; 248
    147c:	a6 01       	movw	r20, r12
    147e:	ce 01       	movw	r24, r28
    1480:	34 da       	rcall	.-2968   	; 0x8ea <LCD_GUI_DrawFillRectangle>
    1482:	05 c0       	rjmp	.+10     	; 0x148e <aTRS_ENG_CheckClearedRows+0xf0>
            blockPos.unitBlock_y2,
            RED);
          }
          else
          {
            LCD_GUI_DrawFillRectangle(blockPos.unitBlock_x1,
    1484:	00 e0       	ldi	r16, 0x00	; 0
    1486:	10 e0       	ldi	r17, 0x00	; 0
    1488:	a6 01       	movw	r20, r12
    148a:	ce 01       	movw	r24, r28
    148c:	2e da       	rcall	.-2980   	; 0x8ea <LCD_GUI_DrawFillRectangle>

      //Shift each column down
      for (uint8_t l = 0; l < SCREEN_WIDTH; l++)
      {
        //loop through each row to the top row 1
        for (uint8_t m = i; m > 0; m--)
    148e:	2a 94       	dec	r2
    1490:	21 10       	cpse	r2, r1
    1492:	c8 cf       	rjmp	.-112    	; 0x1424 <aTRS_ENG_CheckClearedRows+0x86>
    1494:	ff ef       	ldi	r31, 0xFF	; 255
    1496:	8f 1a       	sub	r8, r31
    1498:	9f 0a       	sbc	r9, r31
    149a:	2f 96       	adiw	r28, 0x0f	; 15

        field[i*SCREEN_WIDTH + k] = 0;
      }

      //Shift each column down
      for (uint8_t l = 0; l < SCREEN_WIDTH; l++)
    149c:	2e e0       	ldi	r18, 0x0E	; 14
    149e:	82 16       	cp	r8, r18
    14a0:	91 04       	cpc	r9, r1
    14a2:	49 f0       	breq	.+18     	; 0x14b6 <aTRS_ENG_CheckClearedRows+0x118>
      {
        //loop through each row to the top row 1
        for (uint8_t m = i; m > 0; m--)
    14a4:	44 20       	and	r4, r4
    14a6:	b1 f3       	breq	.-20     	; 0x1494 <aTRS_ENG_CheckClearedRows+0xf6>
        {
          field[(m)*SCREEN_WIDTH + l] = field[(m-1)*SCREEN_WIDTH + l];
    14a8:	74 01       	movw	r14, r8
    14aa:	6e 01       	movw	r12, r28
    14ac:	8d e0       	ldi	r24, 0x0D	; 13
    14ae:	c8 0e       	add	r12, r24
    14b0:	d1 1c       	adc	r13, r1
    14b2:	24 2c       	mov	r2, r4
    14b4:	b7 cf       	rjmp	.-146    	; 0x1424 <aTRS_ENG_CheckClearedRows+0x86>
            blockPos.unitBlock_y2,
            BLACK);
          }
        }
      }
      clearedRowNum++;
    14b6:	33 94       	inc	r3
      mScore += 100*clearedRowNum;
    14b8:	80 91 b0 08 	lds	r24, 0x08B0	; 0x8008b0 <mScore>
    14bc:	90 91 b1 08 	lds	r25, 0x08B1	; 0x8008b1 <mScore+0x1>
    14c0:	e4 e6       	ldi	r30, 0x64	; 100
    14c2:	e3 9d       	mul	r30, r3
    14c4:	80 0d       	add	r24, r0
    14c6:	91 1d       	adc	r25, r1
    14c8:	11 24       	eor	r1, r1
    14ca:	90 93 b1 08 	sts	0x08B1, r25	; 0x8008b1 <mScore+0x1>
    14ce:	80 93 b0 08 	sts	0x08B0, r24	; 0x8008b0 <mScore>
    }
    aTRS_ENG_returnShapeCursorHome();
    14d2:	d4 dc       	rcall	.-1624   	; 0xe7c <aTRS_ENG_returnShapeCursorHome>

void aTRS_ENG_CheckClearedRows(void)
{
  __unitBlockPos blockPos;
  uint8_t clearedRowNum = 0;
  for (uint8_t i = 0; i < SCREEN_HEIGHT; i++)
    14d4:	43 94       	inc	r4
    14d6:	ff e0       	ldi	r31, 0x0F	; 15
    14d8:	6f 0e       	add	r6, r31
    14da:	71 1c       	adc	r7, r1
    14dc:	75 01       	movw	r14, r10
    14de:	24 e1       	ldi	r18, 0x14	; 20
    14e0:	42 16       	cp	r4, r18
    14e2:	81 f0       	breq	.+32     	; 0x1504 <aTRS_ENG_CheckClearedRows+0x166>
    14e4:	57 01       	movw	r10, r14
    14e6:	8c e1       	ldi	r24, 0x1C	; 28
    14e8:	a8 0e       	add	r10, r24
    14ea:	b1 1c       	adc	r11, r1
  }
  return true;
}

void aTRS_ENG_CheckClearedRows(void)
{
    14ec:	f7 01       	movw	r30, r14
    14ee:	20 e0       	ldi	r18, 0x00	; 0
    14f0:	7a cf       	rjmp	.-268    	; 0x13e6 <aTRS_ENG_CheckClearedRows+0x48>
      {
        blockNum++;
      }
    }

    if (blockNum == SCREEN_WIDTH)
    14f2:	2e 30       	cpi	r18, 0x0E	; 14
    14f4:	71 f7       	brne	.-36     	; 0x14d2 <aTRS_ENG_CheckClearedRows+0x134>
    14f6:	63 01       	movw	r12, r6
    14f8:	ed e0       	ldi	r30, 0x0D	; 13
    14fa:	ce 0e       	add	r12, r30
    14fc:	d1 1c       	adc	r13, r1
    14fe:	cc e0       	ldi	r28, 0x0C	; 12
    1500:	d0 e0       	ldi	r29, 0x00	; 0
    1502:	7a cf       	rjmp	.-268    	; 0x13f8 <aTRS_ENG_CheckClearedRows+0x5a>
      clearedRowNum++;
      mScore += 100*clearedRowNum;
    }
    aTRS_ENG_returnShapeCursorHome();
  }
}
    1504:	df 91       	pop	r29
    1506:	cf 91       	pop	r28
    1508:	1f 91       	pop	r17
    150a:	0f 91       	pop	r16
    150c:	ff 90       	pop	r15
    150e:	ef 90       	pop	r14
    1510:	df 90       	pop	r13
    1512:	cf 90       	pop	r12
    1514:	bf 90       	pop	r11
    1516:	af 90       	pop	r10
    1518:	9f 90       	pop	r9
    151a:	8f 90       	pop	r8
    151c:	7f 90       	pop	r7
    151e:	6f 90       	pop	r6
    1520:	5f 90       	pop	r5
    1522:	4f 90       	pop	r4
    1524:	3f 90       	pop	r3
    1526:	2f 90       	pop	r2
    1528:	08 95       	ret

0000152a <aTRS_ENG_ClearField>:

void aTRS_ENG_ClearField(void)
{
    152a:	e2 eb       	ldi	r30, 0xB2	; 178
    152c:	f8 e0       	ldi	r31, 0x08	; 8
    152e:	22 ee       	ldi	r18, 0xE2	; 226
    1530:	3a e0       	ldi	r19, 0x0A	; 10
    1532:	09 c0       	rjmp	.+18     	; 0x1546 <aTRS_ENG_ClearField+0x1c>
  for (uint8_t i = 0; i < SCREEN_HEIGHT; i++)
  {
    for (uint8_t j = 0; j < SCREEN_WIDTH; j++)
    {
      field[i*SCREEN_WIDTH + j] = 0;
    1534:	11 92       	st	Z+, r1
    1536:	11 92       	st	Z+, r1

void aTRS_ENG_ClearField(void)
{
  for (uint8_t i = 0; i < SCREEN_HEIGHT; i++)
  {
    for (uint8_t j = 0; j < SCREEN_WIDTH; j++)
    1538:	8e 17       	cp	r24, r30
    153a:	9f 07       	cpc	r25, r31
    153c:	d9 f7       	brne	.-10     	; 0x1534 <aTRS_ENG_ClearField+0xa>
    153e:	fc 01       	movw	r30, r24
  }
}

void aTRS_ENG_ClearField(void)
{
  for (uint8_t i = 0; i < SCREEN_HEIGHT; i++)
    1540:	82 17       	cp	r24, r18
    1542:	93 07       	cpc	r25, r19
    1544:	19 f0       	breq	.+6      	; 0x154c <aTRS_ENG_ClearField+0x22>
    1546:	cf 01       	movw	r24, r30
    1548:	4c 96       	adiw	r24, 0x1c	; 28
    154a:	f4 cf       	rjmp	.-24     	; 0x1534 <aTRS_ENG_ClearField+0xa>
    154c:	08 95       	ret

0000154e <aTRS_ENG_GetScore>:
}

uint16_t aTRS_ENG_GetScore(void)
{
  return mScore;
}
    154e:	80 91 b0 08 	lds	r24, 0x08B0	; 0x8008b0 <mScore>
    1552:	90 91 b1 08 	lds	r25, 0x08B1	; 0x8008b1 <mScore+0x1>
    1556:	08 95       	ret

00001558 <aTRS_ENG_refreshAllBlocks>:

/************************************************************************/
/* Extra functions                                                      */
/************************************************************************/
void aTRS_ENG_refreshAllBlocks(uint16_t colour)
{
    1558:	af 92       	push	r10
    155a:	bf 92       	push	r11
    155c:	cf 92       	push	r12
    155e:	df 92       	push	r13
    1560:	ef 92       	push	r14
    1562:	ff 92       	push	r15
    1564:	0f 93       	push	r16
    1566:	1f 93       	push	r17
    1568:	cf 93       	push	r28
    156a:	df 93       	push	r29
    156c:	5c 01       	movw	r10, r24
    156e:	0f 2e       	mov	r0, r31
    1570:	fa e0       	ldi	r31, 0x0A	; 10
    1572:	ef 2e       	mov	r14, r31
    1574:	f1 2c       	mov	r15, r1
    1576:	f0 2d       	mov	r31, r0
    1578:	1a c0       	rjmp	.+52     	; 0x15ae <aTRS_ENG_refreshAllBlocks+0x56>
  for (int i = 0; i < 20; i++)
  {
    for (int j = 0; j < 14; j++)
    {
      LCD_GUI_DrawFillRectangle(11 +(j*UNIT_BLOCK_SIZE + j) + 1,
    157a:	ae 01       	movw	r20, r28
    157c:	43 5f       	subi	r20, 0xF3	; 243
    157e:	5f 4f       	sbci	r21, 0xFF	; 255
    1580:	85 01       	movw	r16, r10
    1582:	96 01       	movw	r18, r12
    1584:	b7 01       	movw	r22, r14
    1586:	ce 01       	movw	r24, r28
    1588:	b0 d9       	rcall	.-3232   	; 0x8ea <LCD_GUI_DrawFillRectangle>
    158a:	8f e3       	ldi	r24, 0x3F	; 63
    158c:	9c e9       	ldi	r25, 0x9C	; 156
    158e:	01 97       	sbiw	r24, 0x01	; 1
    1590:	f1 f7       	brne	.-4      	; 0x158e <aTRS_ENG_refreshAllBlocks+0x36>
    1592:	00 c0       	rjmp	.+0      	; 0x1594 <aTRS_ENG_refreshAllBlocks+0x3c>
    1594:	00 00       	nop
    1596:	2f 96       	adiw	r28, 0x0f	; 15
/************************************************************************/
void aTRS_ENG_refreshAllBlocks(uint16_t colour)
{
  for (int i = 0; i < 20; i++)
  {
    for (int j = 0; j < 14; j++)
    1598:	ce 3d       	cpi	r28, 0xDE	; 222
    159a:	d1 05       	cpc	r29, r1
    159c:	71 f7       	brne	.-36     	; 0x157a <aTRS_ENG_refreshAllBlocks+0x22>
    159e:	9f e0       	ldi	r25, 0x0F	; 15
    15a0:	e9 0e       	add	r14, r25
    15a2:	f1 1c       	adc	r15, r1
/************************************************************************/
/* Extra functions                                                      */
/************************************************************************/
void aTRS_ENG_refreshAllBlocks(uint16_t colour)
{
  for (int i = 0; i < 20; i++)
    15a4:	86 e3       	ldi	r24, 0x36	; 54
    15a6:	e8 16       	cp	r14, r24
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	f8 06       	cpc	r15, r24
    15ac:	39 f0       	breq	.+14     	; 0x15bc <aTRS_ENG_refreshAllBlocks+0x64>
    15ae:	67 01       	movw	r12, r14
    15b0:	9d e0       	ldi	r25, 0x0D	; 13
    15b2:	c9 0e       	add	r12, r25
    15b4:	d1 1c       	adc	r13, r1

/************************************************************************/
/* Extra functions                                                      */
/************************************************************************/
void aTRS_ENG_refreshAllBlocks(uint16_t colour)
{
    15b6:	cc e0       	ldi	r28, 0x0C	; 12
    15b8:	d0 e0       	ldi	r29, 0x00	; 0
    15ba:	df cf       	rjmp	.-66     	; 0x157a <aTRS_ENG_refreshAllBlocks+0x22>
      9 + (i*UNIT_BLOCK_SIZE + i) + UNIT_BLOCK_SIZE,
      colour);
      _delay_ms(10);
    }
  }
    15bc:	df 91       	pop	r29
    15be:	cf 91       	pop	r28
    15c0:	1f 91       	pop	r17
    15c2:	0f 91       	pop	r16
    15c4:	ff 90       	pop	r15
    15c6:	ef 90       	pop	r14
    15c8:	df 90       	pop	r13
    15ca:	cf 90       	pop	r12
    15cc:	bf 90       	pop	r11
    15ce:	af 90       	pop	r10
    15d0:	08 95       	ret

000015d2 <aTRS_ENG_GameOver>:
{
  return mScore;
}

void aTRS_ENG_GameOver(void)
{
    15d2:	cf 92       	push	r12
    15d4:	ef 92       	push	r14
    15d6:	ff 92       	push	r15
    15d8:	0f 93       	push	r16
    15da:	1f 93       	push	r17
  LCD_ShowString(60, 100, 4, "GAME", WHITE, BLACK, 0);
    15dc:	c1 2c       	mov	r12, r1
    15de:	e1 2c       	mov	r14, r1
    15e0:	f1 2c       	mov	r15, r1
    15e2:	0f ef       	ldi	r16, 0xFF	; 255
    15e4:	1f ef       	ldi	r17, 0xFF	; 255
    15e6:	24 e2       	ldi	r18, 0x24	; 36
    15e8:	38 e0       	ldi	r19, 0x08	; 8
    15ea:	44 e0       	ldi	r20, 0x04	; 4
    15ec:	64 e6       	ldi	r22, 0x64	; 100
    15ee:	70 e0       	ldi	r23, 0x00	; 0
    15f0:	8c e3       	ldi	r24, 0x3C	; 60
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	fc d9       	rcall	.-3080   	; 0x9ee <LCD_ShowString>
  LCD_ShowString(60, 150, 4, "OVER", WHITE, BLACK, 0);
    15f6:	29 e2       	ldi	r18, 0x29	; 41
    15f8:	38 e0       	ldi	r19, 0x08	; 8
    15fa:	44 e0       	ldi	r20, 0x04	; 4
    15fc:	66 e9       	ldi	r22, 0x96	; 150
    15fe:	70 e0       	ldi	r23, 0x00	; 0
    1600:	8c e3       	ldi	r24, 0x3C	; 60
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	f4 d9       	rcall	.-3096   	; 0x9ee <LCD_ShowString>
    1606:	2f ef       	ldi	r18, 0xFF	; 255
    1608:	83 ed       	ldi	r24, 0xD3	; 211
    160a:	90 e3       	ldi	r25, 0x30	; 48
    160c:	21 50       	subi	r18, 0x01	; 1
    160e:	80 40       	sbci	r24, 0x00	; 0
    1610:	90 40       	sbci	r25, 0x00	; 0
    1612:	e1 f7       	brne	.-8      	; 0x160c <aTRS_ENG_GameOver+0x3a>
    1614:	00 c0       	rjmp	.+0      	; 0x1616 <aTRS_ENG_GameOver+0x44>
    1616:	00 00       	nop
  _delay_ms(1000);
  aTRS_ENG_refreshAllBlocks(WHITE);
    1618:	8f ef       	ldi	r24, 0xFF	; 255
    161a:	9f ef       	ldi	r25, 0xFF	; 255
  aTRS_ENG_ClearField();
    161c:	9d df       	rcall	.-198    	; 0x1558 <aTRS_ENG_refreshAllBlocks>
    161e:	85 df       	rcall	.-246    	; 0x152a <aTRS_ENG_ClearField>
  LCD_GUI_DrawFillRectangle(TetrisFrame.frame_x1+1,
    1620:	00 e0       	ldi	r16, 0x00	; 0
    1622:	10 e0       	ldi	r17, 0x00	; 0
    1624:	25 e3       	ldi	r18, 0x35	; 53
    1626:	31 e0       	ldi	r19, 0x01	; 1
    1628:	4d ed       	ldi	r20, 0xDD	; 221
    162a:	50 e0       	ldi	r21, 0x00	; 0
    162c:	69 e0       	ldi	r22, 0x09	; 9
    162e:	70 e0       	ldi	r23, 0x00	; 0
    1630:	8b e0       	ldi	r24, 0x0B	; 11
                          TetrisFrame.frame_y1+1,
                          TetrisFrame.frame_x2-1,
                          TetrisFrame.frame_y2-1,
                          BLACK);
  aTRS_ENG_returnShapeCursorHome();
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	5a d9       	rcall	.-3404   	; 0x8ea <LCD_GUI_DrawFillRectangle>
  aTRS_ENG_GenerateNewShape();
    1636:	22 dc       	rcall	.-1980   	; 0xe7c <aTRS_ENG_returnShapeCursorHome>
    1638:	27 dc       	rcall	.-1970   	; 0xe88 <aTRS_ENG_GenerateNewShape>
}
    163a:	1f 91       	pop	r17
    163c:	0f 91       	pop	r16
    163e:	ff 90       	pop	r15
    1640:	ef 90       	pop	r14
    1642:	cf 90       	pop	r12
    1644:	08 95       	ret

00001646 <__udivmodqi4>:
    1646:	99 1b       	sub	r25, r25
    1648:	79 e0       	ldi	r23, 0x09	; 9
    164a:	04 c0       	rjmp	.+8      	; 0x1654 <__udivmodqi4_ep>

0000164c <__udivmodqi4_loop>:
    164c:	99 1f       	adc	r25, r25
    164e:	96 17       	cp	r25, r22
    1650:	08 f0       	brcs	.+2      	; 0x1654 <__udivmodqi4_ep>
    1652:	96 1b       	sub	r25, r22

00001654 <__udivmodqi4_ep>:
    1654:	88 1f       	adc	r24, r24
    1656:	7a 95       	dec	r23
    1658:	c9 f7       	brne	.-14     	; 0x164c <__udivmodqi4_loop>
    165a:	80 95       	com	r24
    165c:	08 95       	ret

0000165e <__divmodhi4>:
    165e:	97 fb       	bst	r25, 7
    1660:	07 2e       	mov	r0, r23
    1662:	16 f4       	brtc	.+4      	; 0x1668 <__divmodhi4+0xa>
    1664:	00 94       	com	r0
    1666:	06 d0       	rcall	.+12     	; 0x1674 <__divmodhi4_neg1>
    1668:	77 fd       	sbrc	r23, 7
    166a:	08 d0       	rcall	.+16     	; 0x167c <__divmodhi4_neg2>
    166c:	2d d0       	rcall	.+90     	; 0x16c8 <__udivmodhi4>
    166e:	07 fc       	sbrc	r0, 7
    1670:	05 d0       	rcall	.+10     	; 0x167c <__divmodhi4_neg2>
    1672:	3e f4       	brtc	.+14     	; 0x1682 <__divmodhi4_exit>

00001674 <__divmodhi4_neg1>:
    1674:	90 95       	com	r25
    1676:	81 95       	neg	r24
    1678:	9f 4f       	sbci	r25, 0xFF	; 255
    167a:	08 95       	ret

0000167c <__divmodhi4_neg2>:
    167c:	70 95       	com	r23
    167e:	61 95       	neg	r22
    1680:	7f 4f       	sbci	r23, 0xFF	; 255

00001682 <__divmodhi4_exit>:
    1682:	08 95       	ret

00001684 <__udivmodsi4>:
    1684:	a1 e2       	ldi	r26, 0x21	; 33
    1686:	1a 2e       	mov	r1, r26
    1688:	aa 1b       	sub	r26, r26
    168a:	bb 1b       	sub	r27, r27
    168c:	fd 01       	movw	r30, r26
    168e:	0d c0       	rjmp	.+26     	; 0x16aa <__udivmodsi4_ep>

00001690 <__udivmodsi4_loop>:
    1690:	aa 1f       	adc	r26, r26
    1692:	bb 1f       	adc	r27, r27
    1694:	ee 1f       	adc	r30, r30
    1696:	ff 1f       	adc	r31, r31
    1698:	a2 17       	cp	r26, r18
    169a:	b3 07       	cpc	r27, r19
    169c:	e4 07       	cpc	r30, r20
    169e:	f5 07       	cpc	r31, r21
    16a0:	20 f0       	brcs	.+8      	; 0x16aa <__udivmodsi4_ep>
    16a2:	a2 1b       	sub	r26, r18
    16a4:	b3 0b       	sbc	r27, r19
    16a6:	e4 0b       	sbc	r30, r20
    16a8:	f5 0b       	sbc	r31, r21

000016aa <__udivmodsi4_ep>:
    16aa:	66 1f       	adc	r22, r22
    16ac:	77 1f       	adc	r23, r23
    16ae:	88 1f       	adc	r24, r24
    16b0:	99 1f       	adc	r25, r25
    16b2:	1a 94       	dec	r1
    16b4:	69 f7       	brne	.-38     	; 0x1690 <__udivmodsi4_loop>
    16b6:	60 95       	com	r22
    16b8:	70 95       	com	r23
    16ba:	80 95       	com	r24
    16bc:	90 95       	com	r25
    16be:	9b 01       	movw	r18, r22
    16c0:	ac 01       	movw	r20, r24
    16c2:	bd 01       	movw	r22, r26
    16c4:	cf 01       	movw	r24, r30
    16c6:	08 95       	ret

000016c8 <__udivmodhi4>:
    16c8:	aa 1b       	sub	r26, r26
    16ca:	bb 1b       	sub	r27, r27
    16cc:	51 e1       	ldi	r21, 0x11	; 17
    16ce:	07 c0       	rjmp	.+14     	; 0x16de <__udivmodhi4_ep>

000016d0 <__udivmodhi4_loop>:
    16d0:	aa 1f       	adc	r26, r26
    16d2:	bb 1f       	adc	r27, r27
    16d4:	a6 17       	cp	r26, r22
    16d6:	b7 07       	cpc	r27, r23
    16d8:	10 f0       	brcs	.+4      	; 0x16de <__udivmodhi4_ep>
    16da:	a6 1b       	sub	r26, r22
    16dc:	b7 0b       	sbc	r27, r23

000016de <__udivmodhi4_ep>:
    16de:	88 1f       	adc	r24, r24
    16e0:	99 1f       	adc	r25, r25
    16e2:	5a 95       	dec	r21
    16e4:	a9 f7       	brne	.-22     	; 0x16d0 <__udivmodhi4_loop>
    16e6:	80 95       	com	r24
    16e8:	90 95       	com	r25
    16ea:	bc 01       	movw	r22, r24
    16ec:	cd 01       	movw	r24, r26
    16ee:	08 95       	ret

000016f0 <do_rand>:
    16f0:	8f 92       	push	r8
    16f2:	9f 92       	push	r9
    16f4:	af 92       	push	r10
    16f6:	bf 92       	push	r11
    16f8:	cf 92       	push	r12
    16fa:	df 92       	push	r13
    16fc:	ef 92       	push	r14
    16fe:	ff 92       	push	r15
    1700:	cf 93       	push	r28
    1702:	df 93       	push	r29
    1704:	ec 01       	movw	r28, r24
    1706:	68 81       	ld	r22, Y
    1708:	79 81       	ldd	r23, Y+1	; 0x01
    170a:	8a 81       	ldd	r24, Y+2	; 0x02
    170c:	9b 81       	ldd	r25, Y+3	; 0x03
    170e:	61 15       	cp	r22, r1
    1710:	71 05       	cpc	r23, r1
    1712:	81 05       	cpc	r24, r1
    1714:	91 05       	cpc	r25, r1
    1716:	21 f4       	brne	.+8      	; 0x1720 <do_rand+0x30>
    1718:	64 e2       	ldi	r22, 0x24	; 36
    171a:	79 ed       	ldi	r23, 0xD9	; 217
    171c:	8b e5       	ldi	r24, 0x5B	; 91
    171e:	97 e0       	ldi	r25, 0x07	; 7
    1720:	2d e1       	ldi	r18, 0x1D	; 29
    1722:	33 ef       	ldi	r19, 0xF3	; 243
    1724:	41 e0       	ldi	r20, 0x01	; 1
    1726:	50 e0       	ldi	r21, 0x00	; 0
    1728:	13 d3       	rcall	.+1574   	; 0x1d50 <__divmodsi4>
    172a:	49 01       	movw	r8, r18
    172c:	5a 01       	movw	r10, r20
    172e:	9b 01       	movw	r18, r22
    1730:	ac 01       	movw	r20, r24
    1732:	a7 ea       	ldi	r26, 0xA7	; 167
    1734:	b1 e4       	ldi	r27, 0x41	; 65
    1736:	28 d3       	rcall	.+1616   	; 0x1d88 <__muluhisi3>
    1738:	6b 01       	movw	r12, r22
    173a:	7c 01       	movw	r14, r24
    173c:	ac ee       	ldi	r26, 0xEC	; 236
    173e:	b4 ef       	ldi	r27, 0xF4	; 244
    1740:	a5 01       	movw	r20, r10
    1742:	94 01       	movw	r18, r8
    1744:	2d d3       	rcall	.+1626   	; 0x1da0 <__mulohisi3>
    1746:	dc 01       	movw	r26, r24
    1748:	cb 01       	movw	r24, r22
    174a:	8c 0d       	add	r24, r12
    174c:	9d 1d       	adc	r25, r13
    174e:	ae 1d       	adc	r26, r14
    1750:	bf 1d       	adc	r27, r15
    1752:	b7 ff       	sbrs	r27, 7
    1754:	03 c0       	rjmp	.+6      	; 0x175c <do_rand+0x6c>
    1756:	01 97       	sbiw	r24, 0x01	; 1
    1758:	a1 09       	sbc	r26, r1
    175a:	b0 48       	sbci	r27, 0x80	; 128
    175c:	88 83       	st	Y, r24
    175e:	99 83       	std	Y+1, r25	; 0x01
    1760:	aa 83       	std	Y+2, r26	; 0x02
    1762:	bb 83       	std	Y+3, r27	; 0x03
    1764:	9f 77       	andi	r25, 0x7F	; 127
    1766:	df 91       	pop	r29
    1768:	cf 91       	pop	r28
    176a:	ff 90       	pop	r15
    176c:	ef 90       	pop	r14
    176e:	df 90       	pop	r13
    1770:	cf 90       	pop	r12
    1772:	bf 90       	pop	r11
    1774:	af 90       	pop	r10
    1776:	9f 90       	pop	r9
    1778:	8f 90       	pop	r8
    177a:	08 95       	ret

0000177c <rand_r>:
    177c:	b9 cf       	rjmp	.-142    	; 0x16f0 <do_rand>

0000177e <rand>:
    177e:	80 e0       	ldi	r24, 0x00	; 0
    1780:	92 e0       	ldi	r25, 0x02	; 2
    1782:	b6 cf       	rjmp	.-148    	; 0x16f0 <do_rand>

00001784 <srand>:
    1784:	a0 e0       	ldi	r26, 0x00	; 0
    1786:	b0 e0       	ldi	r27, 0x00	; 0
    1788:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
    178c:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    1790:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
    1794:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
    1798:	08 95       	ret

0000179a <sprintf>:
    179a:	0f 93       	push	r16
    179c:	1f 93       	push	r17
    179e:	cf 93       	push	r28
    17a0:	df 93       	push	r29
    17a2:	cd b7       	in	r28, 0x3d	; 61
    17a4:	de b7       	in	r29, 0x3e	; 62
    17a6:	2e 97       	sbiw	r28, 0x0e	; 14
    17a8:	0f b6       	in	r0, 0x3f	; 63
    17aa:	f8 94       	cli
    17ac:	de bf       	out	0x3e, r29	; 62
    17ae:	0f be       	out	0x3f, r0	; 63
    17b0:	cd bf       	out	0x3d, r28	; 61
    17b2:	0e 89       	ldd	r16, Y+22	; 0x16
    17b4:	1f 89       	ldd	r17, Y+23	; 0x17
    17b6:	86 e0       	ldi	r24, 0x06	; 6
    17b8:	8c 83       	std	Y+4, r24	; 0x04
    17ba:	1a 83       	std	Y+2, r17	; 0x02
    17bc:	09 83       	std	Y+1, r16	; 0x01
    17be:	8f ef       	ldi	r24, 0xFF	; 255
    17c0:	9f e7       	ldi	r25, 0x7F	; 127
    17c2:	9e 83       	std	Y+6, r25	; 0x06
    17c4:	8d 83       	std	Y+5, r24	; 0x05
    17c6:	ae 01       	movw	r20, r28
    17c8:	46 5e       	subi	r20, 0xE6	; 230
    17ca:	5f 4f       	sbci	r21, 0xFF	; 255
    17cc:	68 8d       	ldd	r22, Y+24	; 0x18
    17ce:	79 8d       	ldd	r23, Y+25	; 0x19
    17d0:	ce 01       	movw	r24, r28
    17d2:	01 96       	adiw	r24, 0x01	; 1
    17d4:	10 d0       	rcall	.+32     	; 0x17f6 <vfprintf>
    17d6:	ef 81       	ldd	r30, Y+7	; 0x07
    17d8:	f8 85       	ldd	r31, Y+8	; 0x08
    17da:	e0 0f       	add	r30, r16
    17dc:	f1 1f       	adc	r31, r17
    17de:	10 82       	st	Z, r1
    17e0:	2e 96       	adiw	r28, 0x0e	; 14
    17e2:	0f b6       	in	r0, 0x3f	; 63
    17e4:	f8 94       	cli
    17e6:	de bf       	out	0x3e, r29	; 62
    17e8:	0f be       	out	0x3f, r0	; 63
    17ea:	cd bf       	out	0x3d, r28	; 61
    17ec:	df 91       	pop	r29
    17ee:	cf 91       	pop	r28
    17f0:	1f 91       	pop	r17
    17f2:	0f 91       	pop	r16
    17f4:	08 95       	ret

000017f6 <vfprintf>:
    17f6:	2f 92       	push	r2
    17f8:	3f 92       	push	r3
    17fa:	4f 92       	push	r4
    17fc:	5f 92       	push	r5
    17fe:	6f 92       	push	r6
    1800:	7f 92       	push	r7
    1802:	8f 92       	push	r8
    1804:	9f 92       	push	r9
    1806:	af 92       	push	r10
    1808:	bf 92       	push	r11
    180a:	cf 92       	push	r12
    180c:	df 92       	push	r13
    180e:	ef 92       	push	r14
    1810:	ff 92       	push	r15
    1812:	0f 93       	push	r16
    1814:	1f 93       	push	r17
    1816:	cf 93       	push	r28
    1818:	df 93       	push	r29
    181a:	cd b7       	in	r28, 0x3d	; 61
    181c:	de b7       	in	r29, 0x3e	; 62
    181e:	2b 97       	sbiw	r28, 0x0b	; 11
    1820:	0f b6       	in	r0, 0x3f	; 63
    1822:	f8 94       	cli
    1824:	de bf       	out	0x3e, r29	; 62
    1826:	0f be       	out	0x3f, r0	; 63
    1828:	cd bf       	out	0x3d, r28	; 61
    182a:	6c 01       	movw	r12, r24
    182c:	7b 01       	movw	r14, r22
    182e:	8a 01       	movw	r16, r20
    1830:	fc 01       	movw	r30, r24
    1832:	17 82       	std	Z+7, r1	; 0x07
    1834:	16 82       	std	Z+6, r1	; 0x06
    1836:	83 81       	ldd	r24, Z+3	; 0x03
    1838:	81 ff       	sbrs	r24, 1
    183a:	bf c1       	rjmp	.+894    	; 0x1bba <vfprintf+0x3c4>
    183c:	ce 01       	movw	r24, r28
    183e:	01 96       	adiw	r24, 0x01	; 1
    1840:	3c 01       	movw	r6, r24
    1842:	f6 01       	movw	r30, r12
    1844:	93 81       	ldd	r25, Z+3	; 0x03
    1846:	f7 01       	movw	r30, r14
    1848:	93 fd       	sbrc	r25, 3
    184a:	85 91       	lpm	r24, Z+
    184c:	93 ff       	sbrs	r25, 3
    184e:	81 91       	ld	r24, Z+
    1850:	7f 01       	movw	r14, r30
    1852:	88 23       	and	r24, r24
    1854:	09 f4       	brne	.+2      	; 0x1858 <vfprintf+0x62>
    1856:	ad c1       	rjmp	.+858    	; 0x1bb2 <vfprintf+0x3bc>
    1858:	85 32       	cpi	r24, 0x25	; 37
    185a:	39 f4       	brne	.+14     	; 0x186a <vfprintf+0x74>
    185c:	93 fd       	sbrc	r25, 3
    185e:	85 91       	lpm	r24, Z+
    1860:	93 ff       	sbrs	r25, 3
    1862:	81 91       	ld	r24, Z+
    1864:	7f 01       	movw	r14, r30
    1866:	85 32       	cpi	r24, 0x25	; 37
    1868:	21 f4       	brne	.+8      	; 0x1872 <vfprintf+0x7c>
    186a:	b6 01       	movw	r22, r12
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	d6 d1       	rcall	.+940    	; 0x1c1c <fputc>
    1870:	e8 cf       	rjmp	.-48     	; 0x1842 <vfprintf+0x4c>
    1872:	91 2c       	mov	r9, r1
    1874:	21 2c       	mov	r2, r1
    1876:	31 2c       	mov	r3, r1
    1878:	ff e1       	ldi	r31, 0x1F	; 31
    187a:	f3 15       	cp	r31, r3
    187c:	d8 f0       	brcs	.+54     	; 0x18b4 <vfprintf+0xbe>
    187e:	8b 32       	cpi	r24, 0x2B	; 43
    1880:	79 f0       	breq	.+30     	; 0x18a0 <vfprintf+0xaa>
    1882:	38 f4       	brcc	.+14     	; 0x1892 <vfprintf+0x9c>
    1884:	80 32       	cpi	r24, 0x20	; 32
    1886:	79 f0       	breq	.+30     	; 0x18a6 <vfprintf+0xb0>
    1888:	83 32       	cpi	r24, 0x23	; 35
    188a:	a1 f4       	brne	.+40     	; 0x18b4 <vfprintf+0xbe>
    188c:	23 2d       	mov	r18, r3
    188e:	20 61       	ori	r18, 0x10	; 16
    1890:	1d c0       	rjmp	.+58     	; 0x18cc <vfprintf+0xd6>
    1892:	8d 32       	cpi	r24, 0x2D	; 45
    1894:	61 f0       	breq	.+24     	; 0x18ae <vfprintf+0xb8>
    1896:	80 33       	cpi	r24, 0x30	; 48
    1898:	69 f4       	brne	.+26     	; 0x18b4 <vfprintf+0xbe>
    189a:	23 2d       	mov	r18, r3
    189c:	21 60       	ori	r18, 0x01	; 1
    189e:	16 c0       	rjmp	.+44     	; 0x18cc <vfprintf+0xd6>
    18a0:	83 2d       	mov	r24, r3
    18a2:	82 60       	ori	r24, 0x02	; 2
    18a4:	38 2e       	mov	r3, r24
    18a6:	e3 2d       	mov	r30, r3
    18a8:	e4 60       	ori	r30, 0x04	; 4
    18aa:	3e 2e       	mov	r3, r30
    18ac:	2a c0       	rjmp	.+84     	; 0x1902 <vfprintf+0x10c>
    18ae:	f3 2d       	mov	r31, r3
    18b0:	f8 60       	ori	r31, 0x08	; 8
    18b2:	1d c0       	rjmp	.+58     	; 0x18ee <vfprintf+0xf8>
    18b4:	37 fc       	sbrc	r3, 7
    18b6:	2d c0       	rjmp	.+90     	; 0x1912 <vfprintf+0x11c>
    18b8:	20 ed       	ldi	r18, 0xD0	; 208
    18ba:	28 0f       	add	r18, r24
    18bc:	2a 30       	cpi	r18, 0x0A	; 10
    18be:	40 f0       	brcs	.+16     	; 0x18d0 <vfprintf+0xda>
    18c0:	8e 32       	cpi	r24, 0x2E	; 46
    18c2:	b9 f4       	brne	.+46     	; 0x18f2 <vfprintf+0xfc>
    18c4:	36 fc       	sbrc	r3, 6
    18c6:	75 c1       	rjmp	.+746    	; 0x1bb2 <vfprintf+0x3bc>
    18c8:	23 2d       	mov	r18, r3
    18ca:	20 64       	ori	r18, 0x40	; 64
    18cc:	32 2e       	mov	r3, r18
    18ce:	19 c0       	rjmp	.+50     	; 0x1902 <vfprintf+0x10c>
    18d0:	36 fe       	sbrs	r3, 6
    18d2:	06 c0       	rjmp	.+12     	; 0x18e0 <vfprintf+0xea>
    18d4:	8a e0       	ldi	r24, 0x0A	; 10
    18d6:	98 9e       	mul	r9, r24
    18d8:	20 0d       	add	r18, r0
    18da:	11 24       	eor	r1, r1
    18dc:	92 2e       	mov	r9, r18
    18de:	11 c0       	rjmp	.+34     	; 0x1902 <vfprintf+0x10c>
    18e0:	ea e0       	ldi	r30, 0x0A	; 10
    18e2:	2e 9e       	mul	r2, r30
    18e4:	20 0d       	add	r18, r0
    18e6:	11 24       	eor	r1, r1
    18e8:	22 2e       	mov	r2, r18
    18ea:	f3 2d       	mov	r31, r3
    18ec:	f0 62       	ori	r31, 0x20	; 32
    18ee:	3f 2e       	mov	r3, r31
    18f0:	08 c0       	rjmp	.+16     	; 0x1902 <vfprintf+0x10c>
    18f2:	8c 36       	cpi	r24, 0x6C	; 108
    18f4:	21 f4       	brne	.+8      	; 0x18fe <vfprintf+0x108>
    18f6:	83 2d       	mov	r24, r3
    18f8:	80 68       	ori	r24, 0x80	; 128
    18fa:	38 2e       	mov	r3, r24
    18fc:	02 c0       	rjmp	.+4      	; 0x1902 <vfprintf+0x10c>
    18fe:	88 36       	cpi	r24, 0x68	; 104
    1900:	41 f4       	brne	.+16     	; 0x1912 <vfprintf+0x11c>
    1902:	f7 01       	movw	r30, r14
    1904:	93 fd       	sbrc	r25, 3
    1906:	85 91       	lpm	r24, Z+
    1908:	93 ff       	sbrs	r25, 3
    190a:	81 91       	ld	r24, Z+
    190c:	7f 01       	movw	r14, r30
    190e:	81 11       	cpse	r24, r1
    1910:	b3 cf       	rjmp	.-154    	; 0x1878 <vfprintf+0x82>
    1912:	98 2f       	mov	r25, r24
    1914:	9f 7d       	andi	r25, 0xDF	; 223
    1916:	95 54       	subi	r25, 0x45	; 69
    1918:	93 30       	cpi	r25, 0x03	; 3
    191a:	28 f4       	brcc	.+10     	; 0x1926 <vfprintf+0x130>
    191c:	0c 5f       	subi	r16, 0xFC	; 252
    191e:	1f 4f       	sbci	r17, 0xFF	; 255
    1920:	9f e3       	ldi	r25, 0x3F	; 63
    1922:	99 83       	std	Y+1, r25	; 0x01
    1924:	0d c0       	rjmp	.+26     	; 0x1940 <vfprintf+0x14a>
    1926:	83 36       	cpi	r24, 0x63	; 99
    1928:	31 f0       	breq	.+12     	; 0x1936 <vfprintf+0x140>
    192a:	83 37       	cpi	r24, 0x73	; 115
    192c:	71 f0       	breq	.+28     	; 0x194a <vfprintf+0x154>
    192e:	83 35       	cpi	r24, 0x53	; 83
    1930:	09 f0       	breq	.+2      	; 0x1934 <vfprintf+0x13e>
    1932:	55 c0       	rjmp	.+170    	; 0x19de <vfprintf+0x1e8>
    1934:	20 c0       	rjmp	.+64     	; 0x1976 <vfprintf+0x180>
    1936:	f8 01       	movw	r30, r16
    1938:	80 81       	ld	r24, Z
    193a:	89 83       	std	Y+1, r24	; 0x01
    193c:	0e 5f       	subi	r16, 0xFE	; 254
    193e:	1f 4f       	sbci	r17, 0xFF	; 255
    1940:	88 24       	eor	r8, r8
    1942:	83 94       	inc	r8
    1944:	91 2c       	mov	r9, r1
    1946:	53 01       	movw	r10, r6
    1948:	12 c0       	rjmp	.+36     	; 0x196e <vfprintf+0x178>
    194a:	28 01       	movw	r4, r16
    194c:	f2 e0       	ldi	r31, 0x02	; 2
    194e:	4f 0e       	add	r4, r31
    1950:	51 1c       	adc	r5, r1
    1952:	f8 01       	movw	r30, r16
    1954:	a0 80       	ld	r10, Z
    1956:	b1 80       	ldd	r11, Z+1	; 0x01
    1958:	36 fe       	sbrs	r3, 6
    195a:	03 c0       	rjmp	.+6      	; 0x1962 <vfprintf+0x16c>
    195c:	69 2d       	mov	r22, r9
    195e:	70 e0       	ldi	r23, 0x00	; 0
    1960:	02 c0       	rjmp	.+4      	; 0x1966 <vfprintf+0x170>
    1962:	6f ef       	ldi	r22, 0xFF	; 255
    1964:	7f ef       	ldi	r23, 0xFF	; 255
    1966:	c5 01       	movw	r24, r10
    1968:	4e d1       	rcall	.+668    	; 0x1c06 <strnlen>
    196a:	4c 01       	movw	r8, r24
    196c:	82 01       	movw	r16, r4
    196e:	f3 2d       	mov	r31, r3
    1970:	ff 77       	andi	r31, 0x7F	; 127
    1972:	3f 2e       	mov	r3, r31
    1974:	15 c0       	rjmp	.+42     	; 0x19a0 <vfprintf+0x1aa>
    1976:	28 01       	movw	r4, r16
    1978:	22 e0       	ldi	r18, 0x02	; 2
    197a:	42 0e       	add	r4, r18
    197c:	51 1c       	adc	r5, r1
    197e:	f8 01       	movw	r30, r16
    1980:	a0 80       	ld	r10, Z
    1982:	b1 80       	ldd	r11, Z+1	; 0x01
    1984:	36 fe       	sbrs	r3, 6
    1986:	03 c0       	rjmp	.+6      	; 0x198e <vfprintf+0x198>
    1988:	69 2d       	mov	r22, r9
    198a:	70 e0       	ldi	r23, 0x00	; 0
    198c:	02 c0       	rjmp	.+4      	; 0x1992 <vfprintf+0x19c>
    198e:	6f ef       	ldi	r22, 0xFF	; 255
    1990:	7f ef       	ldi	r23, 0xFF	; 255
    1992:	c5 01       	movw	r24, r10
    1994:	2d d1       	rcall	.+602    	; 0x1bf0 <strnlen_P>
    1996:	4c 01       	movw	r8, r24
    1998:	f3 2d       	mov	r31, r3
    199a:	f0 68       	ori	r31, 0x80	; 128
    199c:	3f 2e       	mov	r3, r31
    199e:	82 01       	movw	r16, r4
    19a0:	33 fc       	sbrc	r3, 3
    19a2:	19 c0       	rjmp	.+50     	; 0x19d6 <vfprintf+0x1e0>
    19a4:	82 2d       	mov	r24, r2
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	88 16       	cp	r8, r24
    19aa:	99 06       	cpc	r9, r25
    19ac:	a0 f4       	brcc	.+40     	; 0x19d6 <vfprintf+0x1e0>
    19ae:	b6 01       	movw	r22, r12
    19b0:	80 e2       	ldi	r24, 0x20	; 32
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	33 d1       	rcall	.+614    	; 0x1c1c <fputc>
    19b6:	2a 94       	dec	r2
    19b8:	f5 cf       	rjmp	.-22     	; 0x19a4 <vfprintf+0x1ae>
    19ba:	f5 01       	movw	r30, r10
    19bc:	37 fc       	sbrc	r3, 7
    19be:	85 91       	lpm	r24, Z+
    19c0:	37 fe       	sbrs	r3, 7
    19c2:	81 91       	ld	r24, Z+
    19c4:	5f 01       	movw	r10, r30
    19c6:	b6 01       	movw	r22, r12
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	28 d1       	rcall	.+592    	; 0x1c1c <fputc>
    19cc:	21 10       	cpse	r2, r1
    19ce:	2a 94       	dec	r2
    19d0:	21 e0       	ldi	r18, 0x01	; 1
    19d2:	82 1a       	sub	r8, r18
    19d4:	91 08       	sbc	r9, r1
    19d6:	81 14       	cp	r8, r1
    19d8:	91 04       	cpc	r9, r1
    19da:	79 f7       	brne	.-34     	; 0x19ba <vfprintf+0x1c4>
    19dc:	e1 c0       	rjmp	.+450    	; 0x1ba0 <vfprintf+0x3aa>
    19de:	84 36       	cpi	r24, 0x64	; 100
    19e0:	11 f0       	breq	.+4      	; 0x19e6 <vfprintf+0x1f0>
    19e2:	89 36       	cpi	r24, 0x69	; 105
    19e4:	39 f5       	brne	.+78     	; 0x1a34 <vfprintf+0x23e>
    19e6:	f8 01       	movw	r30, r16
    19e8:	37 fe       	sbrs	r3, 7
    19ea:	07 c0       	rjmp	.+14     	; 0x19fa <vfprintf+0x204>
    19ec:	60 81       	ld	r22, Z
    19ee:	71 81       	ldd	r23, Z+1	; 0x01
    19f0:	82 81       	ldd	r24, Z+2	; 0x02
    19f2:	93 81       	ldd	r25, Z+3	; 0x03
    19f4:	0c 5f       	subi	r16, 0xFC	; 252
    19f6:	1f 4f       	sbci	r17, 0xFF	; 255
    19f8:	08 c0       	rjmp	.+16     	; 0x1a0a <vfprintf+0x214>
    19fa:	60 81       	ld	r22, Z
    19fc:	71 81       	ldd	r23, Z+1	; 0x01
    19fe:	07 2e       	mov	r0, r23
    1a00:	00 0c       	add	r0, r0
    1a02:	88 0b       	sbc	r24, r24
    1a04:	99 0b       	sbc	r25, r25
    1a06:	0e 5f       	subi	r16, 0xFE	; 254
    1a08:	1f 4f       	sbci	r17, 0xFF	; 255
    1a0a:	f3 2d       	mov	r31, r3
    1a0c:	ff 76       	andi	r31, 0x6F	; 111
    1a0e:	3f 2e       	mov	r3, r31
    1a10:	97 ff       	sbrs	r25, 7
    1a12:	09 c0       	rjmp	.+18     	; 0x1a26 <vfprintf+0x230>
    1a14:	90 95       	com	r25
    1a16:	80 95       	com	r24
    1a18:	70 95       	com	r23
    1a1a:	61 95       	neg	r22
    1a1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a1e:	8f 4f       	sbci	r24, 0xFF	; 255
    1a20:	9f 4f       	sbci	r25, 0xFF	; 255
    1a22:	f0 68       	ori	r31, 0x80	; 128
    1a24:	3f 2e       	mov	r3, r31
    1a26:	2a e0       	ldi	r18, 0x0A	; 10
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	a3 01       	movw	r20, r6
    1a2c:	33 d1       	rcall	.+614    	; 0x1c94 <__ultoa_invert>
    1a2e:	88 2e       	mov	r8, r24
    1a30:	86 18       	sub	r8, r6
    1a32:	44 c0       	rjmp	.+136    	; 0x1abc <vfprintf+0x2c6>
    1a34:	85 37       	cpi	r24, 0x75	; 117
    1a36:	31 f4       	brne	.+12     	; 0x1a44 <vfprintf+0x24e>
    1a38:	23 2d       	mov	r18, r3
    1a3a:	2f 7e       	andi	r18, 0xEF	; 239
    1a3c:	b2 2e       	mov	r11, r18
    1a3e:	2a e0       	ldi	r18, 0x0A	; 10
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	25 c0       	rjmp	.+74     	; 0x1a8e <vfprintf+0x298>
    1a44:	93 2d       	mov	r25, r3
    1a46:	99 7f       	andi	r25, 0xF9	; 249
    1a48:	b9 2e       	mov	r11, r25
    1a4a:	8f 36       	cpi	r24, 0x6F	; 111
    1a4c:	c1 f0       	breq	.+48     	; 0x1a7e <vfprintf+0x288>
    1a4e:	18 f4       	brcc	.+6      	; 0x1a56 <vfprintf+0x260>
    1a50:	88 35       	cpi	r24, 0x58	; 88
    1a52:	79 f0       	breq	.+30     	; 0x1a72 <vfprintf+0x27c>
    1a54:	ae c0       	rjmp	.+348    	; 0x1bb2 <vfprintf+0x3bc>
    1a56:	80 37       	cpi	r24, 0x70	; 112
    1a58:	19 f0       	breq	.+6      	; 0x1a60 <vfprintf+0x26a>
    1a5a:	88 37       	cpi	r24, 0x78	; 120
    1a5c:	21 f0       	breq	.+8      	; 0x1a66 <vfprintf+0x270>
    1a5e:	a9 c0       	rjmp	.+338    	; 0x1bb2 <vfprintf+0x3bc>
    1a60:	e9 2f       	mov	r30, r25
    1a62:	e0 61       	ori	r30, 0x10	; 16
    1a64:	be 2e       	mov	r11, r30
    1a66:	b4 fe       	sbrs	r11, 4
    1a68:	0d c0       	rjmp	.+26     	; 0x1a84 <vfprintf+0x28e>
    1a6a:	fb 2d       	mov	r31, r11
    1a6c:	f4 60       	ori	r31, 0x04	; 4
    1a6e:	bf 2e       	mov	r11, r31
    1a70:	09 c0       	rjmp	.+18     	; 0x1a84 <vfprintf+0x28e>
    1a72:	34 fe       	sbrs	r3, 4
    1a74:	0a c0       	rjmp	.+20     	; 0x1a8a <vfprintf+0x294>
    1a76:	29 2f       	mov	r18, r25
    1a78:	26 60       	ori	r18, 0x06	; 6
    1a7a:	b2 2e       	mov	r11, r18
    1a7c:	06 c0       	rjmp	.+12     	; 0x1a8a <vfprintf+0x294>
    1a7e:	28 e0       	ldi	r18, 0x08	; 8
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	05 c0       	rjmp	.+10     	; 0x1a8e <vfprintf+0x298>
    1a84:	20 e1       	ldi	r18, 0x10	; 16
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	02 c0       	rjmp	.+4      	; 0x1a8e <vfprintf+0x298>
    1a8a:	20 e1       	ldi	r18, 0x10	; 16
    1a8c:	32 e0       	ldi	r19, 0x02	; 2
    1a8e:	f8 01       	movw	r30, r16
    1a90:	b7 fe       	sbrs	r11, 7
    1a92:	07 c0       	rjmp	.+14     	; 0x1aa2 <vfprintf+0x2ac>
    1a94:	60 81       	ld	r22, Z
    1a96:	71 81       	ldd	r23, Z+1	; 0x01
    1a98:	82 81       	ldd	r24, Z+2	; 0x02
    1a9a:	93 81       	ldd	r25, Z+3	; 0x03
    1a9c:	0c 5f       	subi	r16, 0xFC	; 252
    1a9e:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa0:	06 c0       	rjmp	.+12     	; 0x1aae <vfprintf+0x2b8>
    1aa2:	60 81       	ld	r22, Z
    1aa4:	71 81       	ldd	r23, Z+1	; 0x01
    1aa6:	80 e0       	ldi	r24, 0x00	; 0
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	0e 5f       	subi	r16, 0xFE	; 254
    1aac:	1f 4f       	sbci	r17, 0xFF	; 255
    1aae:	a3 01       	movw	r20, r6
    1ab0:	f1 d0       	rcall	.+482    	; 0x1c94 <__ultoa_invert>
    1ab2:	88 2e       	mov	r8, r24
    1ab4:	86 18       	sub	r8, r6
    1ab6:	fb 2d       	mov	r31, r11
    1ab8:	ff 77       	andi	r31, 0x7F	; 127
    1aba:	3f 2e       	mov	r3, r31
    1abc:	36 fe       	sbrs	r3, 6
    1abe:	0d c0       	rjmp	.+26     	; 0x1ada <vfprintf+0x2e4>
    1ac0:	23 2d       	mov	r18, r3
    1ac2:	2e 7f       	andi	r18, 0xFE	; 254
    1ac4:	a2 2e       	mov	r10, r18
    1ac6:	89 14       	cp	r8, r9
    1ac8:	58 f4       	brcc	.+22     	; 0x1ae0 <vfprintf+0x2ea>
    1aca:	34 fe       	sbrs	r3, 4
    1acc:	0b c0       	rjmp	.+22     	; 0x1ae4 <vfprintf+0x2ee>
    1ace:	32 fc       	sbrc	r3, 2
    1ad0:	09 c0       	rjmp	.+18     	; 0x1ae4 <vfprintf+0x2ee>
    1ad2:	83 2d       	mov	r24, r3
    1ad4:	8e 7e       	andi	r24, 0xEE	; 238
    1ad6:	a8 2e       	mov	r10, r24
    1ad8:	05 c0       	rjmp	.+10     	; 0x1ae4 <vfprintf+0x2ee>
    1ada:	b8 2c       	mov	r11, r8
    1adc:	a3 2c       	mov	r10, r3
    1ade:	03 c0       	rjmp	.+6      	; 0x1ae6 <vfprintf+0x2f0>
    1ae0:	b8 2c       	mov	r11, r8
    1ae2:	01 c0       	rjmp	.+2      	; 0x1ae6 <vfprintf+0x2f0>
    1ae4:	b9 2c       	mov	r11, r9
    1ae6:	a4 fe       	sbrs	r10, 4
    1ae8:	0f c0       	rjmp	.+30     	; 0x1b08 <vfprintf+0x312>
    1aea:	fe 01       	movw	r30, r28
    1aec:	e8 0d       	add	r30, r8
    1aee:	f1 1d       	adc	r31, r1
    1af0:	80 81       	ld	r24, Z
    1af2:	80 33       	cpi	r24, 0x30	; 48
    1af4:	21 f4       	brne	.+8      	; 0x1afe <vfprintf+0x308>
    1af6:	9a 2d       	mov	r25, r10
    1af8:	99 7e       	andi	r25, 0xE9	; 233
    1afa:	a9 2e       	mov	r10, r25
    1afc:	09 c0       	rjmp	.+18     	; 0x1b10 <vfprintf+0x31a>
    1afe:	a2 fe       	sbrs	r10, 2
    1b00:	06 c0       	rjmp	.+12     	; 0x1b0e <vfprintf+0x318>
    1b02:	b3 94       	inc	r11
    1b04:	b3 94       	inc	r11
    1b06:	04 c0       	rjmp	.+8      	; 0x1b10 <vfprintf+0x31a>
    1b08:	8a 2d       	mov	r24, r10
    1b0a:	86 78       	andi	r24, 0x86	; 134
    1b0c:	09 f0       	breq	.+2      	; 0x1b10 <vfprintf+0x31a>
    1b0e:	b3 94       	inc	r11
    1b10:	a3 fc       	sbrc	r10, 3
    1b12:	10 c0       	rjmp	.+32     	; 0x1b34 <vfprintf+0x33e>
    1b14:	a0 fe       	sbrs	r10, 0
    1b16:	06 c0       	rjmp	.+12     	; 0x1b24 <vfprintf+0x32e>
    1b18:	b2 14       	cp	r11, r2
    1b1a:	80 f4       	brcc	.+32     	; 0x1b3c <vfprintf+0x346>
    1b1c:	28 0c       	add	r2, r8
    1b1e:	92 2c       	mov	r9, r2
    1b20:	9b 18       	sub	r9, r11
    1b22:	0d c0       	rjmp	.+26     	; 0x1b3e <vfprintf+0x348>
    1b24:	b2 14       	cp	r11, r2
    1b26:	58 f4       	brcc	.+22     	; 0x1b3e <vfprintf+0x348>
    1b28:	b6 01       	movw	r22, r12
    1b2a:	80 e2       	ldi	r24, 0x20	; 32
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	76 d0       	rcall	.+236    	; 0x1c1c <fputc>
    1b30:	b3 94       	inc	r11
    1b32:	f8 cf       	rjmp	.-16     	; 0x1b24 <vfprintf+0x32e>
    1b34:	b2 14       	cp	r11, r2
    1b36:	18 f4       	brcc	.+6      	; 0x1b3e <vfprintf+0x348>
    1b38:	2b 18       	sub	r2, r11
    1b3a:	02 c0       	rjmp	.+4      	; 0x1b40 <vfprintf+0x34a>
    1b3c:	98 2c       	mov	r9, r8
    1b3e:	21 2c       	mov	r2, r1
    1b40:	a4 fe       	sbrs	r10, 4
    1b42:	0f c0       	rjmp	.+30     	; 0x1b62 <vfprintf+0x36c>
    1b44:	b6 01       	movw	r22, r12
    1b46:	80 e3       	ldi	r24, 0x30	; 48
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	68 d0       	rcall	.+208    	; 0x1c1c <fputc>
    1b4c:	a2 fe       	sbrs	r10, 2
    1b4e:	16 c0       	rjmp	.+44     	; 0x1b7c <vfprintf+0x386>
    1b50:	a1 fc       	sbrc	r10, 1
    1b52:	03 c0       	rjmp	.+6      	; 0x1b5a <vfprintf+0x364>
    1b54:	88 e7       	ldi	r24, 0x78	; 120
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	02 c0       	rjmp	.+4      	; 0x1b5e <vfprintf+0x368>
    1b5a:	88 e5       	ldi	r24, 0x58	; 88
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	b6 01       	movw	r22, r12
    1b60:	0c c0       	rjmp	.+24     	; 0x1b7a <vfprintf+0x384>
    1b62:	8a 2d       	mov	r24, r10
    1b64:	86 78       	andi	r24, 0x86	; 134
    1b66:	51 f0       	breq	.+20     	; 0x1b7c <vfprintf+0x386>
    1b68:	a1 fe       	sbrs	r10, 1
    1b6a:	02 c0       	rjmp	.+4      	; 0x1b70 <vfprintf+0x37a>
    1b6c:	8b e2       	ldi	r24, 0x2B	; 43
    1b6e:	01 c0       	rjmp	.+2      	; 0x1b72 <vfprintf+0x37c>
    1b70:	80 e2       	ldi	r24, 0x20	; 32
    1b72:	a7 fc       	sbrc	r10, 7
    1b74:	8d e2       	ldi	r24, 0x2D	; 45
    1b76:	b6 01       	movw	r22, r12
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	50 d0       	rcall	.+160    	; 0x1c1c <fputc>
    1b7c:	89 14       	cp	r8, r9
    1b7e:	30 f4       	brcc	.+12     	; 0x1b8c <vfprintf+0x396>
    1b80:	b6 01       	movw	r22, r12
    1b82:	80 e3       	ldi	r24, 0x30	; 48
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	4a d0       	rcall	.+148    	; 0x1c1c <fputc>
    1b88:	9a 94       	dec	r9
    1b8a:	f8 cf       	rjmp	.-16     	; 0x1b7c <vfprintf+0x386>
    1b8c:	8a 94       	dec	r8
    1b8e:	f3 01       	movw	r30, r6
    1b90:	e8 0d       	add	r30, r8
    1b92:	f1 1d       	adc	r31, r1
    1b94:	80 81       	ld	r24, Z
    1b96:	b6 01       	movw	r22, r12
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	40 d0       	rcall	.+128    	; 0x1c1c <fputc>
    1b9c:	81 10       	cpse	r8, r1
    1b9e:	f6 cf       	rjmp	.-20     	; 0x1b8c <vfprintf+0x396>
    1ba0:	22 20       	and	r2, r2
    1ba2:	09 f4       	brne	.+2      	; 0x1ba6 <vfprintf+0x3b0>
    1ba4:	4e ce       	rjmp	.-868    	; 0x1842 <vfprintf+0x4c>
    1ba6:	b6 01       	movw	r22, r12
    1ba8:	80 e2       	ldi	r24, 0x20	; 32
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	37 d0       	rcall	.+110    	; 0x1c1c <fputc>
    1bae:	2a 94       	dec	r2
    1bb0:	f7 cf       	rjmp	.-18     	; 0x1ba0 <vfprintf+0x3aa>
    1bb2:	f6 01       	movw	r30, r12
    1bb4:	86 81       	ldd	r24, Z+6	; 0x06
    1bb6:	97 81       	ldd	r25, Z+7	; 0x07
    1bb8:	02 c0       	rjmp	.+4      	; 0x1bbe <vfprintf+0x3c8>
    1bba:	8f ef       	ldi	r24, 0xFF	; 255
    1bbc:	9f ef       	ldi	r25, 0xFF	; 255
    1bbe:	2b 96       	adiw	r28, 0x0b	; 11
    1bc0:	0f b6       	in	r0, 0x3f	; 63
    1bc2:	f8 94       	cli
    1bc4:	de bf       	out	0x3e, r29	; 62
    1bc6:	0f be       	out	0x3f, r0	; 63
    1bc8:	cd bf       	out	0x3d, r28	; 61
    1bca:	df 91       	pop	r29
    1bcc:	cf 91       	pop	r28
    1bce:	1f 91       	pop	r17
    1bd0:	0f 91       	pop	r16
    1bd2:	ff 90       	pop	r15
    1bd4:	ef 90       	pop	r14
    1bd6:	df 90       	pop	r13
    1bd8:	cf 90       	pop	r12
    1bda:	bf 90       	pop	r11
    1bdc:	af 90       	pop	r10
    1bde:	9f 90       	pop	r9
    1be0:	8f 90       	pop	r8
    1be2:	7f 90       	pop	r7
    1be4:	6f 90       	pop	r6
    1be6:	5f 90       	pop	r5
    1be8:	4f 90       	pop	r4
    1bea:	3f 90       	pop	r3
    1bec:	2f 90       	pop	r2
    1bee:	08 95       	ret

00001bf0 <strnlen_P>:
    1bf0:	fc 01       	movw	r30, r24
    1bf2:	05 90       	lpm	r0, Z+
    1bf4:	61 50       	subi	r22, 0x01	; 1
    1bf6:	70 40       	sbci	r23, 0x00	; 0
    1bf8:	01 10       	cpse	r0, r1
    1bfa:	d8 f7       	brcc	.-10     	; 0x1bf2 <strnlen_P+0x2>
    1bfc:	80 95       	com	r24
    1bfe:	90 95       	com	r25
    1c00:	8e 0f       	add	r24, r30
    1c02:	9f 1f       	adc	r25, r31
    1c04:	08 95       	ret

00001c06 <strnlen>:
    1c06:	fc 01       	movw	r30, r24
    1c08:	61 50       	subi	r22, 0x01	; 1
    1c0a:	70 40       	sbci	r23, 0x00	; 0
    1c0c:	01 90       	ld	r0, Z+
    1c0e:	01 10       	cpse	r0, r1
    1c10:	d8 f7       	brcc	.-10     	; 0x1c08 <strnlen+0x2>
    1c12:	80 95       	com	r24
    1c14:	90 95       	com	r25
    1c16:	8e 0f       	add	r24, r30
    1c18:	9f 1f       	adc	r25, r31
    1c1a:	08 95       	ret

00001c1c <fputc>:
    1c1c:	0f 93       	push	r16
    1c1e:	1f 93       	push	r17
    1c20:	cf 93       	push	r28
    1c22:	df 93       	push	r29
    1c24:	fb 01       	movw	r30, r22
    1c26:	23 81       	ldd	r18, Z+3	; 0x03
    1c28:	21 fd       	sbrc	r18, 1
    1c2a:	03 c0       	rjmp	.+6      	; 0x1c32 <fputc+0x16>
    1c2c:	8f ef       	ldi	r24, 0xFF	; 255
    1c2e:	9f ef       	ldi	r25, 0xFF	; 255
    1c30:	2c c0       	rjmp	.+88     	; 0x1c8a <fputc+0x6e>
    1c32:	22 ff       	sbrs	r18, 2
    1c34:	16 c0       	rjmp	.+44     	; 0x1c62 <fputc+0x46>
    1c36:	46 81       	ldd	r20, Z+6	; 0x06
    1c38:	57 81       	ldd	r21, Z+7	; 0x07
    1c3a:	24 81       	ldd	r18, Z+4	; 0x04
    1c3c:	35 81       	ldd	r19, Z+5	; 0x05
    1c3e:	42 17       	cp	r20, r18
    1c40:	53 07       	cpc	r21, r19
    1c42:	44 f4       	brge	.+16     	; 0x1c54 <fputc+0x38>
    1c44:	a0 81       	ld	r26, Z
    1c46:	b1 81       	ldd	r27, Z+1	; 0x01
    1c48:	9d 01       	movw	r18, r26
    1c4a:	2f 5f       	subi	r18, 0xFF	; 255
    1c4c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c4e:	31 83       	std	Z+1, r19	; 0x01
    1c50:	20 83       	st	Z, r18
    1c52:	8c 93       	st	X, r24
    1c54:	26 81       	ldd	r18, Z+6	; 0x06
    1c56:	37 81       	ldd	r19, Z+7	; 0x07
    1c58:	2f 5f       	subi	r18, 0xFF	; 255
    1c5a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c5c:	37 83       	std	Z+7, r19	; 0x07
    1c5e:	26 83       	std	Z+6, r18	; 0x06
    1c60:	14 c0       	rjmp	.+40     	; 0x1c8a <fputc+0x6e>
    1c62:	8b 01       	movw	r16, r22
    1c64:	ec 01       	movw	r28, r24
    1c66:	fb 01       	movw	r30, r22
    1c68:	00 84       	ldd	r0, Z+8	; 0x08
    1c6a:	f1 85       	ldd	r31, Z+9	; 0x09
    1c6c:	e0 2d       	mov	r30, r0
    1c6e:	19 95       	eicall
    1c70:	89 2b       	or	r24, r25
    1c72:	e1 f6       	brne	.-72     	; 0x1c2c <fputc+0x10>
    1c74:	d8 01       	movw	r26, r16
    1c76:	16 96       	adiw	r26, 0x06	; 6
    1c78:	8d 91       	ld	r24, X+
    1c7a:	9c 91       	ld	r25, X
    1c7c:	17 97       	sbiw	r26, 0x07	; 7
    1c7e:	01 96       	adiw	r24, 0x01	; 1
    1c80:	17 96       	adiw	r26, 0x07	; 7
    1c82:	9c 93       	st	X, r25
    1c84:	8e 93       	st	-X, r24
    1c86:	16 97       	sbiw	r26, 0x06	; 6
    1c88:	ce 01       	movw	r24, r28
    1c8a:	df 91       	pop	r29
    1c8c:	cf 91       	pop	r28
    1c8e:	1f 91       	pop	r17
    1c90:	0f 91       	pop	r16
    1c92:	08 95       	ret

00001c94 <__ultoa_invert>:
    1c94:	fa 01       	movw	r30, r20
    1c96:	aa 27       	eor	r26, r26
    1c98:	28 30       	cpi	r18, 0x08	; 8
    1c9a:	51 f1       	breq	.+84     	; 0x1cf0 <__ultoa_invert+0x5c>
    1c9c:	20 31       	cpi	r18, 0x10	; 16
    1c9e:	81 f1       	breq	.+96     	; 0x1d00 <__ultoa_invert+0x6c>
    1ca0:	e8 94       	clt
    1ca2:	6f 93       	push	r22
    1ca4:	6e 7f       	andi	r22, 0xFE	; 254
    1ca6:	6e 5f       	subi	r22, 0xFE	; 254
    1ca8:	7f 4f       	sbci	r23, 0xFF	; 255
    1caa:	8f 4f       	sbci	r24, 0xFF	; 255
    1cac:	9f 4f       	sbci	r25, 0xFF	; 255
    1cae:	af 4f       	sbci	r26, 0xFF	; 255
    1cb0:	b1 e0       	ldi	r27, 0x01	; 1
    1cb2:	3e d0       	rcall	.+124    	; 0x1d30 <__ultoa_invert+0x9c>
    1cb4:	b4 e0       	ldi	r27, 0x04	; 4
    1cb6:	3c d0       	rcall	.+120    	; 0x1d30 <__ultoa_invert+0x9c>
    1cb8:	67 0f       	add	r22, r23
    1cba:	78 1f       	adc	r23, r24
    1cbc:	89 1f       	adc	r24, r25
    1cbe:	9a 1f       	adc	r25, r26
    1cc0:	a1 1d       	adc	r26, r1
    1cc2:	68 0f       	add	r22, r24
    1cc4:	79 1f       	adc	r23, r25
    1cc6:	8a 1f       	adc	r24, r26
    1cc8:	91 1d       	adc	r25, r1
    1cca:	a1 1d       	adc	r26, r1
    1ccc:	6a 0f       	add	r22, r26
    1cce:	71 1d       	adc	r23, r1
    1cd0:	81 1d       	adc	r24, r1
    1cd2:	91 1d       	adc	r25, r1
    1cd4:	a1 1d       	adc	r26, r1
    1cd6:	20 d0       	rcall	.+64     	; 0x1d18 <__ultoa_invert+0x84>
    1cd8:	09 f4       	brne	.+2      	; 0x1cdc <__ultoa_invert+0x48>
    1cda:	68 94       	set
    1cdc:	3f 91       	pop	r19
    1cde:	2a e0       	ldi	r18, 0x0A	; 10
    1ce0:	26 9f       	mul	r18, r22
    1ce2:	11 24       	eor	r1, r1
    1ce4:	30 19       	sub	r19, r0
    1ce6:	30 5d       	subi	r19, 0xD0	; 208
    1ce8:	31 93       	st	Z+, r19
    1cea:	de f6       	brtc	.-74     	; 0x1ca2 <__ultoa_invert+0xe>
    1cec:	cf 01       	movw	r24, r30
    1cee:	08 95       	ret
    1cf0:	46 2f       	mov	r20, r22
    1cf2:	47 70       	andi	r20, 0x07	; 7
    1cf4:	40 5d       	subi	r20, 0xD0	; 208
    1cf6:	41 93       	st	Z+, r20
    1cf8:	b3 e0       	ldi	r27, 0x03	; 3
    1cfa:	0f d0       	rcall	.+30     	; 0x1d1a <__ultoa_invert+0x86>
    1cfc:	c9 f7       	brne	.-14     	; 0x1cf0 <__ultoa_invert+0x5c>
    1cfe:	f6 cf       	rjmp	.-20     	; 0x1cec <__ultoa_invert+0x58>
    1d00:	46 2f       	mov	r20, r22
    1d02:	4f 70       	andi	r20, 0x0F	; 15
    1d04:	40 5d       	subi	r20, 0xD0	; 208
    1d06:	4a 33       	cpi	r20, 0x3A	; 58
    1d08:	18 f0       	brcs	.+6      	; 0x1d10 <__ultoa_invert+0x7c>
    1d0a:	49 5d       	subi	r20, 0xD9	; 217
    1d0c:	31 fd       	sbrc	r19, 1
    1d0e:	40 52       	subi	r20, 0x20	; 32
    1d10:	41 93       	st	Z+, r20
    1d12:	02 d0       	rcall	.+4      	; 0x1d18 <__ultoa_invert+0x84>
    1d14:	a9 f7       	brne	.-22     	; 0x1d00 <__ultoa_invert+0x6c>
    1d16:	ea cf       	rjmp	.-44     	; 0x1cec <__ultoa_invert+0x58>
    1d18:	b4 e0       	ldi	r27, 0x04	; 4
    1d1a:	a6 95       	lsr	r26
    1d1c:	97 95       	ror	r25
    1d1e:	87 95       	ror	r24
    1d20:	77 95       	ror	r23
    1d22:	67 95       	ror	r22
    1d24:	ba 95       	dec	r27
    1d26:	c9 f7       	brne	.-14     	; 0x1d1a <__ultoa_invert+0x86>
    1d28:	00 97       	sbiw	r24, 0x00	; 0
    1d2a:	61 05       	cpc	r22, r1
    1d2c:	71 05       	cpc	r23, r1
    1d2e:	08 95       	ret
    1d30:	9b 01       	movw	r18, r22
    1d32:	ac 01       	movw	r20, r24
    1d34:	0a 2e       	mov	r0, r26
    1d36:	06 94       	lsr	r0
    1d38:	57 95       	ror	r21
    1d3a:	47 95       	ror	r20
    1d3c:	37 95       	ror	r19
    1d3e:	27 95       	ror	r18
    1d40:	ba 95       	dec	r27
    1d42:	c9 f7       	brne	.-14     	; 0x1d36 <__ultoa_invert+0xa2>
    1d44:	62 0f       	add	r22, r18
    1d46:	73 1f       	adc	r23, r19
    1d48:	84 1f       	adc	r24, r20
    1d4a:	95 1f       	adc	r25, r21
    1d4c:	a0 1d       	adc	r26, r0
    1d4e:	08 95       	ret

00001d50 <__divmodsi4>:
    1d50:	05 2e       	mov	r0, r21
    1d52:	97 fb       	bst	r25, 7
    1d54:	16 f4       	brtc	.+4      	; 0x1d5a <__divmodsi4+0xa>
    1d56:	00 94       	com	r0
    1d58:	0f d0       	rcall	.+30     	; 0x1d78 <__negsi2>
    1d5a:	57 fd       	sbrc	r21, 7
    1d5c:	05 d0       	rcall	.+10     	; 0x1d68 <__divmodsi4_neg2>
    1d5e:	92 dc       	rcall	.-1756   	; 0x1684 <__udivmodsi4>
    1d60:	07 fc       	sbrc	r0, 7
    1d62:	02 d0       	rcall	.+4      	; 0x1d68 <__divmodsi4_neg2>
    1d64:	46 f4       	brtc	.+16     	; 0x1d76 <__divmodsi4_exit>
    1d66:	08 c0       	rjmp	.+16     	; 0x1d78 <__negsi2>

00001d68 <__divmodsi4_neg2>:
    1d68:	50 95       	com	r21
    1d6a:	40 95       	com	r20
    1d6c:	30 95       	com	r19
    1d6e:	21 95       	neg	r18
    1d70:	3f 4f       	sbci	r19, 0xFF	; 255
    1d72:	4f 4f       	sbci	r20, 0xFF	; 255
    1d74:	5f 4f       	sbci	r21, 0xFF	; 255

00001d76 <__divmodsi4_exit>:
    1d76:	08 95       	ret

00001d78 <__negsi2>:
    1d78:	90 95       	com	r25
    1d7a:	80 95       	com	r24
    1d7c:	70 95       	com	r23
    1d7e:	61 95       	neg	r22
    1d80:	7f 4f       	sbci	r23, 0xFF	; 255
    1d82:	8f 4f       	sbci	r24, 0xFF	; 255
    1d84:	9f 4f       	sbci	r25, 0xFF	; 255
    1d86:	08 95       	ret

00001d88 <__muluhisi3>:
    1d88:	0f d0       	rcall	.+30     	; 0x1da8 <__umulhisi3>
    1d8a:	a5 9f       	mul	r26, r21
    1d8c:	90 0d       	add	r25, r0
    1d8e:	b4 9f       	mul	r27, r20
    1d90:	90 0d       	add	r25, r0
    1d92:	a4 9f       	mul	r26, r20
    1d94:	80 0d       	add	r24, r0
    1d96:	91 1d       	adc	r25, r1
    1d98:	11 24       	eor	r1, r1
    1d9a:	08 95       	ret

00001d9c <__mulshisi3>:
    1d9c:	b7 ff       	sbrs	r27, 7
    1d9e:	f4 cf       	rjmp	.-24     	; 0x1d88 <__muluhisi3>

00001da0 <__mulohisi3>:
    1da0:	f3 df       	rcall	.-26     	; 0x1d88 <__muluhisi3>
    1da2:	82 1b       	sub	r24, r18
    1da4:	93 0b       	sbc	r25, r19
    1da6:	08 95       	ret

00001da8 <__umulhisi3>:
    1da8:	a2 9f       	mul	r26, r18
    1daa:	b0 01       	movw	r22, r0
    1dac:	b3 9f       	mul	r27, r19
    1dae:	c0 01       	movw	r24, r0
    1db0:	a3 9f       	mul	r26, r19
    1db2:	70 0d       	add	r23, r0
    1db4:	81 1d       	adc	r24, r1
    1db6:	11 24       	eor	r1, r1
    1db8:	91 1d       	adc	r25, r1
    1dba:	b2 9f       	mul	r27, r18
    1dbc:	70 0d       	add	r23, r0
    1dbe:	81 1d       	adc	r24, r1
    1dc0:	11 24       	eor	r1, r1
    1dc2:	91 1d       	adc	r25, r1
    1dc4:	08 95       	ret

00001dc6 <_exit>:
    1dc6:	f8 94       	cli

00001dc8 <__stop_program>:
    1dc8:	ff cf       	rjmp	.-2      	; 0x1dc8 <__stop_program>
