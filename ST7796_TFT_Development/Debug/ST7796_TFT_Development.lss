
ST7796_TFT_Development.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000006c6  00800200  000020fa  0000218e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002a9  008008c6  008008c6  00002854  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002854  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000028b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d0  00000000  00000000  000028f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004ef5  00000000  00000000  00002bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000190a  00000000  00000000  00007ab5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001fa0  00000000  00000000  000093bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d14  00000000  00000000  0000b360  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000012c6  00000000  00000000  0000c074  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000426f  00000000  00000000  0000d33a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000388  00000000  00000000  000115a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	84 c0       	rjmp	.+264    	; 0x166 <__vector_23>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	dc c5       	rjmp	.+3000   	; 0xc1e <__vector_25>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	18 e0       	ldi	r17, 0x08	; 8
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ea ef       	ldi	r30, 0xFA	; 250
      fc:	f0 e2       	ldi	r31, 0x20	; 32
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a6 3c       	cpi	r26, 0xC6	; 198
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	2b e0       	ldi	r18, 0x0B	; 11
     110:	a6 ec       	ldi	r26, 0xC6	; 198
     112:	b8 e0       	ldi	r27, 0x08	; 8
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	af 36       	cpi	r26, 0x6F	; 111
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	c1 d5       	rcall	.+2946   	; 0xca2 <main>
     120:	0c 94 7b 10 	jmp	0x20f6	; 0x20f6 <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <timer0_init>:
	bit 2 = 0
	
	WGM01 = 0     "Normal" timer/counter mode
	WGM00 = 0
	*/
	TCCR0A = 0b00000000;
     126:	14 bc       	out	0x24, r1	; 36
	
	CS02 = 0
	CS01 = 1      clock / 64 = 250kHz -> /256 -> 1024us per overflow
	CS00 = 1
	*/
	TCCR0B = 0b00000011;
     128:	83 e0       	ldi	r24, 0x03	; 3
     12a:	85 bd       	out	0x25, r24	; 37
	bit 3 = 0
	OCIE0B = 0    don't enable Timer/Counter 0 Output Compare Match B Interrupt
	OCIE0A = 0    don't enable Timer/Counter 0 Output Compare Match A Interrupt Enable
	TOIE0 = 1     enable Timer/Counter 0 Overflow Interrupt
	*/
	TIMSK0 = 0b00000001;
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
	TCNT0 = 0;
     132:	16 bc       	out	0x26, r1	; 38
     134:	08 95       	ret

00000136 <Backlight_Init>:
	
}

void Backlight_Init(void)
{
  timer0_init();
     136:	f7 cf       	rjmp	.-18     	; 0x126 <timer0_init>
     138:	08 95       	ret

0000013a <SetBackLightDuty>:
}

void SetBackLightDuty(uint8_t dutyCycle)
{
  DDRB |= (1<<PB7);  //set pin as output
     13a:	27 9a       	sbi	0x04, 7	; 4
  TCCR0A |= (1<<COM0A1); //enable output compare on PD6, clear OC0A on compare, set OC0A at BOTTOM
     13c:	94 b5       	in	r25, 0x24	; 36
     13e:	90 68       	ori	r25, 0x80	; 128
     140:	94 bd       	out	0x24, r25	; 36
  TCCR0A |= (1<<WGM01) | (1<<WGM00); //Fast PWM mode
     142:	94 b5       	in	r25, 0x24	; 36
     144:	93 60       	ori	r25, 0x03	; 3
     146:	94 bd       	out	0x24, r25	; 36
  
  if (dutyCycle > 100) OCR0A = 0xff;    //upper 8bit PWM boundary
     148:	85 36       	cpi	r24, 0x65	; 101
     14a:	18 f0       	brcs	.+6      	; 0x152 <SetBackLightDuty+0x18>
     14c:	8f ef       	ldi	r24, 0xFF	; 255
     14e:	87 bd       	out	0x27, r24	; 39
     150:	08 95       	ret
  else if(dutyCycle < 0) OCR0A = 0x00;  //lower PWM boundary
  else if ((dutyCycle <= 100) && (dutyCycle >= 0)) OCR0A = dutyCycle * 255 / 100; //duty cycle percentage converted to 8 bit
     152:	2f ef       	ldi	r18, 0xFF	; 255
     154:	82 9f       	mul	r24, r18
     156:	c0 01       	movw	r24, r0
     158:	11 24       	eor	r1, r1
     15a:	64 e6       	ldi	r22, 0x64	; 100
     15c:	70 e0       	ldi	r23, 0x00	; 0
     15e:	0e 94 c7 0c 	call	0x198e	; 0x198e <__divmodhi4>
     162:	67 bd       	out	0x27, r22	; 39
     164:	08 95       	ret

00000166 <__vector_23>:

/************************************************************************/
/* Private function definitions                                         */
/************************************************************************/
ISR (TIMER0_OVF_vect)
{
     166:	1f 92       	push	r1
     168:	0f 92       	push	r0
     16a:	0f b6       	in	r0, 0x3f	; 63
     16c:	0f 92       	push	r0
     16e:	11 24       	eor	r1, r1
     170:	2f 93       	push	r18
     172:	3f 93       	push	r19
     174:	8f 93       	push	r24
     176:	9f 93       	push	r25
     178:	af 93       	push	r26
     17a:	bf 93       	push	r27
  unsigned long m = milli_second;
     17c:	80 91 04 0b 	lds	r24, 0x0B04	; 0x800b04 <milli_second>
     180:	90 91 05 0b 	lds	r25, 0x0B05	; 0x800b05 <milli_second+0x1>
     184:	a0 91 06 0b 	lds	r26, 0x0B06	; 0x800b06 <milli_second+0x2>
     188:	b0 91 07 0b 	lds	r27, 0x0B07	; 0x800b07 <milli_second+0x3>
  unsigned char f = milli_fraction;
     18c:	30 91 03 0b 	lds	r19, 0x0B03	; 0x800b03 <milli_fraction>
  m += MILLIS_INC;
  f += FRACT_INC;
     190:	23 e0       	ldi	r18, 0x03	; 3
     192:	23 0f       	add	r18, r19
  if (f >= FRACT_MAX) {
     194:	2d 37       	cpi	r18, 0x7D	; 125
     196:	20 f4       	brcc	.+8      	; 0x1a0 <__vector_23+0x3a>
/************************************************************************/
ISR (TIMER0_OVF_vect)
{
  unsigned long m = milli_second;
  unsigned char f = milli_fraction;
  m += MILLIS_INC;
     198:	01 96       	adiw	r24, 0x01	; 1
     19a:	a1 1d       	adc	r26, r1
     19c:	b1 1d       	adc	r27, r1
     19e:	05 c0       	rjmp	.+10     	; 0x1aa <__vector_23+0x44>
  f += FRACT_INC;
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
     1a0:	26 e8       	ldi	r18, 0x86	; 134
     1a2:	23 0f       	add	r18, r19
    m +=1;
     1a4:	02 96       	adiw	r24, 0x02	; 2
     1a6:	a1 1d       	adc	r26, r1
     1a8:	b1 1d       	adc	r27, r1
  }
  milli_second = m;
     1aa:	80 93 04 0b 	sts	0x0B04, r24	; 0x800b04 <milli_second>
     1ae:	90 93 05 0b 	sts	0x0B05, r25	; 0x800b05 <milli_second+0x1>
     1b2:	a0 93 06 0b 	sts	0x0B06, r26	; 0x800b06 <milli_second+0x2>
     1b6:	b0 93 07 0b 	sts	0x0B07, r27	; 0x800b07 <milli_second+0x3>
  milli_fraction = f;
     1ba:	20 93 03 0b 	sts	0x0B03, r18	; 0x800b03 <milli_fraction>
  timer0_counts++;
     1be:	80 91 ff 0a 	lds	r24, 0x0AFF	; 0x800aff <timer0_counts>
     1c2:	90 91 00 0b 	lds	r25, 0x0B00	; 0x800b00 <timer0_counts+0x1>
     1c6:	a0 91 01 0b 	lds	r26, 0x0B01	; 0x800b01 <timer0_counts+0x2>
     1ca:	b0 91 02 0b 	lds	r27, 0x0B02	; 0x800b02 <timer0_counts+0x3>
     1ce:	01 96       	adiw	r24, 0x01	; 1
     1d0:	a1 1d       	adc	r26, r1
     1d2:	b1 1d       	adc	r27, r1
     1d4:	80 93 ff 0a 	sts	0x0AFF, r24	; 0x800aff <timer0_counts>
     1d8:	90 93 00 0b 	sts	0x0B00, r25	; 0x800b00 <timer0_counts+0x1>
     1dc:	a0 93 01 0b 	sts	0x0B01, r26	; 0x800b01 <timer0_counts+0x2>
     1e0:	b0 93 02 0b 	sts	0x0B02, r27	; 0x800b02 <timer0_counts+0x3>
     1e4:	bf 91       	pop	r27
     1e6:	af 91       	pop	r26
     1e8:	9f 91       	pop	r25
     1ea:	8f 91       	pop	r24
     1ec:	3f 91       	pop	r19
     1ee:	2f 91       	pop	r18
     1f0:	0f 90       	pop	r0
     1f2:	0f be       	out	0x3f, r0	; 63
     1f4:	0f 90       	pop	r0
     1f6:	1f 90       	pop	r1
     1f8:	18 95       	reti

000001fa <pDDRV_Button_init>:
static __Button_Status button;

void pDDRV_Button_init(void)
{

  DDRF &= ~((1<<PF0) | (1<<PF1) | (1<<PF2) | (1<<PF3) | (1<<PF4));
     1fa:	80 b3       	in	r24, 0x10	; 16
     1fc:	80 7e       	andi	r24, 0xE0	; 224
     1fe:	80 bb       	out	0x10, r24	; 16
  PORTF |= ((1<<PF0) | (1<<PF1) | (1<<PF2) | (1<<PF3) | (1<<PF4));
     200:	81 b3       	in	r24, 0x11	; 17
     202:	8f 61       	ori	r24, 0x1F	; 31
     204:	81 bb       	out	0x11, r24	; 17
  mButtonStatusNew = BUTTON_UNPRESSED;
     206:	81 e0       	ldi	r24, 0x01	; 1
     208:	80 93 c6 08 	sts	0x08C6, r24	; 0x8008c6 <__data_end>
     20c:	08 95       	ret

0000020e <pDDRV_Button_readButton>:
}

uint8_t pDDRV_Button_readButton(__ButtonTypeDef buttonNum)
{
  switch (buttonNum)
     20e:	82 30       	cpi	r24, 0x02	; 2
     210:	91 f0       	breq	.+36     	; 0x236 <pDDRV_Button_readButton+0x28>
     212:	28 f4       	brcc	.+10     	; 0x21e <pDDRV_Button_readButton+0x10>
     214:	88 23       	and	r24, r24
     216:	41 f0       	breq	.+16     	; 0x228 <pDDRV_Button_readButton+0x1a>
     218:	81 30       	cpi	r24, 0x01	; 1
     21a:	49 f0       	breq	.+18     	; 0x22e <pDDRV_Button_readButton+0x20>
     21c:	1a c0       	rjmp	.+52     	; 0x252 <pDDRV_Button_readButton+0x44>
     21e:	83 30       	cpi	r24, 0x03	; 3
     220:	79 f0       	breq	.+30     	; 0x240 <pDDRV_Button_readButton+0x32>
     222:	84 30       	cpi	r24, 0x04	; 4
     224:	91 f0       	breq	.+36     	; 0x24a <pDDRV_Button_readButton+0x3c>
     226:	15 c0       	rjmp	.+42     	; 0x252 <pDDRV_Button_readButton+0x44>
  {
    case BUTTON_UP:
      if (PINF & (1<<PF0)) return 1;
     228:	8f b1       	in	r24, 0x0f	; 15
     22a:	81 70       	andi	r24, 0x01	; 1
     22c:	08 95       	ret
      else return 0;
      break;
    case BUTTON_LEFT:
      if (PINF & (1<<PF1)) return 1;
     22e:	8f b1       	in	r24, 0x0f	; 15
uint8_t pDDRV_Button_readButton(__ButtonTypeDef buttonNum)
{
  switch (buttonNum)
  {
    case BUTTON_UP:
      if (PINF & (1<<PF0)) return 1;
     230:	86 95       	lsr	r24
     232:	81 70       	andi	r24, 0x01	; 1
     234:	08 95       	ret
    case BUTTON_LEFT:
      if (PINF & (1<<PF1)) return 1;
      else return 0;
      break;
    case BUTTON_DOWN:
      if (PINF & (1<<PF2)) return 1;
     236:	8f b1       	in	r24, 0x0f	; 15
uint8_t pDDRV_Button_readButton(__ButtonTypeDef buttonNum)
{
  switch (buttonNum)
  {
    case BUTTON_UP:
      if (PINF & (1<<PF0)) return 1;
     238:	82 fb       	bst	r24, 2
     23a:	88 27       	eor	r24, r24
     23c:	80 f9       	bld	r24, 0
     23e:	08 95       	ret
    case BUTTON_DOWN:
      if (PINF & (1<<PF2)) return 1;
      else return 0;
      break;
    case BUTTON_RIGHT:
      if (PINF & (1<<PF3)) return 1;
     240:	8f b1       	in	r24, 0x0f	; 15
uint8_t pDDRV_Button_readButton(__ButtonTypeDef buttonNum)
{
  switch (buttonNum)
  {
    case BUTTON_UP:
      if (PINF & (1<<PF0)) return 1;
     242:	83 fb       	bst	r24, 3
     244:	88 27       	eor	r24, r24
     246:	80 f9       	bld	r24, 0
     248:	08 95       	ret
    case BUTTON_RIGHT:
      if (PINF & (1<<PF3)) return 1;
      else return 0;
      break;
    case BUTTON_ROTATE:
      if (PINF & (1<<PF4)) return 1;
     24a:	8f b1       	in	r24, 0x0f	; 15
uint8_t pDDRV_Button_readButton(__ButtonTypeDef buttonNum)
{
  switch (buttonNum)
  {
    case BUTTON_UP:
      if (PINF & (1<<PF0)) return 1;
     24c:	82 95       	swap	r24
     24e:	81 70       	andi	r24, 0x01	; 1
     250:	08 95       	ret
      else return 0;
      break;
    default:
      break;
  }
  return 2;
     252:	82 e0       	ldi	r24, 0x02	; 2
}
     254:	08 95       	ret

00000256 <pDDRV_Button_GetStatus>:

__Button_Status pDDRV_Button_GetStatus(void)
{
     256:	7f 92       	push	r7
     258:	8f 92       	push	r8
     25a:	9f 92       	push	r9
     25c:	af 92       	push	r10
     25e:	bf 92       	push	r11
     260:	cf 92       	push	r12
     262:	df 92       	push	r13
     264:	ef 92       	push	r14
     266:	ff 92       	push	r15
     268:	0f 93       	push	r16
     26a:	1f 93       	push	r17
     26c:	cf 93       	push	r28
     26e:	df 93       	push	r29
     270:	00 d0       	rcall	.+0      	; 0x272 <pDDRV_Button_GetStatus+0x1c>
     272:	1f 92       	push	r1
     274:	1f 92       	push	r1
     276:	cd b7       	in	r28, 0x3d	; 61
     278:	de b7       	in	r29, 0x3e	; 62
      outputButtonStatus = BUTTON_PRESSED;
      mButtonStatusOld[NumBut] = mButtonStatusNew;
    } 
    else
    {
      outputButtonStatus = BUTTON_UNPRESSED;
     27a:	dd 24       	eor	r13, r13
     27c:	d3 94       	inc	r13
    {
      mButtonStatusNew = BUTTON_PRESSED;
    }
    else
    {
      mButtonStatusNew = BUTTON_UNPRESSED;
     27e:	cc 24       	eor	r12, r12
     280:	c3 94       	inc	r12
     282:	47 c0       	rjmp	.+142    	; 0x312 <pDDRV_Button_GetStatus+0xbc>
  {
    mButtonStatusCount = 0;
    //Check button status several times in a roll
    for (int i = 0; i < BUTTON_READ_NUM; i++)
    {
      if (pDDRV_Button_readButton(NumBut) == 0)
     284:	8f 2d       	mov	r24, r15
     286:	c3 df       	rcall	.-122    	; 0x20e <pDDRV_Button_readButton>
     288:	81 11       	cpse	r24, r1
     28a:	01 c0       	rjmp	.+2      	; 0x28e <pDDRV_Button_GetStatus+0x38>
      {
        mButtonStatusCount++;
     28c:	e3 94       	inc	r14
     28e:	01 50       	subi	r16, 0x01	; 1
     290:	11 09       	sbc	r17, r1
  uint8_t mButtonStatusCount = 0;
  for (uint8_t NumBut = 0; NumBut < BUTTON_NUM; NumBut++)
  {
    mButtonStatusCount = 0;
    //Check button status several times in a roll
    for (int i = 0; i < BUTTON_READ_NUM; i++)
     292:	c1 f7       	brne	.-16     	; 0x284 <pDDRV_Button_GetStatus+0x2e>
        mButtonStatusCount++;
      }
    }

    //If button is low for all attempted reads, then it is pressed
    if (mButtonStatusCount >= BUTTON_READ_NUM)
     294:	84 e0       	ldi	r24, 0x04	; 4
     296:	8e 15       	cp	r24, r14
     298:	60 f4       	brcc	.+24     	; 0x2b2 <pDDRV_Button_GetStatus+0x5c>
    {
      mButtonStatusNew = BUTTON_PRESSED;
     29a:	10 92 c6 08 	sts	0x08C6, r1	; 0x8008c6 <__data_end>
      mButtonStatusNew = BUTTON_UNPRESSED;
      mButtonStatusOld[NumBut] = BUTTON_UNPRESSED;
    }

    //If the new button status is pressed then output status is pressed
    if ((mButtonStatusNew == BUTTON_PRESSED) && (mButtonStatusNew != mButtonStatusOld[NumBut] ))
     29e:	8f 2d       	mov	r24, r15
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	fc 01       	movw	r30, r24
     2a4:	ec 5f       	subi	r30, 0xFC	; 252
     2a6:	fd 4f       	sbci	r31, 0xFD	; 253
     2a8:	20 81       	ld	r18, Z
     2aa:	21 11       	cpse	r18, r1
     2ac:	0c c0       	rjmp	.+24     	; 0x2c6 <pDDRV_Button_GetStatus+0x70>
      outputButtonStatus = BUTTON_PRESSED;
      mButtonStatusOld[NumBut] = mButtonStatusNew;
    } 
    else
    {
      outputButtonStatus = BUTTON_UNPRESSED;
     2ae:	8c 2d       	mov	r24, r12
     2b0:	10 c0       	rjmp	.+32     	; 0x2d2 <pDDRV_Button_GetStatus+0x7c>
    {
      mButtonStatusNew = BUTTON_PRESSED;
    }
    else
    {
      mButtonStatusNew = BUTTON_UNPRESSED;
     2b2:	c0 92 c6 08 	sts	0x08C6, r12	; 0x8008c6 <__data_end>
      mButtonStatusOld[NumBut] = BUTTON_UNPRESSED;
     2b6:	ef 2d       	mov	r30, r15
     2b8:	f0 e0       	ldi	r31, 0x00	; 0
     2ba:	ec 5f       	subi	r30, 0xFC	; 252
     2bc:	fd 4f       	sbci	r31, 0xFD	; 253
     2be:	c0 82       	st	Z, r12
    }

    //If the new button status is pressed then output status is pressed
    if ((mButtonStatusNew == BUTTON_PRESSED) && (mButtonStatusNew != mButtonStatusOld[NumBut] ))
     2c0:	2c 2d       	mov	r18, r12
      outputButtonStatus = BUTTON_PRESSED;
      mButtonStatusOld[NumBut] = mButtonStatusNew;
    } 
    else
    {
      outputButtonStatus = BUTTON_UNPRESSED;
     2c2:	8c 2d       	mov	r24, r12
     2c4:	06 c0       	rjmp	.+12     	; 0x2d2 <pDDRV_Button_GetStatus+0x7c>

    //If the new button status is pressed then output status is pressed
    if ((mButtonStatusNew == BUTTON_PRESSED) && (mButtonStatusNew != mButtonStatusOld[NumBut] ))
    {
      outputButtonStatus = BUTTON_PRESSED;
      mButtonStatusOld[NumBut] = mButtonStatusNew;
     2c6:	fc 01       	movw	r30, r24
     2c8:	ec 5f       	subi	r30, 0xFC	; 252
     2ca:	fd 4f       	sbci	r31, 0xFD	; 253
     2cc:	10 82       	st	Z, r1
      mButtonStatusNew = BUTTON_UNPRESSED;
      mButtonStatusOld[NumBut] = BUTTON_UNPRESSED;
    }

    //If the new button status is pressed then output status is pressed
    if ((mButtonStatusNew == BUTTON_PRESSED) && (mButtonStatusNew != mButtonStatusOld[NumBut] ))
     2ce:	20 e0       	ldi	r18, 0x00	; 0
    {
      outputButtonStatus = BUTTON_PRESSED;
     2d0:	80 e0       	ldi	r24, 0x00	; 0
    else
    {
      outputButtonStatus = BUTTON_UNPRESSED;
    }

    switch (NumBut)
     2d2:	92 e0       	ldi	r25, 0x02	; 2
     2d4:	f9 16       	cp	r15, r25
     2d6:	99 f0       	breq	.+38     	; 0x2fe <pDDRV_Button_GetStatus+0xa8>
     2d8:	9f 15       	cp	r25, r15
     2da:	30 f0       	brcs	.+12     	; 0x2e8 <pDDRV_Button_GetStatus+0x92>
     2dc:	ff 20       	and	r15, r15
     2de:	59 f0       	breq	.+22     	; 0x2f6 <pDDRV_Button_GetStatus+0xa0>
     2e0:	91 e0       	ldi	r25, 0x01	; 1
     2e2:	f9 16       	cp	r15, r25
     2e4:	51 f0       	breq	.+20     	; 0x2fa <pDDRV_Button_GetStatus+0xa4>
     2e6:	11 c0       	rjmp	.+34     	; 0x30a <pDDRV_Button_GetStatus+0xb4>
     2e8:	93 e0       	ldi	r25, 0x03	; 3
     2ea:	f9 16       	cp	r15, r25
     2ec:	51 f0       	breq	.+20     	; 0x302 <pDDRV_Button_GetStatus+0xac>
     2ee:	94 e0       	ldi	r25, 0x04	; 4
     2f0:	f9 16       	cp	r15, r25
     2f2:	49 f0       	breq	.+18     	; 0x306 <pDDRV_Button_GetStatus+0xb0>
     2f4:	0a c0       	rjmp	.+20     	; 0x30a <pDDRV_Button_GetStatus+0xb4>
    {
      case BUTTON_UP:
        ButtonStatus.up = outputButtonStatus;
     2f6:	78 2e       	mov	r7, r24
        break;
     2f8:	0b c0       	rjmp	.+22     	; 0x310 <pDDRV_Button_GetStatus+0xba>
      case BUTTON_LEFT:
        ButtonStatus.left = outputButtonStatus;
     2fa:	88 2e       	mov	r8, r24
        break;
     2fc:	09 c0       	rjmp	.+18     	; 0x310 <pDDRV_Button_GetStatus+0xba>
      case BUTTON_DOWN:
        ButtonStatus.down = mButtonStatusNew;
     2fe:	92 2e       	mov	r9, r18
        break;
     300:	07 c0       	rjmp	.+14     	; 0x310 <pDDRV_Button_GetStatus+0xba>
      case BUTTON_RIGHT:
        ButtonStatus.right = outputButtonStatus;
     302:	a8 2e       	mov	r10, r24
        break;
     304:	05 c0       	rjmp	.+10     	; 0x310 <pDDRV_Button_GetStatus+0xba>
      case BUTTON_ROTATE:
        ButtonStatus.rotate = outputButtonStatus;
     306:	b8 2e       	mov	r11, r24
     308:	0b c0       	rjmp	.+22     	; 0x320 <pDDRV_Button_GetStatus+0xca>
{
  __Button_Status ButtonStatus;

  bool outputButtonStatus = 2;
  uint8_t mButtonStatusCount = 0;
  for (uint8_t NumBut = 0; NumBut < BUTTON_NUM; NumBut++)
     30a:	84 e0       	ldi	r24, 0x04	; 4
     30c:	8d 15       	cp	r24, r13
     30e:	40 f0       	brcs	.+16     	; 0x320 <pDDRV_Button_GetStatus+0xca>
     310:	d3 94       	inc	r13
     312:	ff 24       	eor	r15, r15
     314:	fa 94       	dec	r15
     316:	fd 0c       	add	r15, r13
  }
  return 2;
}

__Button_Status pDDRV_Button_GetStatus(void)
{
     318:	05 e0       	ldi	r16, 0x05	; 5
     31a:	10 e0       	ldi	r17, 0x00	; 0
     31c:	e1 2c       	mov	r14, r1
     31e:	b2 cf       	rjmp	.-156    	; 0x284 <pDDRV_Button_GetStatus+0x2e>
        break;
    }
  }

  return ButtonStatus;
     320:	27 2d       	mov	r18, r7
     322:	38 2d       	mov	r19, r8
     324:	49 2d       	mov	r20, r9
     326:	5a 2d       	mov	r21, r10
     328:	6b 2d       	mov	r22, r11
     32a:	70 e0       	ldi	r23, 0x00	; 0
     32c:	80 e0       	ldi	r24, 0x00	; 0
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	0f 90       	pop	r0
     332:	0f 90       	pop	r0
     334:	0f 90       	pop	r0
     336:	0f 90       	pop	r0
     338:	0f 90       	pop	r0
     33a:	df 91       	pop	r29
     33c:	cf 91       	pop	r28
     33e:	1f 91       	pop	r17
     340:	0f 91       	pop	r16
     342:	ff 90       	pop	r15
     344:	ef 90       	pop	r14
     346:	df 90       	pop	r13
     348:	cf 90       	pop	r12
     34a:	bf 90       	pop	r11
     34c:	af 90       	pop	r10
     34e:	9f 90       	pop	r9
     350:	8f 90       	pop	r8
     352:	7f 90       	pop	r7
     354:	08 95       	ret

00000356 <LCD_WR_DATA>:
  LCD_CS_SET;
}

static void LCD_WR_DATA(uint8_t data)
{
  LCD_CS_CLR;
     356:	28 98       	cbi	0x05, 0	; 5
  LCD_RS_SET;
     358:	75 9a       	sbi	0x0e, 5	; 14
  SPI_Master_transmit(data);
     35a:	45 d4       	rcall	.+2186   	; 0xbe6 <SPI_Master_transmit>
  LCD_CS_SET;
     35c:	28 9a       	sbi	0x05, 0	; 5
     35e:	08 95       	ret

00000360 <LCD_WR_REG>:
/************************************************************************/
/* Private function definitions                                         */
/************************************************************************/
static void LCD_WR_REG(uint8_t data)
{
  LCD_CS_CLR;
     360:	28 98       	cbi	0x05, 0	; 5
  LCD_RS_CLR;
     362:	75 98       	cbi	0x0e, 5	; 14
  SPI_Master_transmit(data);
     364:	40 d4       	rcall	.+2176   	; 0xbe6 <SPI_Master_transmit>
  LCD_CS_SET;
     366:	28 9a       	sbi	0x05, 0	; 5
     368:	08 95       	ret

0000036a <LCD_RESET>:
  LCD_CS_SET;
}

void LCD_RESET(void)
{
  LCD_RST_CLR;
     36a:	74 98       	cbi	0x0e, 4	; 14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     36c:	2f ef       	ldi	r18, 0xFF	; 255
     36e:	81 ee       	ldi	r24, 0xE1	; 225
     370:	94 e0       	ldi	r25, 0x04	; 4
     372:	21 50       	subi	r18, 0x01	; 1
     374:	80 40       	sbci	r24, 0x00	; 0
     376:	90 40       	sbci	r25, 0x00	; 0
     378:	e1 f7       	brne	.-8      	; 0x372 <LCD_RESET+0x8>
     37a:	00 c0       	rjmp	.+0      	; 0x37c <LCD_RESET+0x12>
     37c:	00 00       	nop
  _delay_ms(100);
  LCD_RST_SET;
     37e:	74 9a       	sbi	0x0e, 4	; 14
     380:	2f ef       	ldi	r18, 0xFF	; 255
     382:	80 e7       	ldi	r24, 0x70	; 112
     384:	92 e0       	ldi	r25, 0x02	; 2
     386:	21 50       	subi	r18, 0x01	; 1
     388:	80 40       	sbci	r24, 0x00	; 0
     38a:	90 40       	sbci	r25, 0x00	; 0
     38c:	e1 f7       	brne	.-8      	; 0x386 <LCD_RESET+0x1c>
     38e:	00 c0       	rjmp	.+0      	; 0x390 <LCD_RESET+0x26>
     390:	00 00       	nop
     392:	08 95       	ret

00000394 <LCD_SetWindows>:
  _delay_ms(50);
}

void LCD_SetWindows(uint16_t xStar, uint16_t yStar, uint16_t xEnd, uint16_t yEnd)
{
     394:	af 92       	push	r10
     396:	bf 92       	push	r11
     398:	cf 92       	push	r12
     39a:	df 92       	push	r13
     39c:	ef 92       	push	r14
     39e:	ff 92       	push	r15
     3a0:	0f 93       	push	r16
     3a2:	1f 93       	push	r17
     3a4:	cf 93       	push	r28
     3a6:	df 93       	push	r29
     3a8:	b8 2e       	mov	r11, r24
     3aa:	a9 2e       	mov	r10, r25
     3ac:	f6 2e       	mov	r15, r22
     3ae:	e7 2e       	mov	r14, r23
     3b0:	d4 2e       	mov	r13, r20
     3b2:	c5 2e       	mov	r12, r21
     3b4:	12 2f       	mov	r17, r18
     3b6:	03 2f       	mov	r16, r19
  LCD_WR_REG(lcddev.setxcmd);
     3b8:	c8 e0       	ldi	r28, 0x08	; 8
     3ba:	db e0       	ldi	r29, 0x0B	; 11
     3bc:	89 85       	ldd	r24, Y+9	; 0x09
     3be:	d0 df       	rcall	.-96     	; 0x360 <LCD_WR_REG>
  LCD_WR_DATA(xStar >> 8);
     3c0:	8a 2d       	mov	r24, r10
     3c2:	c9 df       	rcall	.-110    	; 0x356 <LCD_WR_DATA>
  LCD_WR_DATA(0x00FF & xStar);
     3c4:	8b 2d       	mov	r24, r11
     3c6:	c7 df       	rcall	.-114    	; 0x356 <LCD_WR_DATA>
  LCD_WR_DATA(xEnd >> 8);
     3c8:	8c 2d       	mov	r24, r12
     3ca:	c5 df       	rcall	.-118    	; 0x356 <LCD_WR_DATA>
  LCD_WR_DATA(0x00FF & xEnd);
     3cc:	8d 2d       	mov	r24, r13
     3ce:	c3 df       	rcall	.-122    	; 0x356 <LCD_WR_DATA>

  LCD_WR_REG(lcddev.setycmd);
     3d0:	8b 85       	ldd	r24, Y+11	; 0x0b
     3d2:	c6 df       	rcall	.-116    	; 0x360 <LCD_WR_REG>
  LCD_WR_DATA(yStar >> 8);
     3d4:	8e 2d       	mov	r24, r14
     3d6:	bf df       	rcall	.-130    	; 0x356 <LCD_WR_DATA>
  LCD_WR_DATA(0x00FF & yStar);
     3d8:	8f 2d       	mov	r24, r15
     3da:	bd df       	rcall	.-134    	; 0x356 <LCD_WR_DATA>
  LCD_WR_DATA(yEnd >> 8);
     3dc:	80 2f       	mov	r24, r16
     3de:	bb df       	rcall	.-138    	; 0x356 <LCD_WR_DATA>
     3e0:	81 2f       	mov	r24, r17
  LCD_WR_DATA(0x00FF & yEnd);
     3e2:	b9 df       	rcall	.-142    	; 0x356 <LCD_WR_DATA>
     3e4:	8f 81       	ldd	r24, Y+7	; 0x07
     3e6:	bc df       	rcall	.-136    	; 0x360 <LCD_WR_REG>
  LCD_WR_DATA(LCD_RegValue);
}

static void LCD_WriteRAM_Prepare(void)
{
  LCD_WR_REG(lcddev.wramcmd);
     3e8:	df 91       	pop	r29
     3ea:	cf 91       	pop	r28
     3ec:	1f 91       	pop	r17
  LCD_WR_DATA(0x00FF & yStar);
  LCD_WR_DATA(yEnd >> 8);
  LCD_WR_DATA(0x00FF & yEnd);

  LCD_WriteRAM_Prepare();
}
     3ee:	0f 91       	pop	r16
     3f0:	ff 90       	pop	r15
     3f2:	ef 90       	pop	r14
     3f4:	df 90       	pop	r13
     3f6:	cf 90       	pop	r12
     3f8:	bf 90       	pop	r11
     3fa:	af 90       	pop	r10
     3fc:	08 95       	ret

000003fe <LCD_SetCursor>:
     3fe:	9b 01       	movw	r18, r22
     400:	ac 01       	movw	r20, r24
     402:	c8 cf       	rjmp	.-112    	; 0x394 <LCD_SetWindows>

void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
  LCD_SetWindows(Xpos,Ypos,Xpos,Ypos);
     404:	08 95       	ret

00000406 <LCD_direction>:
}

void LCD_direction(LCD_Rotation_t direction)
{
  lcddev.setxcmd=0x2A;
     406:	e8 e0       	ldi	r30, 0x08	; 8
     408:	fb e0       	ldi	r31, 0x0B	; 11
     40a:	2a e2       	ldi	r18, 0x2A	; 42
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	32 87       	std	Z+10, r19	; 0x0a
     410:	21 87       	std	Z+9, r18	; 0x09
  lcddev.setycmd=0x2B;
     412:	2b e2       	ldi	r18, 0x2B	; 43
     414:	30 e0       	ldi	r19, 0x00	; 0
     416:	34 87       	std	Z+12, r19	; 0x0c
     418:	23 87       	std	Z+11, r18	; 0x0b
  lcddev.wramcmd=0x2C;
     41a:	2c e2       	ldi	r18, 0x2C	; 44
     41c:	30 e0       	ldi	r19, 0x00	; 0
     41e:	30 87       	std	Z+8, r19	; 0x08
     420:	27 83       	std	Z+7, r18	; 0x07
  switch(direction)
     422:	81 30       	cpi	r24, 0x01	; 1
     424:	a9 f0       	breq	.+42     	; 0x450 <LCD_direction+0x4a>
     426:	28 f0       	brcs	.+10     	; 0x432 <LCD_direction+0x2c>
     428:	82 30       	cpi	r24, 0x02	; 2
     42a:	09 f1       	breq	.+66     	; 0x46e <LCD_direction+0x68>
     42c:	83 30       	cpi	r24, 0x03	; 3
     42e:	71 f1       	breq	.+92     	; 0x48c <LCD_direction+0x86>
     430:	08 95       	ret
  {
    case LCD_ROTATE_0:
      lcddev.width=LCD_W;
     432:	e8 e0       	ldi	r30, 0x08	; 8
     434:	fb e0       	ldi	r31, 0x0B	; 11
     436:	80 e4       	ldi	r24, 0x40	; 64
     438:	91 e0       	ldi	r25, 0x01	; 1
     43a:	91 83       	std	Z+1, r25	; 0x01
     43c:	80 83       	st	Z, r24
      lcddev.height=LCD_H;
     43e:	80 ee       	ldi	r24, 0xE0	; 224
     440:	91 e0       	ldi	r25, 0x01	; 1
     442:	93 83       	std	Z+3, r25	; 0x03
     444:	82 83       	std	Z+2, r24	; 0x02
  LCD_CS_SET;
}

static void LCD_WriteReg(uint8_t LCD_Reg, uint8_t LCD_RegValue)
{
  LCD_WR_REG(LCD_Reg);
     446:	86 e3       	ldi	r24, 0x36	; 54
     448:	8b df       	rcall	.-234    	; 0x360 <LCD_WR_REG>
  LCD_WR_DATA(LCD_RegValue);
     44a:	88 e4       	ldi	r24, 0x48	; 72
     44c:	84 cf       	rjmp	.-248    	; 0x356 <LCD_WR_DATA>
     44e:	08 95       	ret
      lcddev.width=LCD_W;
      lcddev.height=LCD_H;
      LCD_WriteReg(0x36,(1<<3)|(1<<6));
      break;
    case LCD_ROTATE_90:
      lcddev.width=LCD_H;
     450:	e8 e0       	ldi	r30, 0x08	; 8
     452:	fb e0       	ldi	r31, 0x0B	; 11
     454:	80 ee       	ldi	r24, 0xE0	; 224
     456:	91 e0       	ldi	r25, 0x01	; 1
     458:	91 83       	std	Z+1, r25	; 0x01
     45a:	80 83       	st	Z, r24
      lcddev.height=LCD_W;
     45c:	80 e4       	ldi	r24, 0x40	; 64
     45e:	91 e0       	ldi	r25, 0x01	; 1
     460:	93 83       	std	Z+3, r25	; 0x03
  LCD_CS_SET;
}

static void LCD_WriteReg(uint8_t LCD_Reg, uint8_t LCD_RegValue)
{
  LCD_WR_REG(LCD_Reg);
     462:	82 83       	std	Z+2, r24	; 0x02
     464:	86 e3       	ldi	r24, 0x36	; 54
  LCD_WR_DATA(LCD_RegValue);
     466:	7c df       	rcall	.-264    	; 0x360 <LCD_WR_REG>
     468:	88 e2       	ldi	r24, 0x28	; 40
     46a:	75 cf       	rjmp	.-278    	; 0x356 <LCD_WR_DATA>
     46c:	08 95       	ret
      lcddev.width=LCD_H;
      lcddev.height=LCD_W;
      LCD_WriteReg(0x36,(1<<3)|(1<<5));
      break;
    case LCD_ROTATE_180:
      lcddev.width=LCD_W;
     46e:	e8 e0       	ldi	r30, 0x08	; 8
     470:	fb e0       	ldi	r31, 0x0B	; 11
     472:	80 e4       	ldi	r24, 0x40	; 64
     474:	91 e0       	ldi	r25, 0x01	; 1
     476:	91 83       	std	Z+1, r25	; 0x01
     478:	80 83       	st	Z, r24
      lcddev.height=LCD_H;
     47a:	80 ee       	ldi	r24, 0xE0	; 224
     47c:	91 e0       	ldi	r25, 0x01	; 1
     47e:	93 83       	std	Z+3, r25	; 0x03
  LCD_CS_SET;
}

static void LCD_WriteReg(uint8_t LCD_Reg, uint8_t LCD_RegValue)
{
  LCD_WR_REG(LCD_Reg);
     480:	82 83       	std	Z+2, r24	; 0x02
     482:	86 e3       	ldi	r24, 0x36	; 54
     484:	6d df       	rcall	.-294    	; 0x360 <LCD_WR_REG>
  LCD_WR_DATA(LCD_RegValue);
     486:	88 e8       	ldi	r24, 0x88	; 136
     488:	66 cf       	rjmp	.-308    	; 0x356 <LCD_WR_DATA>
     48a:	08 95       	ret
     48c:	e8 e0       	ldi	r30, 0x08	; 8
      lcddev.width=LCD_W;
      lcddev.height=LCD_H;
      LCD_WriteReg(0x36,(1<<3)|(1<<7));
      break;
    case LCD_ROTATE_270:
      lcddev.width=LCD_H;
     48e:	fb e0       	ldi	r31, 0x0B	; 11
     490:	80 ee       	ldi	r24, 0xE0	; 224
     492:	91 e0       	ldi	r25, 0x01	; 1
     494:	91 83       	std	Z+1, r25	; 0x01
     496:	80 83       	st	Z, r24
      lcddev.height=LCD_W;
     498:	80 e4       	ldi	r24, 0x40	; 64
     49a:	91 e0       	ldi	r25, 0x01	; 1
     49c:	93 83       	std	Z+3, r25	; 0x03
  LCD_CS_SET;
}

static void LCD_WriteReg(uint8_t LCD_Reg, uint8_t LCD_RegValue)
{
  LCD_WR_REG(LCD_Reg);
     49e:	82 83       	std	Z+2, r24	; 0x02
     4a0:	86 e3       	ldi	r24, 0x36	; 54
     4a2:	5e df       	rcall	.-324    	; 0x360 <LCD_WR_REG>
  LCD_WR_DATA(LCD_RegValue);
     4a4:	88 ee       	ldi	r24, 0xE8	; 232
     4a6:	57 cf       	rjmp	.-338    	; 0x356 <LCD_WR_DATA>
     4a8:	08 95       	ret

000004aa <LCD_SetBackLight>:
     4aa:	47 ce       	rjmp	.-882    	; 0x13a <SetBackLightDuty>
  LCD_WriteData_16Bit(colour);
}

void LCD_SetBackLight(uint8_t duty)
{
  SetBackLightDuty(duty);
     4ac:	08 95       	ret

000004ae <LCD_WriteData_16Bit>:
}

void LCD_WriteData_16Bit(uint16_t Data)
{
     4ae:	cf 93       	push	r28
     4b0:	c8 2f       	mov	r28, r24
  LCD_CS_CLR;
     4b2:	28 98       	cbi	0x05, 0	; 5
  LCD_RS_SET;
     4b4:	75 9a       	sbi	0x0e, 5	; 14
  SPI_Master_transmit(Data>>8);
     4b6:	89 2f       	mov	r24, r25
     4b8:	96 d3       	rcall	.+1836   	; 0xbe6 <SPI_Master_transmit>
  SPI_Master_transmit(Data);
     4ba:	8c 2f       	mov	r24, r28
     4bc:	94 d3       	rcall	.+1832   	; 0xbe6 <SPI_Master_transmit>
  LCD_CS_SET;
     4be:	28 9a       	sbi	0x05, 0	; 5
}
     4c0:	cf 91       	pop	r28
     4c2:	08 95       	ret

000004c4 <LCD_Clear>:
  SetBackLightDuty(100);
  LCD_Clear(BLACK);
}

void LCD_Clear(uint16_t Color)
{
     4c4:	cf 92       	push	r12
     4c6:	df 92       	push	r13
     4c8:	ef 92       	push	r14
     4ca:	ff 92       	push	r15
     4cc:	0f 93       	push	r16
     4ce:	1f 93       	push	r17
     4d0:	cf 93       	push	r28
     4d2:	df 93       	push	r29
     4d4:	7c 01       	movw	r14, r24
  unsigned int i,m;
  LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);
     4d6:	c8 e0       	ldi	r28, 0x08	; 8
     4d8:	db e0       	ldi	r29, 0x0B	; 11
     4da:	2a 81       	ldd	r18, Y+2	; 0x02
     4dc:	3b 81       	ldd	r19, Y+3	; 0x03
     4de:	21 50       	subi	r18, 0x01	; 1
     4e0:	31 09       	sbc	r19, r1
     4e2:	48 81       	ld	r20, Y
     4e4:	59 81       	ldd	r21, Y+1	; 0x01
     4e6:	41 50       	subi	r20, 0x01	; 1
     4e8:	51 09       	sbc	r21, r1
     4ea:	60 e0       	ldi	r22, 0x00	; 0
     4ec:	70 e0       	ldi	r23, 0x00	; 0
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	50 df       	rcall	.-352    	; 0x394 <LCD_SetWindows>
  LCD_CS_CLR;
     4f4:	28 98       	cbi	0x05, 0	; 5
  LCD_RS_SET;
     4f6:	75 9a       	sbi	0x0e, 5	; 14
  for(i=0;i<lcddev.height;i++)
     4f8:	8a 81       	ldd	r24, Y+2	; 0x02
     4fa:	9b 81       	ldd	r25, Y+3	; 0x03
     4fc:	89 2b       	or	r24, r25
     4fe:	b1 f4       	brne	.+44     	; 0x52c <LCD_Clear+0x68>
     500:	1f c0       	rjmp	.+62     	; 0x540 <LCD_Clear+0x7c>
  {
    for(m=0;m<lcddev.width;m++)
     502:	c0 e0       	ldi	r28, 0x00	; 0
     504:	d0 e0       	ldi	r29, 0x00	; 0
    {
      LCD_WriteData_16Bit(Color);
     506:	c7 01       	movw	r24, r14
     508:	d2 df       	rcall	.-92     	; 0x4ae <LCD_WriteData_16Bit>
  LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);
  LCD_CS_CLR;
  LCD_RS_SET;
  for(i=0;i<lcddev.height;i++)
  {
    for(m=0;m<lcddev.width;m++)
     50a:	21 96       	adiw	r28, 0x01	; 1
     50c:	f8 01       	movw	r30, r16
     50e:	80 81       	ld	r24, Z
     510:	91 81       	ldd	r25, Z+1	; 0x01
     512:	c8 17       	cp	r28, r24
     514:	d9 07       	cpc	r29, r25
     516:	b8 f3       	brcs	.-18     	; 0x506 <LCD_Clear+0x42>
{
  unsigned int i,m;
  LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);
  LCD_CS_CLR;
  LCD_RS_SET;
  for(i=0;i<lcddev.height;i++)
     518:	ff ef       	ldi	r31, 0xFF	; 255
     51a:	cf 1a       	sub	r12, r31
     51c:	df 0a       	sbc	r13, r31
     51e:	f8 01       	movw	r30, r16
     520:	82 81       	ldd	r24, Z+2	; 0x02
     522:	93 81       	ldd	r25, Z+3	; 0x03
     524:	c8 16       	cp	r12, r24
     526:	d9 06       	cpc	r13, r25
     528:	28 f0       	brcs	.+10     	; 0x534 <LCD_Clear+0x70>
     52a:	0a c0       	rjmp	.+20     	; 0x540 <LCD_Clear+0x7c>
     52c:	c1 2c       	mov	r12, r1
     52e:	d1 2c       	mov	r13, r1
  {
    for(m=0;m<lcddev.width;m++)
     530:	08 e0       	ldi	r16, 0x08	; 8
     532:	1b e0       	ldi	r17, 0x0B	; 11
     534:	f8 01       	movw	r30, r16
     536:	80 81       	ld	r24, Z
     538:	91 81       	ldd	r25, Z+1	; 0x01
     53a:	89 2b       	or	r24, r25
     53c:	11 f7       	brne	.-60     	; 0x502 <LCD_Clear+0x3e>
     53e:	ec cf       	rjmp	.-40     	; 0x518 <LCD_Clear+0x54>
    {
      LCD_WriteData_16Bit(Color);
    }
  }
  LCD_CS_SET;
     540:	28 9a       	sbi	0x05, 0	; 5
}
     542:	df 91       	pop	r29
     544:	cf 91       	pop	r28
     546:	1f 91       	pop	r17
     548:	0f 91       	pop	r16
     54a:	ff 90       	pop	r15
     54c:	ef 90       	pop	r14
     54e:	df 90       	pop	r13
     550:	cf 90       	pop	r12
     552:	08 95       	ret

00000554 <LCD_Init>:
/************************************************************************/
/* Public function definitions                                          */
/************************************************************************/
void LCD_Init(void)
{
  SPI_Master_init();
     554:	20 d3       	rcall	.+1600   	; 0xb96 <SPI_Master_init>
  LCD_WR_REG(lcddev.wramcmd);
}

void LCD_GPIOInit(void)
{
  DDR_LCD_CTRL |= ((1 << LCD_RST) | (1 << LCD_RS));
     556:	8d b1       	in	r24, 0x0d	; 13
     558:	80 63       	ori	r24, 0x30	; 48
/************************************************************************/
void LCD_Init(void)
{
  SPI_Master_init();
  LCD_GPIOInit();
  Backlight_Init();
     55a:	8d b9       	out	0x0d, r24	; 13
  LCD_RESET();
     55c:	ec dd       	rcall	.-1064   	; 0x136 <Backlight_Init>

  LCD_WR_REG(0xF0);
     55e:	05 df       	rcall	.-502    	; 0x36a <LCD_RESET>
     560:	80 ef       	ldi	r24, 0xF0	; 240
  LCD_WR_DATA(0xC3);
     562:	fe de       	rcall	.-516    	; 0x360 <LCD_WR_REG>
     564:	83 ec       	ldi	r24, 0xC3	; 195
  LCD_WR_REG(0xF0);
     566:	f7 de       	rcall	.-530    	; 0x356 <LCD_WR_DATA>
     568:	80 ef       	ldi	r24, 0xF0	; 240
  LCD_WR_DATA(0x96);
     56a:	fa de       	rcall	.-524    	; 0x360 <LCD_WR_REG>
     56c:	86 e9       	ldi	r24, 0x96	; 150
  LCD_WR_REG(0x36);
     56e:	f3 de       	rcall	.-538    	; 0x356 <LCD_WR_DATA>
     570:	86 e3       	ldi	r24, 0x36	; 54
  LCD_WR_DATA(0x68);
     572:	f6 de       	rcall	.-532    	; 0x360 <LCD_WR_REG>
     574:	88 e6       	ldi	r24, 0x68	; 104
  LCD_WR_REG(0x3A);
     576:	ef de       	rcall	.-546    	; 0x356 <LCD_WR_DATA>
     578:	8a e3       	ldi	r24, 0x3A	; 58
  LCD_WR_DATA(0x05);
     57a:	f2 de       	rcall	.-540    	; 0x360 <LCD_WR_REG>
     57c:	85 e0       	ldi	r24, 0x05	; 5
  LCD_WR_REG(0xB0);
     57e:	eb de       	rcall	.-554    	; 0x356 <LCD_WR_DATA>
     580:	80 eb       	ldi	r24, 0xB0	; 176
  LCD_WR_DATA(0x80);
     582:	ee de       	rcall	.-548    	; 0x360 <LCD_WR_REG>
     584:	80 e8       	ldi	r24, 0x80	; 128
  LCD_WR_REG(0xB6);
     586:	e7 de       	rcall	.-562    	; 0x356 <LCD_WR_DATA>
     588:	86 eb       	ldi	r24, 0xB6	; 182
  LCD_WR_DATA(0x00);
     58a:	ea de       	rcall	.-556    	; 0x360 <LCD_WR_REG>
     58c:	80 e0       	ldi	r24, 0x00	; 0
  LCD_WR_DATA(0x02);
     58e:	e3 de       	rcall	.-570    	; 0x356 <LCD_WR_DATA>
     590:	82 e0       	ldi	r24, 0x02	; 2
  LCD_WR_REG(0xB5);
     592:	e1 de       	rcall	.-574    	; 0x356 <LCD_WR_DATA>
     594:	85 eb       	ldi	r24, 0xB5	; 181
  LCD_WR_DATA(0x02);
     596:	e4 de       	rcall	.-568    	; 0x360 <LCD_WR_REG>
     598:	82 e0       	ldi	r24, 0x02	; 2
  LCD_WR_DATA(0x03);
     59a:	dd de       	rcall	.-582    	; 0x356 <LCD_WR_DATA>
     59c:	83 e0       	ldi	r24, 0x03	; 3
  LCD_WR_DATA(0x00);
     59e:	db de       	rcall	.-586    	; 0x356 <LCD_WR_DATA>
     5a0:	80 e0       	ldi	r24, 0x00	; 0
  LCD_WR_DATA(0x04);
     5a2:	d9 de       	rcall	.-590    	; 0x356 <LCD_WR_DATA>
     5a4:	84 e0       	ldi	r24, 0x04	; 4
  LCD_WR_REG(0xB1);
     5a6:	d7 de       	rcall	.-594    	; 0x356 <LCD_WR_DATA>
     5a8:	81 eb       	ldi	r24, 0xB1	; 177
  LCD_WR_DATA(0x80);
     5aa:	da de       	rcall	.-588    	; 0x360 <LCD_WR_REG>
     5ac:	80 e8       	ldi	r24, 0x80	; 128
  LCD_WR_DATA(0x10);
     5ae:	d3 de       	rcall	.-602    	; 0x356 <LCD_WR_DATA>
     5b0:	80 e1       	ldi	r24, 0x10	; 16
  LCD_WR_REG(0xB4);
     5b2:	d1 de       	rcall	.-606    	; 0x356 <LCD_WR_DATA>
     5b4:	84 eb       	ldi	r24, 0xB4	; 180
  LCD_WR_DATA(0x00);
     5b6:	d4 de       	rcall	.-600    	; 0x360 <LCD_WR_REG>
     5b8:	80 e0       	ldi	r24, 0x00	; 0
  LCD_WR_REG(0xB7);
     5ba:	cd de       	rcall	.-614    	; 0x356 <LCD_WR_DATA>
     5bc:	87 eb       	ldi	r24, 0xB7	; 183
  LCD_WR_DATA(0xC6);
     5be:	d0 de       	rcall	.-608    	; 0x360 <LCD_WR_REG>
     5c0:	86 ec       	ldi	r24, 0xC6	; 198
  LCD_WR_REG(0xC5);
     5c2:	c9 de       	rcall	.-622    	; 0x356 <LCD_WR_DATA>
     5c4:	85 ec       	ldi	r24, 0xC5	; 197
  LCD_WR_DATA(0x24);
     5c6:	cc de       	rcall	.-616    	; 0x360 <LCD_WR_REG>
     5c8:	84 e2       	ldi	r24, 0x24	; 36
  LCD_WR_REG(0xE4);
     5ca:	c5 de       	rcall	.-630    	; 0x356 <LCD_WR_DATA>
     5cc:	84 ee       	ldi	r24, 0xE4	; 228
  LCD_WR_DATA(0x31);
     5ce:	c8 de       	rcall	.-624    	; 0x360 <LCD_WR_REG>
     5d0:	81 e3       	ldi	r24, 0x31	; 49
  LCD_WR_REG(0xE8);
     5d2:	c1 de       	rcall	.-638    	; 0x356 <LCD_WR_DATA>
     5d4:	88 ee       	ldi	r24, 0xE8	; 232
  LCD_WR_DATA(0x40);
     5d6:	c4 de       	rcall	.-632    	; 0x360 <LCD_WR_REG>
     5d8:	80 e4       	ldi	r24, 0x40	; 64
  LCD_WR_DATA(0x8A);
     5da:	bd de       	rcall	.-646    	; 0x356 <LCD_WR_DATA>
     5dc:	8a e8       	ldi	r24, 0x8A	; 138
  LCD_WR_DATA(0x00);
     5de:	bb de       	rcall	.-650    	; 0x356 <LCD_WR_DATA>
     5e0:	80 e0       	ldi	r24, 0x00	; 0
  LCD_WR_DATA(0x00);
     5e2:	b9 de       	rcall	.-654    	; 0x356 <LCD_WR_DATA>
     5e4:	80 e0       	ldi	r24, 0x00	; 0
  LCD_WR_DATA(0x29);
     5e6:	b7 de       	rcall	.-658    	; 0x356 <LCD_WR_DATA>
     5e8:	89 e2       	ldi	r24, 0x29	; 41
  LCD_WR_DATA(0x19);
     5ea:	b5 de       	rcall	.-662    	; 0x356 <LCD_WR_DATA>
     5ec:	89 e1       	ldi	r24, 0x19	; 25
  LCD_WR_DATA(0xA5);
     5ee:	b3 de       	rcall	.-666    	; 0x356 <LCD_WR_DATA>
     5f0:	85 ea       	ldi	r24, 0xA5	; 165
  LCD_WR_DATA(0x33);
     5f2:	b1 de       	rcall	.-670    	; 0x356 <LCD_WR_DATA>
     5f4:	83 e3       	ldi	r24, 0x33	; 51
  LCD_WR_REG(0xC2);
     5f6:	af de       	rcall	.-674    	; 0x356 <LCD_WR_DATA>
     5f8:	82 ec       	ldi	r24, 0xC2	; 194
  LCD_WR_REG(0xA7);
     5fa:	b2 de       	rcall	.-668    	; 0x360 <LCD_WR_REG>
     5fc:	87 ea       	ldi	r24, 0xA7	; 167

  LCD_WR_REG(0xE0);
     5fe:	b0 de       	rcall	.-672    	; 0x360 <LCD_WR_REG>
     600:	80 ee       	ldi	r24, 0xE0	; 224
  LCD_WR_DATA(0xF0);
     602:	ae de       	rcall	.-676    	; 0x360 <LCD_WR_REG>
     604:	80 ef       	ldi	r24, 0xF0	; 240
  LCD_WR_DATA(0x09);
     606:	a7 de       	rcall	.-690    	; 0x356 <LCD_WR_DATA>
     608:	89 e0       	ldi	r24, 0x09	; 9
  LCD_WR_DATA(0x13);
     60a:	a5 de       	rcall	.-694    	; 0x356 <LCD_WR_DATA>
     60c:	83 e1       	ldi	r24, 0x13	; 19
  LCD_WR_DATA(0x12);
     60e:	a3 de       	rcall	.-698    	; 0x356 <LCD_WR_DATA>
     610:	82 e1       	ldi	r24, 0x12	; 18
  LCD_WR_DATA(0x12);
     612:	a1 de       	rcall	.-702    	; 0x356 <LCD_WR_DATA>
     614:	82 e1       	ldi	r24, 0x12	; 18
  LCD_WR_DATA(0x2B);
     616:	9f de       	rcall	.-706    	; 0x356 <LCD_WR_DATA>
     618:	8b e2       	ldi	r24, 0x2B	; 43
  LCD_WR_DATA(0x3C);
     61a:	9d de       	rcall	.-710    	; 0x356 <LCD_WR_DATA>
     61c:	8c e3       	ldi	r24, 0x3C	; 60
  LCD_WR_DATA(0x44);
     61e:	9b de       	rcall	.-714    	; 0x356 <LCD_WR_DATA>
     620:	84 e4       	ldi	r24, 0x44	; 68
  LCD_WR_DATA(0x4B);
     622:	99 de       	rcall	.-718    	; 0x356 <LCD_WR_DATA>
     624:	8b e4       	ldi	r24, 0x4B	; 75
  LCD_WR_DATA(0x1B);
     626:	97 de       	rcall	.-722    	; 0x356 <LCD_WR_DATA>
     628:	8b e1       	ldi	r24, 0x1B	; 27
  LCD_WR_DATA(0x18);
     62a:	95 de       	rcall	.-726    	; 0x356 <LCD_WR_DATA>
     62c:	88 e1       	ldi	r24, 0x18	; 24
  LCD_WR_DATA(0x17);
     62e:	93 de       	rcall	.-730    	; 0x356 <LCD_WR_DATA>
     630:	87 e1       	ldi	r24, 0x17	; 23
  LCD_WR_DATA(0x1D);
     632:	91 de       	rcall	.-734    	; 0x356 <LCD_WR_DATA>
     634:	8d e1       	ldi	r24, 0x1D	; 29
  LCD_WR_DATA(0x21);
     636:	8f de       	rcall	.-738    	; 0x356 <LCD_WR_DATA>
     638:	81 e2       	ldi	r24, 0x21	; 33
     63a:	8d de       	rcall	.-742    	; 0x356 <LCD_WR_DATA>

  LCD_WR_REG(0XE1);
     63c:	81 ee       	ldi	r24, 0xE1	; 225
     63e:	90 de       	rcall	.-736    	; 0x360 <LCD_WR_REG>
     640:	80 ef       	ldi	r24, 0xF0	; 240
  LCD_WR_DATA(0xF0);
     642:	89 de       	rcall	.-750    	; 0x356 <LCD_WR_DATA>
     644:	89 e0       	ldi	r24, 0x09	; 9
     646:	87 de       	rcall	.-754    	; 0x356 <LCD_WR_DATA>
  LCD_WR_DATA(0x09);
     648:	83 e1       	ldi	r24, 0x13	; 19
     64a:	85 de       	rcall	.-758    	; 0x356 <LCD_WR_DATA>
     64c:	8c e0       	ldi	r24, 0x0C	; 12
  LCD_WR_DATA(0x13);
     64e:	83 de       	rcall	.-762    	; 0x356 <LCD_WR_DATA>
     650:	8d e0       	ldi	r24, 0x0D	; 13
     652:	81 de       	rcall	.-766    	; 0x356 <LCD_WR_DATA>
  LCD_WR_DATA(0x0C);
     654:	87 e2       	ldi	r24, 0x27	; 39
     656:	7f de       	rcall	.-770    	; 0x356 <LCD_WR_DATA>
     658:	8b e3       	ldi	r24, 0x3B	; 59
  LCD_WR_DATA(0x0D);
     65a:	7d de       	rcall	.-774    	; 0x356 <LCD_WR_DATA>
     65c:	84 e4       	ldi	r24, 0x44	; 68
     65e:	7b de       	rcall	.-778    	; 0x356 <LCD_WR_DATA>
  LCD_WR_DATA(0x27);
     660:	8d e4       	ldi	r24, 0x4D	; 77
     662:	79 de       	rcall	.-782    	; 0x356 <LCD_WR_DATA>
     664:	8b e0       	ldi	r24, 0x0B	; 11
  LCD_WR_DATA(0x3B);
     666:	77 de       	rcall	.-786    	; 0x356 <LCD_WR_DATA>
     668:	87 e1       	ldi	r24, 0x17	; 23
     66a:	75 de       	rcall	.-790    	; 0x356 <LCD_WR_DATA>
  LCD_WR_DATA(0x44);
     66c:	87 e1       	ldi	r24, 0x17	; 23
     66e:	73 de       	rcall	.-794    	; 0x356 <LCD_WR_DATA>
     670:	8d e1       	ldi	r24, 0x1D	; 29
  LCD_WR_DATA(0x4D);
     672:	71 de       	rcall	.-798    	; 0x356 <LCD_WR_DATA>
     674:	81 e2       	ldi	r24, 0x21	; 33
     676:	6f de       	rcall	.-802    	; 0x356 <LCD_WR_DATA>
  LCD_WR_DATA(0x0B);
     678:	86 e3       	ldi	r24, 0x36	; 54
     67a:	72 de       	rcall	.-796    	; 0x360 <LCD_WR_REG>
     67c:	8c ee       	ldi	r24, 0xEC	; 236
  LCD_WR_DATA(0x17);
     67e:	6b de       	rcall	.-810    	; 0x356 <LCD_WR_DATA>
     680:	80 ef       	ldi	r24, 0xF0	; 240
     682:	6e de       	rcall	.-804    	; 0x360 <LCD_WR_REG>
  LCD_WR_DATA(0x17);
     684:	83 ec       	ldi	r24, 0xC3	; 195
     686:	67 de       	rcall	.-818    	; 0x356 <LCD_WR_DATA>
     688:	80 ef       	ldi	r24, 0xF0	; 240
  LCD_WR_DATA(0x1D);
     68a:	6a de       	rcall	.-812    	; 0x360 <LCD_WR_REG>
     68c:	89 e6       	ldi	r24, 0x69	; 105
     68e:	63 de       	rcall	.-826    	; 0x356 <LCD_WR_DATA>
  LCD_WR_DATA(0x21);
     690:	83 e1       	ldi	r24, 0x13	; 19
     692:	66 de       	rcall	.-820    	; 0x360 <LCD_WR_REG>
     694:	81 e1       	ldi	r24, 0x11	; 17

  LCD_WR_REG(0X36);
     696:	64 de       	rcall	.-824    	; 0x360 <LCD_WR_REG>
     698:	89 e2       	ldi	r24, 0x29	; 41
     69a:	62 de       	rcall	.-828    	; 0x360 <LCD_WR_REG>
  LCD_WR_DATA(0xEC);
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	b3 de       	rcall	.-666    	; 0x406 <LCD_direction>
     6a0:	84 e6       	ldi	r24, 0x64	; 100
  LCD_WR_REG(0xF0);
     6a2:	4b dd       	rcall	.-1386   	; 0x13a <SetBackLightDuty>
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	90 e0       	ldi	r25, 0x00	; 0
  LCD_WR_DATA(0xC3);
     6a8:	0d cf       	rjmp	.-486    	; 0x4c4 <LCD_Clear>
     6aa:	08 95       	ret

000006ac <LCD_GUI_DrawPoint>:
     6ac:	cf 93       	push	r28
  LCD_WR_REG(0xF0);
     6ae:	df 93       	push	r29
     6b0:	ea 01       	movw	r28, r20
     6b2:	a5 de       	rcall	.-694    	; 0x3fe <LCD_SetCursor>
  LCD_WR_DATA(0x69);
     6b4:	ce 01       	movw	r24, r28
     6b6:	fb de       	rcall	.-522    	; 0x4ae <LCD_WriteData_16Bit>
     6b8:	df 91       	pop	r29
  LCD_WR_REG(0X13);
     6ba:	cf 91       	pop	r28
     6bc:	08 95       	ret

000006be <LCD_GUI_Fill>:
     6be:	af 92       	push	r10
  LCD_WR_REG(0X11);
     6c0:	bf 92       	push	r11
     6c2:	cf 92       	push	r12
     6c4:	df 92       	push	r13
  LCD_WR_REG(0X29);
     6c6:	ef 92       	push	r14
     6c8:	ff 92       	push	r15
     6ca:	0f 93       	push	r16

  LCD_direction(LCD_ROTATE_0);
     6cc:	1f 93       	push	r17
     6ce:	cf 93       	push	r28
     6d0:	df 93       	push	r29
  SetBackLightDuty(100);
     6d2:	48 17       	cp	r20, r24
     6d4:	59 07       	cpc	r21, r25
     6d6:	28 f4       	brcc	.+10     	; 0x6e2 <LCD_GUI_Fill+0x24>
  LCD_Clear(BLACK);
     6d8:	f8 2f       	mov	r31, r24
     6da:	e9 2f       	mov	r30, r25
     6dc:	ca 01       	movw	r24, r20
     6de:	4f 2f       	mov	r20, r31
     6e0:	5e 2f       	mov	r21, r30
    {
      if(temp & (1<<(7-t)))LCD_WriteData_16Bit(fc);
      else LCD_WriteData_16Bit(bc);
    }
  }
}
     6e2:	26 17       	cp	r18, r22
     6e4:	37 07       	cpc	r19, r23
     6e6:	28 f4       	brcc	.+10     	; 0x6f2 <LCD_GUI_Fill+0x34>
     6e8:	f6 2f       	mov	r31, r22
     6ea:	e7 2f       	mov	r30, r23
     6ec:	b9 01       	movw	r22, r18
     6ee:	2f 2f       	mov	r18, r31
     6f0:	3e 2f       	mov	r19, r30
     6f2:	7a 01       	movw	r14, r20
     6f4:	ef ef       	ldi	r30, 0xFF	; 255
     6f6:	ee 1a       	sub	r14, r30
     6f8:	fe 0a       	sbc	r15, r30
     6fa:	e8 1a       	sub	r14, r24
     6fc:	f9 0a       	sbc	r15, r25
     6fe:	59 01       	movw	r10, r18
     700:	ef ef       	ldi	r30, 0xFF	; 255
     702:	ae 1a       	sub	r10, r30
     704:	be 0a       	sbc	r11, r30
     706:	a6 1a       	sub	r10, r22
     708:	b7 0a       	sbc	r11, r23
     70a:	44 de       	rcall	.-888    	; 0x394 <LCD_SetWindows>
     70c:	a1 14       	cp	r10, r1
     70e:	b1 04       	cpc	r11, r1
     710:	81 f4       	brne	.+32     	; 0x732 <LCD_GUI_Fill+0x74>
     712:	15 c0       	rjmp	.+42     	; 0x73e <LCD_GUI_Fill+0x80>
     714:	c0 e0       	ldi	r28, 0x00	; 0
     716:	d0 e0       	ldi	r29, 0x00	; 0
     718:	c8 01       	movw	r24, r16
     71a:	c9 de       	rcall	.-622    	; 0x4ae <LCD_WriteData_16Bit>
     71c:	21 96       	adiw	r28, 0x01	; 1
     71e:	ec 16       	cp	r14, r28
     720:	fd 06       	cpc	r15, r29
     722:	d1 f7       	brne	.-12     	; 0x718 <LCD_GUI_Fill+0x5a>
     724:	8f ef       	ldi	r24, 0xFF	; 255
     726:	c8 1a       	sub	r12, r24
     728:	d8 0a       	sbc	r13, r24
     72a:	ac 14       	cp	r10, r12
     72c:	bd 04       	cpc	r11, r13
     72e:	19 f4       	brne	.+6      	; 0x736 <LCD_GUI_Fill+0x78>
     730:	06 c0       	rjmp	.+12     	; 0x73e <LCD_GUI_Fill+0x80>
     732:	c1 2c       	mov	r12, r1
     734:	d1 2c       	mov	r13, r1
     736:	e1 14       	cp	r14, r1
     738:	f1 04       	cpc	r15, r1
     73a:	61 f7       	brne	.-40     	; 0x714 <LCD_GUI_Fill+0x56>
     73c:	f3 cf       	rjmp	.-26     	; 0x724 <LCD_GUI_Fill+0x66>
     73e:	df 91       	pop	r29
     740:	cf 91       	pop	r28
     742:	1f 91       	pop	r17
     744:	0f 91       	pop	r16
     746:	ff 90       	pop	r15
     748:	ef 90       	pop	r14
     74a:	df 90       	pop	r13
     74c:	cf 90       	pop	r12
     74e:	bf 90       	pop	r11
     750:	af 90       	pop	r10
     752:	08 95       	ret

00000754 <LCD_GUI_DrawLine>:
     754:	2f 92       	push	r2
     756:	3f 92       	push	r3
     758:	4f 92       	push	r4
     75a:	5f 92       	push	r5
     75c:	6f 92       	push	r6
     75e:	7f 92       	push	r7
     760:	8f 92       	push	r8
     762:	9f 92       	push	r9
     764:	af 92       	push	r10
     766:	bf 92       	push	r11
     768:	cf 92       	push	r12
     76a:	df 92       	push	r13
     76c:	ef 92       	push	r14
     76e:	ff 92       	push	r15
     770:	0f 93       	push	r16
     772:	1f 93       	push	r17
     774:	cf 93       	push	r28
     776:	df 93       	push	r29
     778:	cd b7       	in	r28, 0x3d	; 61
     77a:	de b7       	in	r29, 0x3e	; 62
     77c:	28 97       	sbiw	r28, 0x08	; 8
     77e:	0f b6       	in	r0, 0x3f	; 63
     780:	f8 94       	cli
     782:	de bf       	out	0x3e, r29	; 62
     784:	0f be       	out	0x3f, r0	; 63
     786:	cd bf       	out	0x3d, r28	; 61
     788:	1a 83       	std	Y+2, r17	; 0x02
     78a:	09 83       	std	Y+1, r16	; 0x01
     78c:	6a 01       	movw	r12, r20
     78e:	c8 1a       	sub	r12, r24
     790:	d9 0a       	sbc	r13, r25
     792:	39 01       	movw	r6, r18
     794:	66 1a       	sub	r6, r22
     796:	77 0a       	sbc	r7, r23
     798:	1c 01       	movw	r2, r24
     79a:	2b 01       	movw	r4, r22
     79c:	1c 14       	cp	r1, r12
     79e:	1d 04       	cpc	r1, r13
     7a0:	5c f0       	brlt	.+22     	; 0x7b8 <LCD_GUI_DrawLine+0x64>
     7a2:	c1 14       	cp	r12, r1
     7a4:	d1 04       	cpc	r13, r1
     7a6:	69 f0       	breq	.+26     	; 0x7c2 <LCD_GUI_DrawLine+0x6e>
     7a8:	d1 94       	neg	r13
     7aa:	c1 94       	neg	r12
     7ac:	d1 08       	sbc	r13, r1
     7ae:	8f ef       	ldi	r24, 0xFF	; 255
     7b0:	9f ef       	ldi	r25, 0xFF	; 255
     7b2:	9c 83       	std	Y+4, r25	; 0x04
     7b4:	8b 83       	std	Y+3, r24	; 0x03
     7b6:	07 c0       	rjmp	.+14     	; 0x7c6 <LCD_GUI_DrawLine+0x72>
     7b8:	81 e0       	ldi	r24, 0x01	; 1
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	9c 83       	std	Y+4, r25	; 0x04
     7be:	8b 83       	std	Y+3, r24	; 0x03
     7c0:	02 c0       	rjmp	.+4      	; 0x7c6 <LCD_GUI_DrawLine+0x72>
     7c2:	1c 82       	std	Y+4, r1	; 0x04
     7c4:	1b 82       	std	Y+3, r1	; 0x03
     7c6:	16 14       	cp	r1, r6
     7c8:	17 04       	cpc	r1, r7
     7ca:	5c f0       	brlt	.+22     	; 0x7e2 <LCD_GUI_DrawLine+0x8e>
     7cc:	61 14       	cp	r6, r1
     7ce:	71 04       	cpc	r7, r1
     7d0:	69 f0       	breq	.+26     	; 0x7ec <LCD_GUI_DrawLine+0x98>
     7d2:	71 94       	neg	r7
     7d4:	61 94       	neg	r6
     7d6:	71 08       	sbc	r7, r1
     7d8:	8f ef       	ldi	r24, 0xFF	; 255
     7da:	9f ef       	ldi	r25, 0xFF	; 255
     7dc:	9e 83       	std	Y+6, r25	; 0x06
     7de:	8d 83       	std	Y+5, r24	; 0x05
     7e0:	07 c0       	rjmp	.+14     	; 0x7f0 <LCD_GUI_DrawLine+0x9c>
     7e2:	81 e0       	ldi	r24, 0x01	; 1
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	9e 83       	std	Y+6, r25	; 0x06
     7e8:	8d 83       	std	Y+5, r24	; 0x05
     7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <LCD_GUI_DrawLine+0x9c>
     7ec:	1e 82       	std	Y+6, r1	; 0x06
     7ee:	1d 82       	std	Y+5, r1	; 0x05
     7f0:	76 01       	movw	r14, r12
     7f2:	c6 14       	cp	r12, r6
     7f4:	d7 04       	cpc	r13, r7
     7f6:	0c f4       	brge	.+2      	; 0x7fa <LCD_GUI_DrawLine+0xa6>
     7f8:	73 01       	movw	r14, r6
     7fa:	57 01       	movw	r10, r14
     7fc:	9f ef       	ldi	r25, 0xFF	; 255
     7fe:	a9 1a       	sub	r10, r25
     800:	b9 0a       	sbc	r11, r25
     802:	00 e0       	ldi	r16, 0x00	; 0
     804:	10 e0       	ldi	r17, 0x00	; 0
     806:	18 86       	std	Y+8, r1	; 0x08
     808:	1f 82       	std	Y+7, r1	; 0x07
     80a:	81 2c       	mov	r8, r1
     80c:	91 2c       	mov	r9, r1
     80e:	49 81       	ldd	r20, Y+1	; 0x01
     810:	5a 81       	ldd	r21, Y+2	; 0x02
     812:	b2 01       	movw	r22, r4
     814:	c1 01       	movw	r24, r2
     816:	4a df       	rcall	.-364    	; 0x6ac <LCD_GUI_DrawPoint>
     818:	8f 81       	ldd	r24, Y+7	; 0x07
     81a:	98 85       	ldd	r25, Y+8	; 0x08
     81c:	8c 0d       	add	r24, r12
     81e:	9d 1d       	adc	r25, r13
     820:	98 87       	std	Y+8, r25	; 0x08
     822:	8f 83       	std	Y+7, r24	; 0x07
     824:	06 0d       	add	r16, r6
     826:	17 1d       	adc	r17, r7
     828:	e8 16       	cp	r14, r24
     82a:	f9 06       	cpc	r15, r25
     82c:	44 f4       	brge	.+16     	; 0x83e <LCD_GUI_DrawLine+0xea>
     82e:	8e 19       	sub	r24, r14
     830:	9f 09       	sbc	r25, r15
     832:	98 87       	std	Y+8, r25	; 0x08
     834:	8f 83       	std	Y+7, r24	; 0x07
     836:	8b 81       	ldd	r24, Y+3	; 0x03
     838:	9c 81       	ldd	r25, Y+4	; 0x04
     83a:	28 0e       	add	r2, r24
     83c:	39 1e       	adc	r3, r25
     83e:	e0 16       	cp	r14, r16
     840:	f1 06       	cpc	r15, r17
     842:	34 f4       	brge	.+12     	; 0x850 <LCD_GUI_DrawLine+0xfc>
     844:	0e 19       	sub	r16, r14
     846:	1f 09       	sbc	r17, r15
     848:	8d 81       	ldd	r24, Y+5	; 0x05
     84a:	9e 81       	ldd	r25, Y+6	; 0x06
     84c:	48 0e       	add	r4, r24
     84e:	59 1e       	adc	r5, r25
     850:	9f ef       	ldi	r25, 0xFF	; 255
     852:	89 1a       	sub	r8, r25
     854:	99 0a       	sbc	r9, r25
     856:	a8 14       	cp	r10, r8
     858:	b9 04       	cpc	r11, r9
     85a:	c8 f6       	brcc	.-78     	; 0x80e <LCD_GUI_DrawLine+0xba>
     85c:	28 96       	adiw	r28, 0x08	; 8
     85e:	0f b6       	in	r0, 0x3f	; 63
     860:	f8 94       	cli
     862:	de bf       	out	0x3e, r29	; 62
     864:	0f be       	out	0x3f, r0	; 63
     866:	cd bf       	out	0x3d, r28	; 61
     868:	df 91       	pop	r29
     86a:	cf 91       	pop	r28
     86c:	1f 91       	pop	r17
     86e:	0f 91       	pop	r16
     870:	ff 90       	pop	r15
     872:	ef 90       	pop	r14
     874:	df 90       	pop	r13
     876:	cf 90       	pop	r12
     878:	bf 90       	pop	r11
     87a:	af 90       	pop	r10
     87c:	9f 90       	pop	r9
     87e:	8f 90       	pop	r8
     880:	7f 90       	pop	r7
     882:	6f 90       	pop	r6
     884:	5f 90       	pop	r5
     886:	4f 90       	pop	r4
     888:	3f 90       	pop	r3
     88a:	2f 90       	pop	r2
     88c:	08 95       	ret

0000088e <LCD_GUI_DrawRectangle>:
     88e:	8f 92       	push	r8
     890:	9f 92       	push	r9
     892:	af 92       	push	r10
     894:	bf 92       	push	r11
     896:	cf 92       	push	r12
     898:	df 92       	push	r13
     89a:	ef 92       	push	r14
     89c:	ff 92       	push	r15
     89e:	0f 93       	push	r16
     8a0:	1f 93       	push	r17
     8a2:	cf 93       	push	r28
     8a4:	df 93       	push	r29
     8a6:	4c 01       	movw	r8, r24
     8a8:	7b 01       	movw	r14, r22
     8aa:	ea 01       	movw	r28, r20
     8ac:	69 01       	movw	r12, r18
     8ae:	9b 01       	movw	r18, r22
     8b0:	51 df       	rcall	.-350    	; 0x754 <LCD_GUI_DrawLine>
     8b2:	96 01       	movw	r18, r12
     8b4:	a4 01       	movw	r20, r8
     8b6:	b7 01       	movw	r22, r14
     8b8:	c4 01       	movw	r24, r8
     8ba:	4c df       	rcall	.-360    	; 0x754 <LCD_GUI_DrawLine>
     8bc:	96 01       	movw	r18, r12
     8be:	ae 01       	movw	r20, r28
     8c0:	b6 01       	movw	r22, r12
     8c2:	c4 01       	movw	r24, r8
     8c4:	47 df       	rcall	.-370    	; 0x754 <LCD_GUI_DrawLine>
     8c6:	96 01       	movw	r18, r12
     8c8:	ae 01       	movw	r20, r28
     8ca:	b7 01       	movw	r22, r14
     8cc:	ce 01       	movw	r24, r28
     8ce:	42 df       	rcall	.-380    	; 0x754 <LCD_GUI_DrawLine>
     8d0:	df 91       	pop	r29
     8d2:	cf 91       	pop	r28
     8d4:	1f 91       	pop	r17
     8d6:	0f 91       	pop	r16
     8d8:	ff 90       	pop	r15
     8da:	ef 90       	pop	r14
     8dc:	df 90       	pop	r13
     8de:	cf 90       	pop	r12
     8e0:	bf 90       	pop	r11
     8e2:	af 90       	pop	r10
     8e4:	9f 90       	pop	r9
     8e6:	8f 90       	pop	r8
     8e8:	08 95       	ret

000008ea <LCD_GUI_DrawFillRectangle>:
     8ea:	0f 93       	push	r16
     8ec:	1f 93       	push	r17
     8ee:	e7 de       	rcall	.-562    	; 0x6be <LCD_GUI_Fill>
     8f0:	1f 91       	pop	r17
     8f2:	0f 91       	pop	r16
     8f4:	08 95       	ret

000008f6 <LCD_ShowChar>:
     8f6:	3f 92       	push	r3
     8f8:	4f 92       	push	r4
     8fa:	5f 92       	push	r5
     8fc:	6f 92       	push	r6
     8fe:	7f 92       	push	r7
     900:	8f 92       	push	r8
     902:	9f 92       	push	r9
     904:	af 92       	push	r10
     906:	bf 92       	push	r11
     908:	cf 92       	push	r12
     90a:	df 92       	push	r13
     90c:	ef 92       	push	r14
     90e:	ff 92       	push	r15
     910:	0f 93       	push	r16
     912:	1f 93       	push	r17
     914:	cf 93       	push	r28
     916:	df 93       	push	r29
     918:	6a 01       	movw	r12, r20
     91a:	59 01       	movw	r10, r18
     91c:	00 52       	subi	r16, 0x20	; 32
     91e:	6e 2c       	mov	r6, r14
     920:	71 2c       	mov	r7, r1
     922:	23 01       	movw	r4, r6
     924:	44 0c       	add	r4, r4
     926:	55 1c       	adc	r5, r5
     928:	44 0c       	add	r4, r4
     92a:	55 1c       	adc	r5, r5
     92c:	44 0c       	add	r4, r4
     92e:	55 1c       	adc	r5, r5
     930:	44 0c       	add	r4, r4
     932:	55 1c       	adc	r5, r5
     934:	66 0c       	add	r6, r6
     936:	77 1c       	adc	r7, r7
     938:	66 0c       	add	r6, r6
     93a:	77 1c       	adc	r7, r7
     93c:	66 0c       	add	r6, r6
     93e:	77 1c       	adc	r7, r7
     940:	9b 01       	movw	r18, r22
     942:	21 50       	subi	r18, 0x01	; 1
     944:	31 09       	sbc	r19, r1
     946:	24 0d       	add	r18, r4
     948:	35 1d       	adc	r19, r5
     94a:	ac 01       	movw	r20, r24
     94c:	41 50       	subi	r20, 0x01	; 1
     94e:	51 09       	sbc	r21, r1
     950:	46 0d       	add	r20, r6
     952:	57 1d       	adc	r21, r7
     954:	1f dd       	rcall	.-1474   	; 0x394 <LCD_SetWindows>
     956:	14 14       	cp	r1, r4
     958:	15 04       	cpc	r1, r5
     95a:	bc f5       	brge	.+110    	; 0x9ca <LCD_ShowChar+0xd4>
     95c:	20 e1       	ldi	r18, 0x10	; 16
     95e:	02 9f       	mul	r16, r18
     960:	c0 01       	movw	r24, r0
     962:	11 24       	eor	r1, r1
     964:	31 2c       	mov	r3, r1
     966:	9c 01       	movw	r18, r24
     968:	27 5e       	subi	r18, 0xE7	; 231
     96a:	3d 4f       	sbci	r19, 0xFD	; 253
     96c:	49 01       	movw	r8, r18
     96e:	07 e0       	ldi	r16, 0x07	; 7
     970:	10 e0       	ldi	r17, 0x00	; 0
     972:	83 2d       	mov	r24, r3
     974:	6e 2d       	mov	r22, r14
     976:	ff d7       	rcall	.+4094   	; 0x1976 <__udivmodqi4>
     978:	f4 01       	movw	r30, r8
     97a:	e8 0f       	add	r30, r24
     97c:	f1 1d       	adc	r31, r1
     97e:	c5 81       	ldd	r28, Z+5	; 0x05
     980:	16 14       	cp	r1, r6
     982:	17 04       	cpc	r1, r7
     984:	e4 f4       	brge	.+56     	; 0x9be <LCD_ShowChar+0xc8>
     986:	f1 2c       	mov	r15, r1
     988:	d0 e0       	ldi	r29, 0x00	; 0
     98a:	8f 2d       	mov	r24, r15
     98c:	6e 2d       	mov	r22, r14
     98e:	f3 d7       	rcall	.+4070   	; 0x1976 <__udivmodqi4>
     990:	98 01       	movw	r18, r16
     992:	28 1b       	sub	r18, r24
     994:	31 09       	sbc	r19, r1
     996:	c9 01       	movw	r24, r18
     998:	9e 01       	movw	r18, r28
     99a:	02 c0       	rjmp	.+4      	; 0x9a0 <LCD_ShowChar+0xaa>
     99c:	35 95       	asr	r19
     99e:	27 95       	ror	r18
     9a0:	8a 95       	dec	r24
     9a2:	e2 f7       	brpl	.-8      	; 0x99c <LCD_ShowChar+0xa6>
     9a4:	20 ff       	sbrs	r18, 0
     9a6:	03 c0       	rjmp	.+6      	; 0x9ae <LCD_ShowChar+0xb8>
     9a8:	c6 01       	movw	r24, r12
     9aa:	81 dd       	rcall	.-1278   	; 0x4ae <LCD_WriteData_16Bit>
     9ac:	02 c0       	rjmp	.+4      	; 0x9b2 <LCD_ShowChar+0xbc>
     9ae:	c5 01       	movw	r24, r10
     9b0:	7e dd       	rcall	.-1284   	; 0x4ae <LCD_WriteData_16Bit>
     9b2:	f3 94       	inc	r15
     9b4:	8f 2d       	mov	r24, r15
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	86 15       	cp	r24, r6
     9ba:	97 05       	cpc	r25, r7
     9bc:	34 f3       	brlt	.-52     	; 0x98a <LCD_ShowChar+0x94>
     9be:	33 94       	inc	r3
     9c0:	83 2d       	mov	r24, r3
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	84 15       	cp	r24, r4
     9c6:	95 05       	cpc	r25, r5
     9c8:	a4 f2       	brlt	.-88     	; 0x972 <LCD_ShowChar+0x7c>
     9ca:	df 91       	pop	r29
     9cc:	cf 91       	pop	r28
     9ce:	1f 91       	pop	r17
     9d0:	0f 91       	pop	r16
     9d2:	ff 90       	pop	r15
     9d4:	ef 90       	pop	r14
     9d6:	df 90       	pop	r13
     9d8:	cf 90       	pop	r12
     9da:	bf 90       	pop	r11
     9dc:	af 90       	pop	r10
     9de:	9f 90       	pop	r9
     9e0:	8f 90       	pop	r8
     9e2:	7f 90       	pop	r7
     9e4:	6f 90       	pop	r6
     9e6:	5f 90       	pop	r5
     9e8:	4f 90       	pop	r4
     9ea:	3f 90       	pop	r3
     9ec:	08 95       	ret

000009ee <LCD_ShowString>:
// 
//   LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);
// }

void LCD_ShowString(uint16_t x,uint16_t y,uint8_t size, uint8_t *p, uint16_t fc, uint16_t bc, uint8_t mode)
{
     9ee:	2f 92       	push	r2
     9f0:	3f 92       	push	r3
     9f2:	4f 92       	push	r4
     9f4:	5f 92       	push	r5
     9f6:	6f 92       	push	r6
     9f8:	7f 92       	push	r7
     9fa:	8f 92       	push	r8
     9fc:	9f 92       	push	r9
     9fe:	af 92       	push	r10
     a00:	bf 92       	push	r11
     a02:	cf 92       	push	r12
     a04:	df 92       	push	r13
     a06:	ef 92       	push	r14
     a08:	ff 92       	push	r15
     a0a:	0f 93       	push	r16
     a0c:	1f 93       	push	r17
     a0e:	cf 93       	push	r28
     a10:	df 93       	push	r29
     a12:	00 d0       	rcall	.+0      	; 0xa14 <LCD_ShowString+0x26>
     a14:	1f 92       	push	r1
     a16:	cd b7       	in	r28, 0x3d	; 61
     a18:	de b7       	in	r29, 0x3e	; 62
     a1a:	9c 83       	std	Y+4, r25	; 0x04
     a1c:	8b 83       	std	Y+3, r24	; 0x03
     a1e:	4b 01       	movw	r8, r22
     a20:	d4 2e       	mov	r13, r20
     a22:	1a 83       	std	Y+2, r17	; 0x02
     a24:	09 83       	std	Y+1, r16	; 0x01
     a26:	17 01       	movw	r2, r14
     a28:	1c 2d       	mov	r17, r12
  while((*p<='~')&&(*p>=' '))
     a2a:	f9 01       	movw	r30, r18
     a2c:	00 81       	ld	r16, Z
     a2e:	80 ee       	ldi	r24, 0xE0	; 224
     a30:	80 0f       	add	r24, r16
     a32:	8f 35       	cpi	r24, 0x5F	; 95
     a34:	08 f0       	brcs	.+2      	; 0xa38 <LCD_ShowString+0x4a>
     a36:	4b c0       	rjmp	.+150    	; 0xace <LCD_ShowString+0xe0>
  {
    if(x>(lcddev.width-1)||y>(lcddev.height-1))
     a38:	80 91 08 0b 	lds	r24, 0x0B08	; 0x800b08 <lcddev>
     a3c:	90 91 09 0b 	lds	r25, 0x0B09	; 0x800b09 <lcddev+0x1>
     a40:	01 97       	sbiw	r24, 0x01	; 1
     a42:	4b 81       	ldd	r20, Y+3	; 0x03
     a44:	5c 81       	ldd	r21, Y+4	; 0x04
     a46:	84 17       	cp	r24, r20
     a48:	95 07       	cpc	r25, r21
     a4a:	08 f4       	brcc	.+2      	; 0xa4e <LCD_ShowString+0x60>
     a4c:	40 c0       	rjmp	.+128    	; 0xace <LCD_ShowString+0xe0>
     a4e:	80 91 0a 0b 	lds	r24, 0x0B0A	; 0x800b0a <lcddev+0x2>
     a52:	90 91 0b 0b 	lds	r25, 0x0B0B	; 0x800b0b <lcddev+0x3>
     a56:	01 97       	sbiw	r24, 0x01	; 1
     a58:	86 17       	cp	r24, r22
     a5a:	97 07       	cpc	r25, r23
     a5c:	c0 f1       	brcs	.+112    	; 0xace <LCD_ShowString+0xe0>
    return;
    LCD_ShowChar(x,y,fc,bc,*p,size,mode);
    x+=8*size;
     a5e:	4d 2c       	mov	r4, r13
     a60:	51 2c       	mov	r5, r1
     a62:	44 0c       	add	r4, r4
     a64:	55 1c       	adc	r5, r5
     a66:	44 0c       	add	r4, r4
     a68:	55 1c       	adc	r5, r5
     a6a:	44 0c       	add	r4, r4
     a6c:	55 1c       	adc	r5, r5
     a6e:	59 01       	movw	r10, r18
     a70:	5f ef       	ldi	r21, 0xFF	; 255
     a72:	a5 1a       	sub	r10, r21
     a74:	b5 0a       	sbc	r11, r21

void LCD_ShowString(uint16_t x,uint16_t y,uint8_t size, uint8_t *p, uint16_t fc, uint16_t bc, uint8_t mode)
{
  while((*p<='~')&&(*p>=' '))
  {
    if(x>(lcddev.width-1)||y>(lcddev.height-1))
     a76:	0f 2e       	mov	r0, r31
     a78:	f8 e0       	ldi	r31, 0x08	; 8
     a7a:	6f 2e       	mov	r6, r31
     a7c:	fb e0       	ldi	r31, 0x0B	; 11
     a7e:	7f 2e       	mov	r7, r31
     a80:	f0 2d       	mov	r31, r0
     a82:	0f c0       	rjmp	.+30     	; 0xaa2 <LCD_ShowString+0xb4>
     a84:	f3 01       	movw	r30, r6
     a86:	80 81       	ld	r24, Z
     a88:	91 81       	ldd	r25, Z+1	; 0x01
     a8a:	01 97       	sbiw	r24, 0x01	; 1
     a8c:	2b 81       	ldd	r18, Y+3	; 0x03
     a8e:	3c 81       	ldd	r19, Y+4	; 0x04
     a90:	82 17       	cp	r24, r18
     a92:	93 07       	cpc	r25, r19
     a94:	e0 f0       	brcs	.+56     	; 0xace <LCD_ShowString+0xe0>
     a96:	82 81       	ldd	r24, Z+2	; 0x02
     a98:	93 81       	ldd	r25, Z+3	; 0x03
     a9a:	01 97       	sbiw	r24, 0x01	; 1
     a9c:	88 15       	cp	r24, r8
     a9e:	99 05       	cpc	r25, r9
     aa0:	b0 f0       	brcs	.+44     	; 0xace <LCD_ShowString+0xe0>
    return;
    LCD_ShowChar(x,y,fc,bc,*p,size,mode);
     aa2:	c1 2e       	mov	r12, r17
     aa4:	ed 2c       	mov	r14, r13
     aa6:	91 01       	movw	r18, r2
     aa8:	49 81       	ldd	r20, Y+1	; 0x01
     aaa:	5a 81       	ldd	r21, Y+2	; 0x02
     aac:	b4 01       	movw	r22, r8
     aae:	8b 81       	ldd	r24, Y+3	; 0x03
     ab0:	9c 81       	ldd	r25, Y+4	; 0x04
     ab2:	21 df       	rcall	.-446    	; 0x8f6 <LCD_ShowChar>
    x+=8*size;
     ab4:	4b 81       	ldd	r20, Y+3	; 0x03
     ab6:	5c 81       	ldd	r21, Y+4	; 0x04
     ab8:	44 0d       	add	r20, r4
     aba:	55 1d       	adc	r21, r5
     abc:	5c 83       	std	Y+4, r21	; 0x04
     abe:	4b 83       	std	Y+3, r20	; 0x03
//   LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);
// }

void LCD_ShowString(uint16_t x,uint16_t y,uint8_t size, uint8_t *p, uint16_t fc, uint16_t bc, uint8_t mode)
{
  while((*p<='~')&&(*p>=' '))
     ac0:	f5 01       	movw	r30, r10
     ac2:	01 91       	ld	r16, Z+
     ac4:	5f 01       	movw	r10, r30
     ac6:	80 ee       	ldi	r24, 0xE0	; 224
     ac8:	80 0f       	add	r24, r16
     aca:	8f 35       	cpi	r24, 0x5F	; 95
     acc:	d8 f2       	brcs	.-74     	; 0xa84 <LCD_ShowString+0x96>
    return;
    LCD_ShowChar(x,y,fc,bc,*p,size,mode);
    x+=8*size;
    p++;
  }
}
     ace:	0f 90       	pop	r0
     ad0:	0f 90       	pop	r0
     ad2:	0f 90       	pop	r0
     ad4:	0f 90       	pop	r0
     ad6:	df 91       	pop	r29
     ad8:	cf 91       	pop	r28
     ada:	1f 91       	pop	r17
     adc:	0f 91       	pop	r16
     ade:	ff 90       	pop	r15
     ae0:	ef 90       	pop	r14
     ae2:	df 90       	pop	r13
     ae4:	cf 90       	pop	r12
     ae6:	bf 90       	pop	r11
     ae8:	af 90       	pop	r10
     aea:	9f 90       	pop	r9
     aec:	8f 90       	pop	r8
     aee:	7f 90       	pop	r7
     af0:	6f 90       	pop	r6
     af2:	5f 90       	pop	r5
     af4:	4f 90       	pop	r4
     af6:	3f 90       	pop	r3
     af8:	2f 90       	pop	r2
     afa:	08 95       	ret

00000afc <LCD_ShowNum>:

void LCD_ShowNum(uint16_t x, uint16_t y, uint8_t size, uint16_t fc, uint16_t bc, int num)
{
     afc:	4f 92       	push	r4
     afe:	5f 92       	push	r5
     b00:	6f 92       	push	r6
     b02:	7f 92       	push	r7
     b04:	8f 92       	push	r8
     b06:	9f 92       	push	r9
     b08:	af 92       	push	r10
     b0a:	bf 92       	push	r11
     b0c:	cf 92       	push	r12
     b0e:	df 92       	push	r13
     b10:	ef 92       	push	r14
     b12:	ff 92       	push	r15
     b14:	0f 93       	push	r16
     b16:	1f 93       	push	r17
     b18:	cf 93       	push	r28
     b1a:	df 93       	push	r29
     b1c:	cd b7       	in	r28, 0x3d	; 61
     b1e:	de b7       	in	r29, 0x3e	; 62
     b20:	2f 97       	sbiw	r28, 0x0f	; 15
     b22:	0f b6       	in	r0, 0x3f	; 63
     b24:	f8 94       	cli
     b26:	de bf       	out	0x3e, r29	; 62
     b28:	0f be       	out	0x3f, r0	; 63
     b2a:	cd bf       	out	0x3d, r28	; 61
     b2c:	4c 01       	movw	r8, r24
     b2e:	2b 01       	movw	r4, r22
     b30:	d4 2e       	mov	r13, r20
     b32:	39 01       	movw	r6, r18
  uint8_t value[15];
  sprintf(value, "%d", num);
     b34:	ff 92       	push	r15
     b36:	ef 92       	push	r14
     b38:	86 e1       	ldi	r24, 0x16	; 22
     b3a:	92 e0       	ldi	r25, 0x02	; 2
     b3c:	9f 93       	push	r25
     b3e:	8f 93       	push	r24
     b40:	ce 01       	movw	r24, r28
     b42:	01 96       	adiw	r24, 0x01	; 1
     b44:	5c 01       	movw	r10, r24
     b46:	9f 93       	push	r25
     b48:	8f 93       	push	r24
     b4a:	bf d7       	rcall	.+3966   	; 0x1aca <sprintf>
  LCD_ShowString(x, y, size, value, fc, bc, 0);
     b4c:	c1 2c       	mov	r12, r1
     b4e:	78 01       	movw	r14, r16
     b50:	83 01       	movw	r16, r6
     b52:	95 01       	movw	r18, r10
     b54:	4d 2d       	mov	r20, r13
     b56:	b2 01       	movw	r22, r4
     b58:	c4 01       	movw	r24, r8
     b5a:	49 df       	rcall	.-366    	; 0x9ee <LCD_ShowString>
}
     b5c:	0f 90       	pop	r0
     b5e:	0f 90       	pop	r0
     b60:	0f 90       	pop	r0
     b62:	0f 90       	pop	r0
     b64:	0f 90       	pop	r0
     b66:	0f 90       	pop	r0
     b68:	2f 96       	adiw	r28, 0x0f	; 15
     b6a:	0f b6       	in	r0, 0x3f	; 63
     b6c:	f8 94       	cli
     b6e:	de bf       	out	0x3e, r29	; 62
     b70:	0f be       	out	0x3f, r0	; 63
     b72:	cd bf       	out	0x3d, r28	; 61
     b74:	df 91       	pop	r29
     b76:	cf 91       	pop	r28
     b78:	1f 91       	pop	r17
     b7a:	0f 91       	pop	r16
     b7c:	ff 90       	pop	r15
     b7e:	ef 90       	pop	r14
     b80:	df 90       	pop	r13
     b82:	cf 90       	pop	r12
     b84:	bf 90       	pop	r11
     b86:	af 90       	pop	r10
     b88:	9f 90       	pop	r9
     b8a:	8f 90       	pop	r8
     b8c:	7f 90       	pop	r7
     b8e:	6f 90       	pop	r6
     b90:	5f 90       	pop	r5
     b92:	4f 90       	pop	r4
     b94:	08 95       	ret

00000b96 <SPI_Master_init>:
  SPI_Clock_Polarity_Select(LEADING_EDGE_RISING);
  SPI_Clock_Phase_Select(LEADING_EDGE_SAMPLE);
  SPI_Clock_Rate(SPI_CLOCK_RATE_8MHz);
  SPI_enable();

  mIsSlaveInitialised = true;
     b96:	80 91 c7 08 	lds	r24, 0x08C7	; 0x8008c7 <mIsMasterInitialised>
     b9a:	90 91 c8 08 	lds	r25, 0x08C8	; 0x8008c8 <mIsMasterInitialised+0x1>
     b9e:	89 2b       	or	r24, r25
     ba0:	09 f5       	brne	.+66     	; 0xbe4 <SPI_Master_init+0x4e>
     ba2:	84 b1       	in	r24, 0x04	; 4
     ba4:	87 60       	ori	r24, 0x07	; 7
     ba6:	84 b9       	out	0x04, r24	; 4
     ba8:	8c b5       	in	r24, 0x2c	; 44
     baa:	80 61       	ori	r24, 0x10	; 16
     bac:	8c bd       	out	0x2c, r24	; 44
     bae:	8c b5       	in	r24, 0x2c	; 44
     bb0:	8f 7d       	andi	r24, 0xDF	; 223
     bb2:	8c bd       	out	0x2c, r24	; 44
     bb4:	8c b5       	in	r24, 0x2c	; 44
     bb6:	87 7f       	andi	r24, 0xF7	; 247
     bb8:	8c bd       	out	0x2c, r24	; 44
     bba:	8c b5       	in	r24, 0x2c	; 44
     bbc:	8b 7f       	andi	r24, 0xFB	; 251
     bbe:	8c bd       	out	0x2c, r24	; 44
     bc0:	8c b5       	in	r24, 0x2c	; 44
     bc2:	8d 7f       	andi	r24, 0xFD	; 253
     bc4:	8c bd       	out	0x2c, r24	; 44
     bc6:	8c b5       	in	r24, 0x2c	; 44
     bc8:	8e 7f       	andi	r24, 0xFE	; 254
     bca:	8c bd       	out	0x2c, r24	; 44
     bcc:	8d b5       	in	r24, 0x2d	; 45
     bce:	81 60       	ori	r24, 0x01	; 1
     bd0:	8d bd       	out	0x2d, r24	; 45
     bd2:	8c b5       	in	r24, 0x2c	; 44
     bd4:	80 64       	ori	r24, 0x40	; 64
     bd6:	8c bd       	out	0x2c, r24	; 44
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	90 93 c8 08 	sts	0x08C8, r25	; 0x8008c8 <mIsMasterInitialised+0x1>
     be0:	80 93 c7 08 	sts	0x08C7, r24	; 0x8008c7 <mIsMasterInitialised>
     be4:	08 95       	ret

00000be6 <SPI_Master_transmit>:
}

//Need to select slave before sending the data
char SPI_Master_transmit(char data)
{
  SPDR = data;
     be6:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & (1<<SPIF))) {};
     be8:	0d b4       	in	r0, 0x2d	; 45
     bea:	07 fe       	sbrs	r0, 7
     bec:	fd cf       	rjmp	.-6      	; 0xbe8 <SPI_Master_transmit+0x2>
  return SPDR;
     bee:	8e b5       	in	r24, 0x2e	; 46
}
     bf0:	08 95       	ret

00000bf2 <USART_putstring>:
long USART_received_Int(void)
{
	long number;
	number = atol(Rx_buffer);
	return number;
}
     bf2:	cf 93       	push	r28
     bf4:	df 93       	push	r29
     bf6:	fc 01       	movw	r30, r24
     bf8:	20 81       	ld	r18, Z
     bfa:	22 23       	and	r18, r18
     bfc:	69 f0       	breq	.+26     	; 0xc18 <USART_putstring+0x26>
     bfe:	dc 01       	movw	r26, r24
     c00:	11 96       	adiw	r26, 0x01	; 1
     c02:	e0 ec       	ldi	r30, 0xC0	; 192
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	c6 ec       	ldi	r28, 0xC6	; 198
     c08:	d0 e0       	ldi	r29, 0x00	; 0
     c0a:	90 81       	ld	r25, Z
     c0c:	95 ff       	sbrs	r25, 5
     c0e:	fd cf       	rjmp	.-6      	; 0xc0a <USART_putstring+0x18>
     c10:	28 83       	st	Y, r18
     c12:	2d 91       	ld	r18, X+
     c14:	21 11       	cpse	r18, r1
     c16:	f9 cf       	rjmp	.-14     	; 0xc0a <USART_putstring+0x18>
     c18:	df 91       	pop	r29
     c1a:	cf 91       	pop	r28
     c1c:	08 95       	ret

00000c1e <__vector_25>:
  while (!(UCSR0A & (1 << UDRE0)));  //wait until UDRE0 is set
  UDR0 = data;
}

ISR(USART0_RX_vect)
{
     c1e:	1f 92       	push	r1
     c20:	0f 92       	push	r0
     c22:	0f b6       	in	r0, 0x3f	; 63
     c24:	0f 92       	push	r0
     c26:	11 24       	eor	r1, r1
     c28:	0b b6       	in	r0, 0x3b	; 59
     c2a:	0f 92       	push	r0
     c2c:	2f 93       	push	r18
     c2e:	3f 93       	push	r19
     c30:	4f 93       	push	r20
     c32:	5f 93       	push	r21
     c34:	6f 93       	push	r22
     c36:	7f 93       	push	r23
     c38:	8f 93       	push	r24
     c3a:	9f 93       	push	r25
     c3c:	af 93       	push	r26
     c3e:	bf 93       	push	r27
     c40:	ef 93       	push	r30
     c42:	ff 93       	push	r31
	char ReceivedByte;
	ReceivedByte = UDR0; // Fetch the received byte value into the variable "ByteReceived"
     c44:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	//UDR0 = ReceivedByte; // Echo back the received byte back to the computer
	Rx_buffer[Rx_buffer_index++] = ReceivedByte;
     c48:	e0 91 c9 08 	lds	r30, 0x08C9	; 0x8008c9 <Rx_buffer_index>
     c4c:	91 e0       	ldi	r25, 0x01	; 1
     c4e:	9e 0f       	add	r25, r30
     c50:	90 93 c9 08 	sts	0x08C9, r25	; 0x8008c9 <Rx_buffer_index>
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	e3 5c       	subi	r30, 0xC3	; 195
     c58:	f4 4f       	sbci	r31, 0xF4	; 244
     c5a:	80 83       	st	Z, r24
	if (ReceivedByte == '\n') 
     c5c:	8a 30       	cpi	r24, 0x0A	; 10
     c5e:	71 f4       	brne	.+28     	; 0xc7c <__vector_25+0x5e>
	{
		Rx_buffer[Rx_buffer_index] = 0; //put zero to terminate the string array
     c60:	e0 91 c9 08 	lds	r30, 0x08C9	; 0x8008c9 <Rx_buffer_index>
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	e3 5c       	subi	r30, 0xC3	; 195
     c68:	f4 4f       	sbci	r31, 0xF4	; 244
     c6a:	10 82       	st	Z, r1
		USART_putstring("[Rx echo]: ");
     c6c:	85 e1       	ldi	r24, 0x15	; 21
     c6e:	98 e0       	ldi	r25, 0x08	; 8
     c70:	c0 df       	rcall	.-128    	; 0xbf2 <USART_putstring>
		USART_putstring(Rx_buffer);
     c72:	8d e3       	ldi	r24, 0x3D	; 61
     c74:	9b e0       	ldi	r25, 0x0B	; 11
     c76:	bd df       	rcall	.-134    	; 0xbf2 <USART_putstring>
		Rx_buffer_index = 0;
     c78:	10 92 c9 08 	sts	0x08C9, r1	; 0x8008c9 <Rx_buffer_index>
		ReceivedByte = 0x00;
	}
}
     c7c:	ff 91       	pop	r31
     c7e:	ef 91       	pop	r30
     c80:	bf 91       	pop	r27
     c82:	af 91       	pop	r26
     c84:	9f 91       	pop	r25
     c86:	8f 91       	pop	r24
     c88:	7f 91       	pop	r23
     c8a:	6f 91       	pop	r22
     c8c:	5f 91       	pop	r21
     c8e:	4f 91       	pop	r20
     c90:	3f 91       	pop	r19
     c92:	2f 91       	pop	r18
     c94:	0f 90       	pop	r0
     c96:	0b be       	out	0x3b, r0	; 59
     c98:	0f 90       	pop	r0
     c9a:	0f be       	out	0x3f, r0	; 63
     c9c:	0f 90       	pop	r0
     c9e:	1f 90       	pop	r1
     ca0:	18 95       	reti

00000ca2 <main>:
};

char mScore[10];

int main(void)
{
     ca2:	cf 93       	push	r28
     ca4:	df 93       	push	r29
     ca6:	00 d0       	rcall	.+0      	; 0xca8 <main+0x6>
     ca8:	1f 92       	push	r1
     caa:	1f 92       	push	r1
     cac:	cd b7       	in	r28, 0x3d	; 61
     cae:	de b7       	in	r29, 0x3e	; 62
  LCD_Init();
     cb0:	51 dc       	rcall	.-1886   	; 0x554 <LCD_Init>
  LCD_SetBackLight(20);
     cb2:	84 e1       	ldi	r24, 0x14	; 20
     cb4:	fa db       	rcall	.-2060   	; 0x4aa <LCD_SetBackLight>
  LCD_direction(LCD_ROTATE_90);
     cb6:	81 e0       	ldi	r24, 0x01	; 1
  pDDRV_Button_init();
     cb8:	a6 db       	rcall	.-2228   	; 0x406 <LCD_direction>
     cba:	9f da       	rcall	.-2754   	; 0x1fa <pDDRV_Button_init>
  
  aTRS_ENG_drawBoundary();
     cbc:	f6 d0       	rcall	.+492    	; 0xeaa <aTRS_ENG_drawBoundary>
     cbe:	c1 2c       	mov	r12, r1
  LCD_ShowString(270, 10, 4, "TETRIS", YELLOW, BLACK, 0);
     cc0:	d1 2c       	mov	r13, r1
     cc2:	e1 2c       	mov	r14, r1
     cc4:	f1 2c       	mov	r15, r1
     cc6:	00 ee       	ldi	r16, 0xE0	; 224
     cc8:	1f ef       	ldi	r17, 0xFF	; 255
     cca:	21 e2       	ldi	r18, 0x21	; 33
     ccc:	38 e0       	ldi	r19, 0x08	; 8
     cce:	44 e0       	ldi	r20, 0x04	; 4
     cd0:	50 e0       	ldi	r21, 0x00	; 0
     cd2:	6a e0       	ldi	r22, 0x0A	; 10
     cd4:	70 e0       	ldi	r23, 0x00	; 0
     cd6:	8e e0       	ldi	r24, 0x0E	; 14
     cd8:	91 e0       	ldi	r25, 0x01	; 1
     cda:	89 de       	rcall	.-750    	; 0x9ee <LCD_ShowString>
     cdc:	0f ef       	ldi	r16, 0xFF	; 255
  LCD_GUI_DrawRectangle(320, 90, 380, 163, WHITE);
     cde:	1f ef       	ldi	r17, 0xFF	; 255
     ce0:	23 ea       	ldi	r18, 0xA3	; 163
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	4c e7       	ldi	r20, 0x7C	; 124
     ce6:	51 e0       	ldi	r21, 0x01	; 1
     ce8:	6a e5       	ldi	r22, 0x5A	; 90
     cea:	70 e0       	ldi	r23, 0x00	; 0
     cec:	80 e4       	ldi	r24, 0x40	; 64
     cee:	91 e0       	ldi	r25, 0x01	; 1
     cf0:	ce dd       	rcall	.-1124   	; 0x88e <LCD_GUI_DrawRectangle>
     cf2:	00 ee       	ldi	r16, 0xE0	; 224
  LCD_ShowString(250, 200, 2, "Score", YELLOW, BLACK,0);
     cf4:	1f ef       	ldi	r17, 0xFF	; 255
     cf6:	28 e2       	ldi	r18, 0x28	; 40
     cf8:	38 e0       	ldi	r19, 0x08	; 8
     cfa:	42 e0       	ldi	r20, 0x02	; 2
     cfc:	50 e0       	ldi	r21, 0x00	; 0
     cfe:	68 ec       	ldi	r22, 0xC8	; 200
     d00:	70 e0       	ldi	r23, 0x00	; 0
     d02:	8a ef       	ldi	r24, 0xFA	; 250
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	73 de       	rcall	.-794    	; 0x9ee <LCD_ShowString>
  LCD_ShowNum(340, 200, 2, WHITE, BLACK, (int)aTRS_ENG_GetScore() );
     d08:	c4 d2       	rcall	.+1416   	; 0x1292 <aTRS_ENG_GetScore>
     d0a:	7c 01       	movw	r14, r24
     d0c:	00 e0       	ldi	r16, 0x00	; 0
     d0e:	10 e0       	ldi	r17, 0x00	; 0
     d10:	2f ef       	ldi	r18, 0xFF	; 255
     d12:	3f ef       	ldi	r19, 0xFF	; 255
     d14:	42 e0       	ldi	r20, 0x02	; 2
     d16:	50 e0       	ldi	r21, 0x00	; 0
     d18:	68 ec       	ldi	r22, 0xC8	; 200
     d1a:	70 e0       	ldi	r23, 0x00	; 0
     d1c:	84 e5       	ldi	r24, 0x54	; 84
     d1e:	91 e0       	ldi	r25, 0x01	; 1
     d20:	ed de       	rcall	.-550    	; 0xafc <LCD_ShowNum>

  aTRS_ENG_GenerateNewShape();
     d22:	e2 d0       	rcall	.+452    	; 0xee8 <aTRS_ENG_GenerateNewShape>
     d24:	0f 2e       	mov	r0, r31

  

  while (1)
  {
    sprintf(mScore, "%d", aTRS_ENG_GetScore());
     d26:	f6 e1       	ldi	r31, 0x16	; 22
     d28:	af 2e       	mov	r10, r31
     d2a:	f2 e0       	ldi	r31, 0x02	; 2
     d2c:	bf 2e       	mov	r11, r31
     d2e:	f0 2d       	mov	r31, r0
     d30:	0f 2e       	mov	r0, r31
     d32:	f5 e6       	ldi	r31, 0x65	; 101
     d34:	cf 2e       	mov	r12, r31
     d36:	fb e0       	ldi	r31, 0x0B	; 11
     d38:	df 2e       	mov	r13, r31
     d3a:	f0 2d       	mov	r31, r0
     d3c:	aa d2       	rcall	.+1364   	; 0x1292 <aTRS_ENG_GetScore>
     d3e:	9f 93       	push	r25
     d40:	8f 93       	push	r24
     d42:	bf 92       	push	r11
     d44:	af 92       	push	r10
     d46:	df 92       	push	r13
     d48:	cf 92       	push	r12
     d4a:	bf d6       	rcall	.+3454   	; 0x1aca <sprintf>
    
    __Button_Status button = pDDRV_Button_GetStatus();
     d4c:	84 da       	rcall	.-2808   	; 0x256 <pDDRV_Button_GetStatus>
     d4e:	3a 83       	std	Y+2, r19	; 0x02
     d50:	4b 83       	std	Y+3, r20	; 0x03
     d52:	5c 83       	std	Y+4, r21	; 0x04
     d54:	6d 83       	std	Y+5, r22	; 0x05

    char ScoreString[7]; 

    if (button.up == BUTTON_PRESSED) 
     d56:	0f 90       	pop	r0
     d58:	0f 90       	pop	r0
     d5a:	0f 90       	pop	r0
     d5c:	0f 90       	pop	r0
     d5e:	0f 90       	pop	r0
     d60:	0f 90       	pop	r0
    {
      if (aTRS_ENG_BoundaryCheck_Translate(0))
     d62:	21 11       	cpse	r18, r1
     d64:	08 c0       	rjmp	.+16     	; 0xd76 <main+0xd4>
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	a8 d1       	rcall	.+848    	; 0x10ba <aTRS_ENG_BoundaryCheck_Translate>
      {
        aTRS_ENG_drawCurrentShape(BLACK);
     d6a:	88 23       	and	r24, r24
     d6c:	21 f0       	breq	.+8      	; 0xd76 <main+0xd4>
        aTRS_ENG_ShapeShiftUp();
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	90 e0       	ldi	r25, 0x00	; 0
      }
    }
    
    if (button.down == BUTTON_PRESSED)
     d72:	e1 d2       	rcall	.+1474   	; 0x1336 <aTRS_ENG_drawCurrentShape>
     d74:	44 d1       	rcall	.+648    	; 0xffe <aTRS_ENG_ShapeShiftUp>
     d76:	8b 81       	ldd	r24, Y+3	; 0x03
    {
      if (aTRS_ENG_BoundaryCheck_Translate(2))
     d78:	81 11       	cpse	r24, r1
     d7a:	1c c0       	rjmp	.+56     	; 0xdb4 <main+0x112>
     d7c:	82 e0       	ldi	r24, 0x02	; 2
     d7e:	9d d1       	rcall	.+826    	; 0x10ba <aTRS_ENG_BoundaryCheck_Translate>
     d80:	88 23       	and	r24, r24
      {
        aTRS_ENG_drawCurrentShape(BLACK);
     d82:	29 f0       	breq	.+10     	; 0xd8e <main+0xec>
     d84:	80 e0       	ldi	r24, 0x00	; 0
        aTRS_ENG_ShapeShiftDown();
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	d6 d2       	rcall	.+1452   	; 0x1336 <aTRS_ENG_drawCurrentShape>
      }
      else
      {
        aTRS_ENG_AttachToField();
     d8a:	4b d1       	rcall	.+662    	; 0x1022 <aTRS_ENG_ShapeShiftDown>
     d8c:	13 c0       	rjmp	.+38     	; 0xdb4 <main+0x112>
        aTRS_ENG_CheckClearedRows();
     d8e:	ed d3       	rcall	.+2010   	; 0x156a <aTRS_ENG_AttachToField>
        LCD_ShowNum(340, 200, 2, WHITE, BLACK, (int)aTRS_ENG_GetScore() );
     d90:	88 d4       	rcall	.+2320   	; 0x16a2 <aTRS_ENG_CheckClearedRows>
     d92:	7f d2       	rcall	.+1278   	; 0x1292 <aTRS_ENG_GetScore>
     d94:	7c 01       	movw	r14, r24
     d96:	00 e0       	ldi	r16, 0x00	; 0
     d98:	10 e0       	ldi	r17, 0x00	; 0
     d9a:	2f ef       	ldi	r18, 0xFF	; 255
     d9c:	3f ef       	ldi	r19, 0xFF	; 255
     d9e:	42 e0       	ldi	r20, 0x02	; 2
     da0:	50 e0       	ldi	r21, 0x00	; 0
     da2:	68 ec       	ldi	r22, 0xC8	; 200
     da4:	70 e0       	ldi	r23, 0x00	; 0
     da6:	84 e5       	ldi	r24, 0x54	; 84
        
        if (aTRS_ENG_GenerateNewShape() == NULL) 
     da8:	91 e0       	ldi	r25, 0x01	; 1
     daa:	a8 de       	rcall	.-688    	; 0xafc <LCD_ShowNum>
        {
          aTRS_ENG_GameOver();
     dac:	9d d0       	rcall	.+314    	; 0xee8 <aTRS_ENG_GenerateNewShape>
        }
      }
    } 

    if (button.right == BUTTON_PRESSED)
     dae:	89 2b       	or	r24, r25
     db0:	09 f4       	brne	.+2      	; 0xdb4 <main+0x112>
     db2:	a2 d5       	rcall	.+2884   	; 0x18f8 <aTRS_ENG_GameOver>
    {
      if (aTRS_ENG_BoundaryCheck_Translate(1))
     db4:	8c 81       	ldd	r24, Y+4	; 0x04
     db6:	81 11       	cpse	r24, r1
     db8:	08 c0       	rjmp	.+16     	; 0xdca <main+0x128>
      {
        aTRS_ENG_drawCurrentShape(BLACK);
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	7e d1       	rcall	.+764    	; 0x10ba <aTRS_ENG_BoundaryCheck_Translate>
     dbe:	88 23       	and	r24, r24
        aTRS_ENG_ShapeShiftRight();    
     dc0:	21 f0       	breq	.+8      	; 0xdca <main+0x128>
     dc2:	80 e0       	ldi	r24, 0x00	; 0
      }     
    }

    if (button.left == BUTTON_PRESSED)
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	b7 d2       	rcall	.+1390   	; 0x1336 <aTRS_ENG_drawCurrentShape>
    {
      if (aTRS_ENG_BoundaryCheck_Translate(3))
     dc8:	3e d1       	rcall	.+636    	; 0x1046 <aTRS_ENG_ShapeShiftRight>
     dca:	8a 81       	ldd	r24, Y+2	; 0x02
     dcc:	81 11       	cpse	r24, r1
     dce:	08 c0       	rjmp	.+16     	; 0xde0 <main+0x13e>
     dd0:	83 e0       	ldi	r24, 0x03	; 3
      {
        aTRS_ENG_drawCurrentShape(BLACK);
     dd2:	73 d1       	rcall	.+742    	; 0x10ba <aTRS_ENG_BoundaryCheck_Translate>
     dd4:	88 23       	and	r24, r24
     dd6:	21 f0       	breq	.+8      	; 0xde0 <main+0x13e>
     dd8:	80 e0       	ldi	r24, 0x00	; 0
        aTRS_ENG_ShapeShiftLeft();
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	ac d2       	rcall	.+1368   	; 0x1336 <aTRS_ENG_drawCurrentShape>
      }
    }

    if (button.rotate == BUTTON_PRESSED) 
     dde:	45 d1       	rcall	.+650    	; 0x106a <aTRS_ENG_ShapeShiftLeft>
     de0:	8d 81       	ldd	r24, Y+5	; 0x05
     de2:	81 11       	cpse	r24, r1
    {
      if(aTRS_ENG_BoundaryCheck_Rotate())
     de4:	07 c0       	rjmp	.+14     	; 0xdf4 <main+0x152>
     de6:	f0 d1       	rcall	.+992    	; 0x11c8 <aTRS_ENG_BoundaryCheck_Rotate>
     de8:	88 23       	and	r24, r24
     dea:	21 f0       	breq	.+8      	; 0xdf4 <main+0x152>
      {
        aTRS_ENG_drawCurrentShape(BLACK);
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	a2 d2       	rcall	.+1348   	; 0x1336 <aTRS_ENG_drawCurrentShape>
     df2:	4d d1       	rcall	.+666    	; 0x108e <aTRS_ENG_ShapeRotate>
        aTRS_ENG_ShapeRotate();
     df4:	80 ee       	ldi	r24, 0xE0	; 224
     df6:	97 e0       	ldi	r25, 0x07	; 7
      }
    }

    aTRS_ENG_drawCurrentShape(GREEN);
     df8:	9e d2       	rcall	.+1340   	; 0x1336 <aTRS_ENG_drawCurrentShape>
     dfa:	4f e1       	ldi	r20, 0x1F	; 31
     dfc:	50 e0       	ldi	r21, 0x00	; 0
     dfe:	64 e6       	ldi	r22, 0x64	; 100
    aTRS_ENG_drawNextShape(320, 100, BLUE);
     e00:	70 e0       	ldi	r23, 0x00	; 0
     e02:	80 e4       	ldi	r24, 0x40	; 64
     e04:	91 e0       	ldi	r25, 0x01	; 1
     e06:	35 d3       	rcall	.+1642   	; 0x1472 <aTRS_ENG_drawNextShape>
     e08:	99 cf       	rjmp	.-206    	; 0xd3c <main+0x9a>

00000e0a <Rotate>:
     e0a:	43 70       	andi	r20, 0x03	; 3
     e0c:	41 30       	cpi	r20, 0x01	; 1
     e0e:	59 f0       	breq	.+22     	; 0xe26 <Rotate+0x1c>


    //aTRS_ENG_UpdateCurrentShape();


  }
     e10:	28 f0       	brcs	.+10     	; 0xe1c <Rotate+0x12>
    rowPos++;
  }
  
  //aTRS_ENG_drawCurrentShape(GREEN);
  mMoveDirection = MOVE_NULL;
}
     e12:	42 30       	cpi	r20, 0x02	; 2
     e14:	71 f0       	breq	.+28     	; 0xe32 <Rotate+0x28>
     e16:	43 30       	cpi	r20, 0x03	; 3
     e18:	91 f0       	breq	.+36     	; 0xe3e <Rotate+0x34>
     e1a:	16 c0       	rjmp	.+44     	; 0xe48 <Rotate+0x3e>
     e1c:	66 0f       	add	r22, r22
     e1e:	66 0f       	add	r22, r22
     e20:	96 2f       	mov	r25, r22
     e22:	98 0f       	add	r25, r24
     e24:	11 c0       	rjmp	.+34     	; 0xe48 <Rotate+0x3e>
     e26:	64 5f       	subi	r22, 0xF4	; 244
     e28:	88 0f       	add	r24, r24
     e2a:	88 0f       	add	r24, r24
     e2c:	96 2f       	mov	r25, r22
     e2e:	98 1b       	sub	r25, r24
     e30:	0b c0       	rjmp	.+22     	; 0xe48 <Rotate+0x3e>
     e32:	9f e0       	ldi	r25, 0x0F	; 15
     e34:	98 1b       	sub	r25, r24
     e36:	66 0f       	add	r22, r22
     e38:	66 0f       	add	r22, r22
     e3a:	96 1b       	sub	r25, r22
     e3c:	05 c0       	rjmp	.+10     	; 0xe48 <Rotate+0x3e>
     e3e:	88 0f       	add	r24, r24
     e40:	88 0f       	add	r24, r24
     e42:	8d 5f       	subi	r24, 0xFD	; 253
     e44:	98 2f       	mov	r25, r24
     e46:	96 1b       	sub	r25, r22
     e48:	89 2f       	mov	r24, r25
     e4a:	08 95       	ret

00000e4c <getUnitBlockPos>:
     e4c:	cf 93       	push	r28
     e4e:	df 93       	push	r29
     e50:	cd b7       	in	r28, 0x3d	; 61
     e52:	de b7       	in	r29, 0x3e	; 62
     e54:	28 97       	sbiw	r28, 0x08	; 8
     e56:	0f b6       	in	r0, 0x3f	; 63
     e58:	f8 94       	cli
     e5a:	de bf       	out	0x3e, r29	; 62
     e5c:	0f be       	out	0x3f, r0	; 63
     e5e:	cd bf       	out	0x3d, r28	; 61
     e60:	9f e0       	ldi	r25, 0x0F	; 15
     e62:	96 9f       	mul	r25, r22
     e64:	b0 01       	movw	r22, r0
     e66:	11 24       	eor	r1, r1
     e68:	98 9f       	mul	r25, r24
     e6a:	c0 01       	movw	r24, r0
     e6c:	11 24       	eor	r1, r1
     e6e:	9b 01       	movw	r18, r22
     e70:	24 5f       	subi	r18, 0xF4	; 244
     e72:	3f 4f       	sbci	r19, 0xFF	; 255
     e74:	3a 83       	std	Y+2, r19	; 0x02
     e76:	29 83       	std	Y+1, r18	; 0x01
     e78:	ac 01       	movw	r20, r24
     e7a:	46 5f       	subi	r20, 0xF6	; 246
     e7c:	5f 4f       	sbci	r21, 0xFF	; 255
     e7e:	5c 83       	std	Y+4, r21	; 0x04
     e80:	4b 83       	std	Y+3, r20	; 0x03
     e82:	67 5e       	subi	r22, 0xE7	; 231
     e84:	7f 4f       	sbci	r23, 0xFF	; 255
     e86:	7e 83       	std	Y+6, r23	; 0x06
     e88:	6d 83       	std	Y+5, r22	; 0x05
     e8a:	47 96       	adiw	r24, 0x17	; 23
     e8c:	98 87       	std	Y+8, r25	; 0x08
     e8e:	8f 83       	std	Y+7, r24	; 0x07
     e90:	3a 81       	ldd	r19, Y+2	; 0x02
     e92:	5c 81       	ldd	r21, Y+4	; 0x04
     e94:	7e 81       	ldd	r23, Y+6	; 0x06
     e96:	98 85       	ldd	r25, Y+8	; 0x08
     e98:	28 96       	adiw	r28, 0x08	; 8
     e9a:	0f b6       	in	r0, 0x3f	; 63
     e9c:	f8 94       	cli
     e9e:	de bf       	out	0x3e, r29	; 62
     ea0:	0f be       	out	0x3f, r0	; 63
     ea2:	cd bf       	out	0x3d, r28	; 61
     ea4:	df 91       	pop	r29
     ea6:	cf 91       	pop	r28
     ea8:	08 95       	ret

00000eaa <aTRS_ENG_drawBoundary>:
     eaa:	0f 93       	push	r16
     eac:	1f 93       	push	r17
     eae:	0f ef       	ldi	r16, 0xFF	; 255
     eb0:	1f ef       	ldi	r17, 0xFF	; 255
     eb2:	26 e3       	ldi	r18, 0x36	; 54
     eb4:	31 e0       	ldi	r19, 0x01	; 1
     eb6:	4e ed       	ldi	r20, 0xDE	; 222
     eb8:	50 e0       	ldi	r21, 0x00	; 0
     eba:	68 e0       	ldi	r22, 0x08	; 8
     ebc:	70 e0       	ldi	r23, 0x00	; 0
     ebe:	8a e0       	ldi	r24, 0x0A	; 10
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	e5 dc       	rcall	.-1590   	; 0x88e <LCD_GUI_DrawRectangle>
     ec4:	28 e3       	ldi	r18, 0x38	; 56
     ec6:	31 e0       	ldi	r19, 0x01	; 1
     ec8:	40 ee       	ldi	r20, 0xE0	; 224
     eca:	50 e0       	ldi	r21, 0x00	; 0
     ecc:	66 e0       	ldi	r22, 0x06	; 6
     ece:	70 e0       	ldi	r23, 0x00	; 0
     ed0:	88 e0       	ldi	r24, 0x08	; 8
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	dc dc       	rcall	.-1608   	; 0x88e <LCD_GUI_DrawRectangle>
     ed6:	1f 91       	pop	r17
     ed8:	0f 91       	pop	r16
     eda:	08 95       	ret

00000edc <aTRS_ENG_returnShapeCursorHome>:
     edc:	ee e0       	ldi	r30, 0x0E	; 14
     ede:	f2 e0       	ldi	r31, 0x02	; 2
     ee0:	10 82       	st	Z, r1
     ee2:	85 e0       	ldi	r24, 0x05	; 5
     ee4:	81 83       	std	Z+1, r24	; 0x01
     ee6:	08 95       	ret

00000ee8 <aTRS_ENG_GenerateNewShape>:
     ee8:	9f 92       	push	r9
     eea:	af 92       	push	r10
     eec:	bf 92       	push	r11
     eee:	cf 92       	push	r12
     ef0:	df 92       	push	r13
     ef2:	ef 92       	push	r14
     ef4:	ff 92       	push	r15
     ef6:	0f 93       	push	r16
     ef8:	1f 93       	push	r17
     efa:	cf 93       	push	r28
     efc:	df 93       	push	r29
     efe:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <newGame>
     f02:	81 11       	cpse	r24, r1
     f04:	08 c0       	rjmp	.+16     	; 0xf16 <aTRS_ENG_GenerateNewShape+0x2e>
     f06:	80 91 cd 08 	lds	r24, 0x08CD	; 0x8008cd <mNextShape>
     f0a:	90 91 ce 08 	lds	r25, 0x08CE	; 0x8008ce <mNextShape+0x1>
     f0e:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <mCurrentShape+0x1>
     f12:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <mCurrentShape>
     f16:	cb d5       	rcall	.+2966   	; 0x1aae <rand>
     f18:	67 e0       	ldi	r22, 0x07	; 7
     f1a:	70 e0       	ldi	r23, 0x00	; 0
     f1c:	38 d5       	rcall	.+2672   	; 0x198e <__divmodhi4>
     f1e:	fc 01       	movw	r30, r24
     f20:	ff 27       	eor	r31, r31
     f22:	ee 0f       	add	r30, r30
     f24:	ff 1f       	adc	r31, r31
     f26:	e8 5c       	subi	r30, 0xC8	; 200
     f28:	f7 4f       	sbci	r31, 0xF7	; 247
     f2a:	80 81       	ld	r24, Z
     f2c:	91 81       	ldd	r25, Z+1	; 0x01
     f2e:	90 93 ce 08 	sts	0x08CE, r25	; 0x8008ce <mNextShape+0x1>
     f32:	80 93 cd 08 	sts	0x08CD, r24	; 0x8008cd <mNextShape>
     f36:	bb d5       	rcall	.+2934   	; 0x1aae <rand>
     f38:	87 70       	andi	r24, 0x07	; 7
     f3a:	90 78       	andi	r25, 0x80	; 128
     f3c:	99 23       	and	r25, r25
     f3e:	24 f4       	brge	.+8      	; 0xf48 <aTRS_ENG_GenerateNewShape+0x60>
     f40:	01 97       	sbiw	r24, 0x01	; 1
     f42:	88 6f       	ori	r24, 0xF8	; 248
     f44:	9f 6f       	ori	r25, 0xFF	; 255
     f46:	01 96       	adiw	r24, 0x01	; 1
     f48:	fc 01       	movw	r30, r24
     f4a:	ff 27       	eor	r31, r31
     f4c:	ee 0f       	add	r30, r30
     f4e:	ff 1f       	adc	r31, r31
     f50:	ea 5b       	subi	r30, 0xBA	; 186
     f52:	f7 4f       	sbci	r31, 0xF7	; 247
     f54:	80 81       	ld	r24, Z
     f56:	91 81       	ldd	r25, Z+1	; 0x01
     f58:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <mShapeCursor+0x4>
     f5c:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <mShapeCursor+0x3>
     f60:	bd df       	rcall	.-134    	; 0xedc <aTRS_ENG_returnShapeCursorHome>
     f62:	ee e0       	ldi	r30, 0x0E	; 14
     f64:	f2 e0       	ldi	r31, 0x02	; 2
     f66:	b2 80       	ldd	r11, Z+2	; 0x02
     f68:	e0 90 14 02 	lds	r14, 0x0214	; 0x800214 <mCurrentShape>
     f6c:	f0 90 15 02 	lds	r15, 0x0215	; 0x800215 <mCurrentShape+0x1>
     f70:	80 81       	ld	r24, Z
     f72:	c1 80       	ldd	r12, Z+1	; 0x01
     f74:	0c 2c       	mov	r0, r12
     f76:	00 0c       	add	r0, r0
     f78:	dd 08       	sbc	r13, r13
     f7a:	2e e0       	ldi	r18, 0x0E	; 14
     f7c:	82 02       	muls	r24, r18
     f7e:	c0 0c       	add	r12, r0
     f80:	d1 1c       	adc	r13, r1
     f82:	11 24       	eor	r1, r1
     f84:	c6 01       	movw	r24, r12
     f86:	88 0f       	add	r24, r24
     f88:	99 1f       	adc	r25, r25
     f8a:	fc 01       	movw	r30, r24
     f8c:	e1 53       	subi	r30, 0x31	; 49
     f8e:	f7 4f       	sbci	r31, 0xF7	; 247
     f90:	6f 01       	movw	r12, r30
     f92:	d0 e0       	ldi	r29, 0x00	; 0
     f94:	91 2c       	mov	r9, r1
     f96:	a1 2c       	mov	r10, r1
     f98:	1c c0       	rjmp	.+56     	; 0xfd2 <aTRS_ENG_GenerateNewShape+0xea>
     f9a:	4b 2d       	mov	r20, r11
     f9c:	6d 2f       	mov	r22, r29
     f9e:	8c 2f       	mov	r24, r28
     fa0:	34 df       	rcall	.-408    	; 0xe0a <Rotate>
     fa2:	f7 01       	movw	r30, r14
     fa4:	e8 0f       	add	r30, r24
     fa6:	f1 1d       	adc	r31, r1
     fa8:	80 81       	ld	r24, Z
     faa:	88 23       	and	r24, r24
     fac:	39 f0       	breq	.+14     	; 0xfbc <aTRS_ENG_GenerateNewShape+0xd4>
     fae:	f8 01       	movw	r30, r16
     fb0:	80 81       	ld	r24, Z
     fb2:	91 81       	ldd	r25, Z+1	; 0x01
     fb4:	89 2b       	or	r24, r25
     fb6:	11 f0       	breq	.+4      	; 0xfbc <aTRS_ENG_GenerateNewShape+0xd4>
     fb8:	e9 2c       	mov	r14, r9
     fba:	fa 2c       	mov	r15, r10
     fbc:	cf 5f       	subi	r28, 0xFF	; 255
     fbe:	0e 5f       	subi	r16, 0xFE	; 254
     fc0:	1f 4f       	sbci	r17, 0xFF	; 255
     fc2:	c4 30       	cpi	r28, 0x04	; 4
     fc4:	51 f7       	brne	.-44     	; 0xf9a <aTRS_ENG_GenerateNewShape+0xb2>
     fc6:	df 5f       	subi	r29, 0xFF	; 255
     fc8:	fc e1       	ldi	r31, 0x1C	; 28
     fca:	cf 0e       	add	r12, r31
     fcc:	d1 1c       	adc	r13, r1
     fce:	d4 30       	cpi	r29, 0x04	; 4
     fd0:	19 f0       	breq	.+6      	; 0xfd8 <aTRS_ENG_GenerateNewShape+0xf0>
     fd2:	86 01       	movw	r16, r12
     fd4:	c0 e0       	ldi	r28, 0x00	; 0
     fd6:	e1 cf       	rjmp	.-62     	; 0xf9a <aTRS_ENG_GenerateNewShape+0xb2>
     fd8:	f0 92 15 02 	sts	0x0215, r15	; 0x800215 <mCurrentShape+0x1>
     fdc:	e0 92 14 02 	sts	0x0214, r14	; 0x800214 <mCurrentShape>
     fe0:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <newGame>
     fe4:	c7 01       	movw	r24, r14
     fe6:	df 91       	pop	r29
     fe8:	cf 91       	pop	r28
     fea:	1f 91       	pop	r17
     fec:	0f 91       	pop	r16
     fee:	ff 90       	pop	r15
     ff0:	ef 90       	pop	r14
     ff2:	df 90       	pop	r13
     ff4:	cf 90       	pop	r12
     ff6:	bf 90       	pop	r11
     ff8:	af 90       	pop	r10
     ffa:	9f 90       	pop	r9
     ffc:	08 95       	ret

00000ffe <aTRS_ENG_ShapeShiftUp>:
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	80 93 ca 08 	sts	0x08CA, r24	; 0x8008ca <mMoveDirection>
    1004:	85 e0       	ldi	r24, 0x05	; 5
    1006:	ee e0       	ldi	r30, 0x0E	; 14
    1008:	f2 e0       	ldi	r31, 0x02	; 2
    100a:	a9 e0       	ldi	r26, 0x09	; 9
    100c:	b2 e0       	ldi	r27, 0x02	; 2
    100e:	01 90       	ld	r0, Z+
    1010:	0d 92       	st	X+, r0
    1012:	8a 95       	dec	r24
    1014:	e1 f7       	brne	.-8      	; 0x100e <aTRS_ENG_ShapeShiftUp+0x10>
    1016:	ee e0       	ldi	r30, 0x0E	; 14
    1018:	f2 e0       	ldi	r31, 0x02	; 2
    101a:	80 81       	ld	r24, Z
    101c:	81 50       	subi	r24, 0x01	; 1
    101e:	80 83       	st	Z, r24
    1020:	08 95       	ret

00001022 <aTRS_ENG_ShapeShiftDown>:
    1022:	83 e0       	ldi	r24, 0x03	; 3
    1024:	80 93 ca 08 	sts	0x08CA, r24	; 0x8008ca <mMoveDirection>
    1028:	85 e0       	ldi	r24, 0x05	; 5
    102a:	ee e0       	ldi	r30, 0x0E	; 14
    102c:	f2 e0       	ldi	r31, 0x02	; 2
    102e:	a9 e0       	ldi	r26, 0x09	; 9
    1030:	b2 e0       	ldi	r27, 0x02	; 2
    1032:	01 90       	ld	r0, Z+
    1034:	0d 92       	st	X+, r0
    1036:	8a 95       	dec	r24
    1038:	e1 f7       	brne	.-8      	; 0x1032 <aTRS_ENG_ShapeShiftDown+0x10>
    103a:	ee e0       	ldi	r30, 0x0E	; 14
    103c:	f2 e0       	ldi	r31, 0x02	; 2
    103e:	80 81       	ld	r24, Z
    1040:	8f 5f       	subi	r24, 0xFF	; 255
    1042:	80 83       	st	Z, r24
    1044:	08 95       	ret

00001046 <aTRS_ENG_ShapeShiftRight>:
    1046:	84 e0       	ldi	r24, 0x04	; 4
    1048:	80 93 ca 08 	sts	0x08CA, r24	; 0x8008ca <mMoveDirection>
    104c:	85 e0       	ldi	r24, 0x05	; 5
    104e:	ee e0       	ldi	r30, 0x0E	; 14
    1050:	f2 e0       	ldi	r31, 0x02	; 2
    1052:	a9 e0       	ldi	r26, 0x09	; 9
    1054:	b2 e0       	ldi	r27, 0x02	; 2
    1056:	01 90       	ld	r0, Z+
    1058:	0d 92       	st	X+, r0
    105a:	8a 95       	dec	r24
    105c:	e1 f7       	brne	.-8      	; 0x1056 <aTRS_ENG_ShapeShiftRight+0x10>
    105e:	ee e0       	ldi	r30, 0x0E	; 14
    1060:	f2 e0       	ldi	r31, 0x02	; 2
    1062:	81 81       	ldd	r24, Z+1	; 0x01
    1064:	8f 5f       	subi	r24, 0xFF	; 255
    1066:	81 83       	std	Z+1, r24	; 0x01
    1068:	08 95       	ret

0000106a <aTRS_ENG_ShapeShiftLeft>:
    106a:	82 e0       	ldi	r24, 0x02	; 2
    106c:	80 93 ca 08 	sts	0x08CA, r24	; 0x8008ca <mMoveDirection>
    1070:	85 e0       	ldi	r24, 0x05	; 5
    1072:	ee e0       	ldi	r30, 0x0E	; 14
    1074:	f2 e0       	ldi	r31, 0x02	; 2
    1076:	a9 e0       	ldi	r26, 0x09	; 9
    1078:	b2 e0       	ldi	r27, 0x02	; 2
    107a:	01 90       	ld	r0, Z+
    107c:	0d 92       	st	X+, r0
    107e:	8a 95       	dec	r24
    1080:	e1 f7       	brne	.-8      	; 0x107a <aTRS_ENG_ShapeShiftLeft+0x10>
    1082:	ee e0       	ldi	r30, 0x0E	; 14
    1084:	f2 e0       	ldi	r31, 0x02	; 2
    1086:	81 81       	ldd	r24, Z+1	; 0x01
    1088:	81 50       	subi	r24, 0x01	; 1
    108a:	81 83       	std	Z+1, r24	; 0x01
    108c:	08 95       	ret

0000108e <aTRS_ENG_ShapeRotate>:
    108e:	85 e0       	ldi	r24, 0x05	; 5
    1090:	80 93 ca 08 	sts	0x08CA, r24	; 0x8008ca <mMoveDirection>
    1094:	ee e0       	ldi	r30, 0x0E	; 14
    1096:	f2 e0       	ldi	r31, 0x02	; 2
    1098:	a9 e0       	ldi	r26, 0x09	; 9
    109a:	b2 e0       	ldi	r27, 0x02	; 2
    109c:	01 90       	ld	r0, Z+
    109e:	0d 92       	st	X+, r0
    10a0:	8a 95       	dec	r24
    10a2:	e1 f7       	brne	.-8      	; 0x109c <aTRS_ENG_ShapeRotate+0xe>
    10a4:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <mShapeCursor+0x2>
    10a8:	8f 5f       	subi	r24, 0xFF	; 255
    10aa:	84 30       	cpi	r24, 0x04	; 4
    10ac:	18 f4       	brcc	.+6      	; 0x10b4 <aTRS_ENG_ShapeRotate+0x26>
    10ae:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <mShapeCursor+0x2>
    10b2:	08 95       	ret
    10b4:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <mShapeCursor+0x2>
    10b8:	08 95       	ret

000010ba <aTRS_ENG_BoundaryCheck_Translate>:
    10ba:	6f 92       	push	r6
    10bc:	7f 92       	push	r7
    10be:	8f 92       	push	r8
    10c0:	9f 92       	push	r9
    10c2:	af 92       	push	r10
    10c4:	bf 92       	push	r11
    10c6:	cf 92       	push	r12
    10c8:	df 92       	push	r13
    10ca:	ef 92       	push	r14
    10cc:	ff 92       	push	r15
    10ce:	0f 93       	push	r16
    10d0:	1f 93       	push	r17
    10d2:	cf 93       	push	r28
    10d4:	df 93       	push	r29
    10d6:	ee e0       	ldi	r30, 0x0E	; 14
    10d8:	f2 e0       	ldi	r31, 0x02	; 2
    10da:	a0 80       	ld	r10, Z
    10dc:	61 80       	ldd	r6, Z+1	; 0x01
    10de:	81 30       	cpi	r24, 0x01	; 1
    10e0:	41 f0       	breq	.+16     	; 0x10f2 <aTRS_ENG_BoundaryCheck_Translate+0x38>
    10e2:	28 f0       	brcs	.+10     	; 0x10ee <aTRS_ENG_BoundaryCheck_Translate+0x34>
    10e4:	82 30       	cpi	r24, 0x02	; 2
    10e6:	39 f0       	breq	.+14     	; 0x10f6 <aTRS_ENG_BoundaryCheck_Translate+0x3c>
    10e8:	83 30       	cpi	r24, 0x03	; 3
    10ea:	39 f0       	breq	.+14     	; 0x10fa <aTRS_ENG_BoundaryCheck_Translate+0x40>
    10ec:	07 c0       	rjmp	.+14     	; 0x10fc <aTRS_ENG_BoundaryCheck_Translate+0x42>
    10ee:	aa 94       	dec	r10
    10f0:	05 c0       	rjmp	.+10     	; 0x10fc <aTRS_ENG_BoundaryCheck_Translate+0x42>
    10f2:	63 94       	inc	r6
    10f4:	03 c0       	rjmp	.+6      	; 0x10fc <aTRS_ENG_BoundaryCheck_Translate+0x42>
    10f6:	a3 94       	inc	r10
    10f8:	01 c0       	rjmp	.+2      	; 0x10fc <aTRS_ENG_BoundaryCheck_Translate+0x42>
    10fa:	6a 94       	dec	r6
    10fc:	80 90 14 02 	lds	r8, 0x0214	; 0x800214 <mCurrentShape>
    1100:	90 90 15 02 	lds	r9, 0x0215	; 0x800215 <mCurrentShape+0x1>
    1104:	70 90 10 02 	lds	r7, 0x0210	; 0x800210 <mShapeCursor+0x2>
    1108:	0a 2c       	mov	r0, r10
    110a:	00 0c       	add	r0, r0
    110c:	bb 08       	sbc	r11, r11
    110e:	c5 01       	movw	r24, r10
    1110:	88 0f       	add	r24, r24
    1112:	99 1f       	adc	r25, r25
    1114:	6c 01       	movw	r12, r24
    1116:	cc 0c       	add	r12, r12
    1118:	dd 1c       	adc	r13, r13
    111a:	cc 0c       	add	r12, r12
    111c:	dd 1c       	adc	r13, r13
    111e:	cc 0c       	add	r12, r12
    1120:	dd 1c       	adc	r13, r13
    1122:	c8 1a       	sub	r12, r24
    1124:	d9 0a       	sbc	r13, r25
    1126:	c6 0c       	add	r12, r6
    1128:	d1 1c       	adc	r13, r1
    112a:	67 fc       	sbrc	r6, 7
    112c:	da 94       	dec	r13
    112e:	c6 01       	movw	r24, r12
    1130:	88 0f       	add	r24, r24
    1132:	99 1f       	adc	r25, r25
    1134:	9c 01       	movw	r18, r24
    1136:	21 53       	subi	r18, 0x31	; 49
    1138:	37 4f       	sbci	r19, 0xF7	; 247
    113a:	69 01       	movw	r12, r18
    113c:	d0 e0       	ldi	r29, 0x00	; 0
    113e:	27 c0       	rjmp	.+78     	; 0x118e <aTRS_ENG_BoundaryCheck_Translate+0xd4>
    1140:	47 2d       	mov	r20, r7
    1142:	6d 2f       	mov	r22, r29
    1144:	8c 2f       	mov	r24, r28
    1146:	61 de       	rcall	.-830    	; 0xe0a <Rotate>
    1148:	f4 01       	movw	r30, r8
    114a:	e8 0f       	add	r30, r24
    114c:	f1 1d       	adc	r31, r1
    114e:	80 81       	ld	r24, Z
    1150:	88 23       	and	r24, r24
    1152:	61 f0       	breq	.+24     	; 0x116c <aTRS_ENG_BoundaryCheck_Translate+0xb2>
    1154:	0e 30       	cpi	r16, 0x0E	; 14
    1156:	11 05       	cpc	r17, r1
    1158:	08 f5       	brcc	.+66     	; 0x119c <aTRS_ENG_BoundaryCheck_Translate+0xe2>
    115a:	34 e1       	ldi	r19, 0x14	; 20
    115c:	a3 16       	cp	r10, r19
    115e:	b1 04       	cpc	r11, r1
    1160:	f8 f4       	brcc	.+62     	; 0x11a0 <aTRS_ENG_BoundaryCheck_Translate+0xe6>
    1162:	f7 01       	movw	r30, r14
    1164:	80 81       	ld	r24, Z
    1166:	91 81       	ldd	r25, Z+1	; 0x01
    1168:	89 2b       	or	r24, r25
    116a:	e1 f4       	brne	.+56     	; 0x11a4 <aTRS_ENG_BoundaryCheck_Translate+0xea>
    116c:	cf 5f       	subi	r28, 0xFF	; 255
    116e:	f2 e0       	ldi	r31, 0x02	; 2
    1170:	ef 0e       	add	r14, r31
    1172:	f1 1c       	adc	r15, r1
    1174:	0f 5f       	subi	r16, 0xFF	; 255
    1176:	1f 4f       	sbci	r17, 0xFF	; 255
    1178:	c4 30       	cpi	r28, 0x04	; 4
    117a:	11 f7       	brne	.-60     	; 0x1140 <aTRS_ENG_BoundaryCheck_Translate+0x86>
    117c:	df 5f       	subi	r29, 0xFF	; 255
    117e:	2c e1       	ldi	r18, 0x1C	; 28
    1180:	c2 0e       	add	r12, r18
    1182:	d1 1c       	adc	r13, r1
    1184:	3f ef       	ldi	r19, 0xFF	; 255
    1186:	a3 1a       	sub	r10, r19
    1188:	b3 0a       	sbc	r11, r19
    118a:	d4 30       	cpi	r29, 0x04	; 4
    118c:	69 f0       	breq	.+26     	; 0x11a8 <aTRS_ENG_BoundaryCheck_Translate+0xee>
    118e:	06 2d       	mov	r16, r6
    1190:	06 2c       	mov	r0, r6
    1192:	00 0c       	add	r0, r0
    1194:	11 0b       	sbc	r17, r17
    1196:	76 01       	movw	r14, r12
    1198:	c0 e0       	ldi	r28, 0x00	; 0
    119a:	d2 cf       	rjmp	.-92     	; 0x1140 <aTRS_ENG_BoundaryCheck_Translate+0x86>
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	05 c0       	rjmp	.+10     	; 0x11aa <aTRS_ENG_BoundaryCheck_Translate+0xf0>
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	03 c0       	rjmp	.+6      	; 0x11aa <aTRS_ENG_BoundaryCheck_Translate+0xf0>
    11a4:	80 e0       	ldi	r24, 0x00	; 0
    11a6:	01 c0       	rjmp	.+2      	; 0x11aa <aTRS_ENG_BoundaryCheck_Translate+0xf0>
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	df 91       	pop	r29
    11ac:	cf 91       	pop	r28
    11ae:	1f 91       	pop	r17
    11b0:	0f 91       	pop	r16
    11b2:	ff 90       	pop	r15
    11b4:	ef 90       	pop	r14
    11b6:	df 90       	pop	r13
    11b8:	cf 90       	pop	r12
    11ba:	bf 90       	pop	r11
    11bc:	af 90       	pop	r10
    11be:	9f 90       	pop	r9
    11c0:	8f 90       	pop	r8
    11c2:	7f 90       	pop	r7
    11c4:	6f 90       	pop	r6
    11c6:	08 95       	ret

000011c8 <aTRS_ENG_BoundaryCheck_Rotate>:
    11c8:	af 92       	push	r10
    11ca:	bf 92       	push	r11
    11cc:	cf 92       	push	r12
    11ce:	df 92       	push	r13
    11d0:	ef 92       	push	r14
    11d2:	ff 92       	push	r15
    11d4:	0f 93       	push	r16
    11d6:	1f 93       	push	r17
    11d8:	cf 93       	push	r28
    11da:	df 93       	push	r29
    11dc:	ee e0       	ldi	r30, 0x0E	; 14
    11de:	f2 e0       	ldi	r31, 0x02	; 2
    11e0:	e0 80       	ld	r14, Z
    11e2:	a1 80       	ldd	r10, Z+1	; 0x01
    11e4:	82 81       	ldd	r24, Z+2	; 0x02
    11e6:	bb 24       	eor	r11, r11
    11e8:	b3 94       	inc	r11
    11ea:	b8 0e       	add	r11, r24
    11ec:	84 30       	cpi	r24, 0x04	; 4
    11ee:	58 f1       	brcs	.+86     	; 0x1246 <aTRS_ENG_BoundaryCheck_Rotate+0x7e>
    11f0:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <mShapeCursor+0x2>
    11f4:	28 c0       	rjmp	.+80     	; 0x1246 <aTRS_ENG_BoundaryCheck_Rotate+0x7e>
    11f6:	4b 2d       	mov	r20, r11
    11f8:	6d 2f       	mov	r22, r29
    11fa:	8c 2f       	mov	r24, r28
    11fc:	06 de       	rcall	.-1012   	; 0xe0a <Rotate>
    11fe:	f6 01       	movw	r30, r12
    1200:	e8 0f       	add	r30, r24
    1202:	f1 1d       	adc	r31, r1
    1204:	80 81       	ld	r24, Z
    1206:	88 23       	and	r24, r24
    1208:	39 f0       	breq	.+14     	; 0x1218 <aTRS_ENG_BoundaryCheck_Rotate+0x50>
    120a:	0e 30       	cpi	r16, 0x0E	; 14
    120c:	11 05       	cpc	r17, r1
    120e:	a8 f4       	brcc	.+42     	; 0x123a <aTRS_ENG_BoundaryCheck_Rotate+0x72>
    1210:	84 e1       	ldi	r24, 0x14	; 20
    1212:	e8 16       	cp	r14, r24
    1214:	f1 04       	cpc	r15, r1
    1216:	98 f4       	brcc	.+38     	; 0x123e <aTRS_ENG_BoundaryCheck_Rotate+0x76>
    1218:	cf 5f       	subi	r28, 0xFF	; 255
    121a:	0f 5f       	subi	r16, 0xFF	; 255
    121c:	1f 4f       	sbci	r17, 0xFF	; 255
    121e:	c4 30       	cpi	r28, 0x04	; 4
    1220:	51 f7       	brne	.-44     	; 0x11f6 <aTRS_ENG_BoundaryCheck_Rotate+0x2e>
    1222:	df 5f       	subi	r29, 0xFF	; 255
    1224:	8f ef       	ldi	r24, 0xFF	; 255
    1226:	e8 1a       	sub	r14, r24
    1228:	f8 0a       	sbc	r15, r24
    122a:	d4 30       	cpi	r29, 0x04	; 4
    122c:	51 f0       	breq	.+20     	; 0x1242 <aTRS_ENG_BoundaryCheck_Rotate+0x7a>
    122e:	0a 2d       	mov	r16, r10
    1230:	0a 2c       	mov	r0, r10
    1232:	00 0c       	add	r0, r0
    1234:	11 0b       	sbc	r17, r17
    1236:	c0 e0       	ldi	r28, 0x00	; 0
    1238:	de cf       	rjmp	.-68     	; 0x11f6 <aTRS_ENG_BoundaryCheck_Rotate+0x2e>
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	0d c0       	rjmp	.+26     	; 0x1258 <aTRS_ENG_BoundaryCheck_Rotate+0x90>
    123e:	80 e0       	ldi	r24, 0x00	; 0
    1240:	0b c0       	rjmp	.+22     	; 0x1258 <aTRS_ENG_BoundaryCheck_Rotate+0x90>
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	09 c0       	rjmp	.+18     	; 0x1258 <aTRS_ENG_BoundaryCheck_Rotate+0x90>
    1246:	c0 90 14 02 	lds	r12, 0x0214	; 0x800214 <mCurrentShape>
    124a:	d0 90 15 02 	lds	r13, 0x0215	; 0x800215 <mCurrentShape+0x1>
    124e:	0e 2c       	mov	r0, r14
    1250:	00 0c       	add	r0, r0
    1252:	ff 08       	sbc	r15, r15
    1254:	d0 e0       	ldi	r29, 0x00	; 0
    1256:	eb cf       	rjmp	.-42     	; 0x122e <aTRS_ENG_BoundaryCheck_Rotate+0x66>
    1258:	df 91       	pop	r29
    125a:	cf 91       	pop	r28
    125c:	1f 91       	pop	r17
    125e:	0f 91       	pop	r16
    1260:	ff 90       	pop	r15
    1262:	ef 90       	pop	r14
    1264:	df 90       	pop	r13
    1266:	cf 90       	pop	r12
    1268:	bf 90       	pop	r11
    126a:	af 90       	pop	r10
    126c:	08 95       	ret

0000126e <aTRS_ENG_ClearField>:
    126e:	ef ec       	ldi	r30, 0xCF	; 207
    1270:	f8 e0       	ldi	r31, 0x08	; 8
    1272:	2f ef       	ldi	r18, 0xFF	; 255
    1274:	3a e0       	ldi	r19, 0x0A	; 10
    1276:	09 c0       	rjmp	.+18     	; 0x128a <aTRS_ENG_ClearField+0x1c>
    1278:	11 92       	st	Z+, r1
    127a:	11 92       	st	Z+, r1
    127c:	8e 17       	cp	r24, r30
    127e:	9f 07       	cpc	r25, r31
    1280:	d9 f7       	brne	.-10     	; 0x1278 <aTRS_ENG_ClearField+0xa>
    1282:	fc 01       	movw	r30, r24
    1284:	82 17       	cp	r24, r18
    1286:	93 07       	cpc	r25, r19
    1288:	19 f0       	breq	.+6      	; 0x1290 <aTRS_ENG_ClearField+0x22>
    128a:	cf 01       	movw	r24, r30
    128c:	4c 96       	adiw	r24, 0x1c	; 28
    128e:	f4 cf       	rjmp	.-24     	; 0x1278 <aTRS_ENG_ClearField+0xa>
    1290:	08 95       	ret

00001292 <aTRS_ENG_GetScore>:
    1292:	80 91 cb 08 	lds	r24, 0x08CB	; 0x8008cb <mScore>
    1296:	90 91 cc 08 	lds	r25, 0x08CC	; 0x8008cc <mScore+0x1>
    129a:	08 95       	ret

0000129c <drawUnitBlock>:
    129c:	8f 92       	push	r8
    129e:	9f 92       	push	r9
    12a0:	af 92       	push	r10
    12a2:	bf 92       	push	r11
    12a4:	cf 92       	push	r12
    12a6:	df 92       	push	r13
    12a8:	ef 92       	push	r14
    12aa:	ff 92       	push	r15
    12ac:	0f 93       	push	r16
    12ae:	1f 93       	push	r17
    12b0:	cf 93       	push	r28
    12b2:	df 93       	push	r29
    12b4:	cd b7       	in	r28, 0x3d	; 61
    12b6:	de b7       	in	r29, 0x3e	; 62
    12b8:	28 97       	sbiw	r28, 0x08	; 8
    12ba:	0f b6       	in	r0, 0x3f	; 63
    12bc:	f8 94       	cli
    12be:	de bf       	out	0x3e, r29	; 62
    12c0:	0f be       	out	0x3f, r0	; 63
    12c2:	cd bf       	out	0x3d, r28	; 61
    12c4:	29 83       	std	Y+1, r18	; 0x01
    12c6:	3a 83       	std	Y+2, r19	; 0x02
    12c8:	4b 83       	std	Y+3, r20	; 0x03
    12ca:	5c 83       	std	Y+4, r21	; 0x04
    12cc:	6d 83       	std	Y+5, r22	; 0x05
    12ce:	7e 83       	std	Y+6, r23	; 0x06
    12d0:	8f 83       	std	Y+7, r24	; 0x07
    12d2:	98 87       	std	Y+8, r25	; 0x08
    12d4:	c9 80       	ldd	r12, Y+1	; 0x01
    12d6:	da 80       	ldd	r13, Y+2	; 0x02
    12d8:	ef 80       	ldd	r14, Y+7	; 0x07
    12da:	f8 84       	ldd	r15, Y+8	; 0x08
    12dc:	56 01       	movw	r10, r12
    12de:	8f ef       	ldi	r24, 0xFF	; 255
    12e0:	a8 1a       	sub	r10, r24
    12e2:	b8 0a       	sbc	r11, r24
    12e4:	97 01       	movw	r18, r14
    12e6:	22 50       	subi	r18, 0x02	; 2
    12e8:	31 09       	sbc	r19, r1
    12ea:	4d 81       	ldd	r20, Y+5	; 0x05
    12ec:	5e 81       	ldd	r21, Y+6	; 0x06
    12ee:	41 50       	subi	r20, 0x01	; 1
    12f0:	51 09       	sbc	r21, r1
    12f2:	6b 81       	ldd	r22, Y+3	; 0x03
    12f4:	7c 81       	ldd	r23, Y+4	; 0x04
    12f6:	6f 5f       	subi	r22, 0xFF	; 255
    12f8:	7f 4f       	sbci	r23, 0xFF	; 255
    12fa:	c5 01       	movw	r24, r10
    12fc:	f6 da       	rcall	.-2580   	; 0x8ea <LCD_GUI_DrawFillRectangle>
    12fe:	b7 01       	movw	r22, r14
    1300:	61 50       	subi	r22, 0x01	; 1
    1302:	71 09       	sbc	r23, r1
    1304:	a6 01       	movw	r20, r12
    1306:	4e 5f       	subi	r20, 0xFE	; 254
    1308:	5f 4f       	sbci	r21, 0xFF	; 255
    130a:	9b 01       	movw	r18, r22
    130c:	c5 01       	movw	r24, r10
    130e:	22 da       	rcall	.-3004   	; 0x754 <LCD_GUI_DrawLine>
    1310:	28 96       	adiw	r28, 0x08	; 8
    1312:	0f b6       	in	r0, 0x3f	; 63
    1314:	f8 94       	cli
    1316:	de bf       	out	0x3e, r29	; 62
    1318:	0f be       	out	0x3f, r0	; 63
    131a:	cd bf       	out	0x3d, r28	; 61
    131c:	df 91       	pop	r29
    131e:	cf 91       	pop	r28
    1320:	1f 91       	pop	r17
    1322:	0f 91       	pop	r16
    1324:	ff 90       	pop	r15
    1326:	ef 90       	pop	r14
    1328:	df 90       	pop	r13
    132a:	cf 90       	pop	r12
    132c:	bf 90       	pop	r11
    132e:	af 90       	pop	r10
    1330:	9f 90       	pop	r9
    1332:	8f 90       	pop	r8
    1334:	08 95       	ret

00001336 <aTRS_ENG_drawCurrentShape>:

void aTRS_ENG_drawCurrentShape(uint16_t colour)
{
    1336:	3f 92       	push	r3
    1338:	4f 92       	push	r4
    133a:	5f 92       	push	r5
    133c:	6f 92       	push	r6
    133e:	7f 92       	push	r7
    1340:	8f 92       	push	r8
    1342:	9f 92       	push	r9
    1344:	af 92       	push	r10
    1346:	bf 92       	push	r11
    1348:	cf 92       	push	r12
    134a:	df 92       	push	r13
    134c:	ef 92       	push	r14
    134e:	ff 92       	push	r15
    1350:	0f 93       	push	r16
    1352:	1f 93       	push	r17
    1354:	cf 93       	push	r28
    1356:	df 93       	push	r29
    1358:	cd b7       	in	r28, 0x3d	; 61
    135a:	de b7       	in	r29, 0x3e	; 62
    135c:	28 97       	sbiw	r28, 0x08	; 8
    135e:	0f b6       	in	r0, 0x3f	; 63
    1360:	f8 94       	cli
    1362:	de bf       	out	0x3e, r29	; 62
    1364:	0f be       	out	0x3f, r0	; 63
    1366:	cd bf       	out	0x3d, r28	; 61
  uint8_t rowPos = mShapeCursor.row;
    1368:	ee e0       	ldi	r30, 0x0E	; 14
    136a:	f2 e0       	ldi	r31, 0x02	; 2
    136c:	70 80       	ld	r7, Z
  uint8_t colPos = mShapeCursor.col;
    136e:	b1 80       	ldd	r11, Z+1	; 0x01
    1370:	81 2c       	mov	r8, r1
    1372:	91 2c       	mov	r9, r1
  
  for (uint8_t i = 0; i < 4; i++)
  {
    for (uint8_t j = 0; j < 4; j++)
    {
      if (mCurrentShape[Rotate(j, i, mShapeCursor.rot)]) mColour = colour;
    1374:	6f 01       	movw	r12, r30
      else mColour = BLACK;
    1376:	41 2c       	mov	r4, r1
    1378:	31 2c       	mov	r3, r1
  
  for (uint8_t i = 0; i < 4; i++)
  {
    for (uint8_t j = 0; j < 4; j++)
    {
      if (mCurrentShape[Rotate(j, i, mShapeCursor.rot)]) mColour = colour;
    137a:	58 2e       	mov	r5, r24
    137c:	69 2e       	mov	r6, r25
    137e:	5d c0       	rjmp	.+186    	; 0x143a <aTRS_ENG_drawCurrentShape+0x104>
    1380:	00 91 14 02 	lds	r16, 0x0214	; 0x800214 <mCurrentShape>
    1384:	10 91 15 02 	lds	r17, 0x0215	; 0x800215 <mCurrentShape+0x1>
    1388:	f6 01       	movw	r30, r12
    138a:	42 81       	ldd	r20, Z+2	; 0x02
    138c:	6a 2d       	mov	r22, r10
    138e:	8e 2d       	mov	r24, r14
    1390:	3c dd       	rcall	.-1416   	; 0xe0a <Rotate>
    1392:	f8 01       	movw	r30, r16
    1394:	e8 0f       	add	r30, r24
    1396:	f1 1d       	adc	r31, r1
    1398:	80 81       	ld	r24, Z
    139a:	88 23       	and	r24, r24
    139c:	19 f0       	breq	.+6      	; 0x13a4 <aTRS_ENG_drawCurrentShape+0x6e>
    139e:	05 2d       	mov	r16, r5
    13a0:	16 2d       	mov	r17, r6
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <aTRS_ENG_drawCurrentShape+0x72>
      else mColour = BLACK;
    13a4:	04 2d       	mov	r16, r4
    13a6:	13 2d       	mov	r17, r3

      if ((mShapeCursor.col + j >= 0) && (mShapeCursor.col + j < SCREEN_WIDTH) && (mShapeCursor.row + i < SCREEN_HEIGHT) && (mShapeCursor.row + i >= 0)) //Check if shape is out of field
    13a8:	f6 01       	movw	r30, r12
    13aa:	81 81       	ldd	r24, Z+1	; 0x01
    13ac:	97 01       	movw	r18, r14
    13ae:	28 0f       	add	r18, r24
    13b0:	31 1d       	adc	r19, r1
    13b2:	87 fd       	sbrc	r24, 7
    13b4:	3a 95       	dec	r19
    13b6:	c9 01       	movw	r24, r18
    13b8:	2e 30       	cpi	r18, 0x0E	; 14
    13ba:	31 05       	cpc	r19, r1
    13bc:	58 f5       	brcc	.+86     	; 0x1414 <aTRS_ENG_drawCurrentShape+0xde>
    13be:	20 81       	ld	r18, Z
    13c0:	a4 01       	movw	r20, r8
    13c2:	42 0f       	add	r20, r18
    13c4:	51 1d       	adc	r21, r1
    13c6:	27 fd       	sbrc	r18, 7
    13c8:	5a 95       	dec	r21
    13ca:	9a 01       	movw	r18, r20
    13cc:	44 31       	cpi	r20, 0x14	; 20
    13ce:	51 05       	cpc	r21, r1
    13d0:	08 f5       	brcc	.+66     	; 0x1414 <aTRS_ENG_drawCurrentShape+0xde>
      {
        if (field[(mShapeCursor.row + i) * SCREEN_WIDTH + (mShapeCursor.col + j)] == 0) //Check if field pos is blank
    13d2:	22 0f       	add	r18, r18
    13d4:	33 1f       	adc	r19, r19
    13d6:	f9 01       	movw	r30, r18
    13d8:	ee 0f       	add	r30, r30
    13da:	ff 1f       	adc	r31, r31
    13dc:	ee 0f       	add	r30, r30
    13de:	ff 1f       	adc	r31, r31
    13e0:	ee 0f       	add	r30, r30
    13e2:	ff 1f       	adc	r31, r31
    13e4:	e2 1b       	sub	r30, r18
    13e6:	f3 0b       	sbc	r31, r19
    13e8:	e8 0f       	add	r30, r24
    13ea:	f9 1f       	adc	r31, r25
    13ec:	ee 0f       	add	r30, r30
    13ee:	ff 1f       	adc	r31, r31
    13f0:	e1 53       	subi	r30, 0x31	; 49
    13f2:	f7 4f       	sbci	r31, 0xF7	; 247
    13f4:	80 81       	ld	r24, Z
    13f6:	91 81       	ldd	r25, Z+1	; 0x01
    13f8:	89 2b       	or	r24, r25
    13fa:	61 f4       	brne	.+24     	; 0x1414 <aTRS_ENG_drawCurrentShape+0xde>
        {
            blockPos = getUnitBlockPos(rowPos, colPos) ;
    13fc:	6b 2d       	mov	r22, r11
    13fe:	87 2d       	mov	r24, r7
    1400:	25 dd       	rcall	.-1462   	; 0xe4c <getUnitBlockPos>
    1402:	29 83       	std	Y+1, r18	; 0x01
    1404:	3a 83       	std	Y+2, r19	; 0x02
    1406:	4b 83       	std	Y+3, r20	; 0x03
    1408:	5c 83       	std	Y+4, r21	; 0x04
    140a:	6d 83       	std	Y+5, r22	; 0x05
    140c:	7e 83       	std	Y+6, r23	; 0x06
    140e:	8f 83       	std	Y+7, r24	; 0x07
            
            drawUnitBlock(blockPos, mColour);
    1410:	98 87       	std	Y+8, r25	; 0x08
    1412:	44 df       	rcall	.-376    	; 0x129c <drawUnitBlock>
        }
      }

      colPos++;
    1414:	b3 94       	inc	r11
    1416:	5f ef       	ldi	r21, 0xFF	; 255
    1418:	e5 1a       	sub	r14, r21
    141a:	f5 0a       	sbc	r15, r21
  __unitBlockPos blockPos;
  uint16_t mColour;
  
  for (uint8_t i = 0; i < 4; i++)
  {
    for (uint8_t j = 0; j < 4; j++)
    141c:	84 e0       	ldi	r24, 0x04	; 4
    141e:	e8 16       	cp	r14, r24
    1420:	f1 04       	cpc	r15, r1
    1422:	09 f0       	breq	.+2      	; 0x1426 <aTRS_ENG_drawCurrentShape+0xf0>
    1424:	ad cf       	rjmp	.-166    	; 0x1380 <aTRS_ENG_drawCurrentShape+0x4a>
        }
      }

      colPos++;
    }
    colPos = mShapeCursor.col;
    1426:	f6 01       	movw	r30, r12
    1428:	b1 80       	ldd	r11, Z+1	; 0x01
    rowPos++;
    142a:	73 94       	inc	r7
    142c:	ff ef       	ldi	r31, 0xFF	; 255
    142e:	8f 1a       	sub	r8, r31
    1430:	9f 0a       	sbc	r9, r31
  uint8_t colPos = mShapeCursor.col;
  
  __unitBlockPos blockPos;
  uint16_t mColour;
  
  for (uint8_t i = 0; i < 4; i++)
    1432:	24 e0       	ldi	r18, 0x04	; 4
    1434:	82 16       	cp	r8, r18
    1436:	91 04       	cpc	r9, r1
    1438:	21 f0       	breq	.+8      	; 0x1442 <aTRS_ENG_drawCurrentShape+0x10c>
    143a:	a8 2c       	mov	r10, r8
  //aTRS_ENG_drawCurrentShape(GREEN);
  mMoveDirection = MOVE_NULL;
}

void aTRS_ENG_drawCurrentShape(uint16_t colour)
{
    143c:	e1 2c       	mov	r14, r1
    143e:	f1 2c       	mov	r15, r1
    1440:	9f cf       	rjmp	.-194    	; 0x1380 <aTRS_ENG_drawCurrentShape+0x4a>
      colPos++;
    }
    colPos = mShapeCursor.col;
    rowPos++;
  }
}
    1442:	28 96       	adiw	r28, 0x08	; 8
    1444:	0f b6       	in	r0, 0x3f	; 63
    1446:	f8 94       	cli
    1448:	de bf       	out	0x3e, r29	; 62
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	cd bf       	out	0x3d, r28	; 61
    144e:	df 91       	pop	r29
    1450:	cf 91       	pop	r28
    1452:	1f 91       	pop	r17
    1454:	0f 91       	pop	r16
    1456:	ff 90       	pop	r15
    1458:	ef 90       	pop	r14
    145a:	df 90       	pop	r13
    145c:	cf 90       	pop	r12
    145e:	bf 90       	pop	r11
    1460:	af 90       	pop	r10
    1462:	9f 90       	pop	r9
    1464:	8f 90       	pop	r8
    1466:	7f 90       	pop	r7
    1468:	6f 90       	pop	r6
    146a:	5f 90       	pop	r5
    146c:	4f 90       	pop	r4
    146e:	3f 90       	pop	r3
    1470:	08 95       	ret

00001472 <aTRS_ENG_drawNextShape>:

void aTRS_ENG_drawNextShape(uint16_t x, uint16_t y, uint16_t colour)
{
    1472:	2f 92       	push	r2
    1474:	3f 92       	push	r3
    1476:	4f 92       	push	r4
    1478:	5f 92       	push	r5
    147a:	6f 92       	push	r6
    147c:	7f 92       	push	r7
    147e:	8f 92       	push	r8
    1480:	9f 92       	push	r9
    1482:	af 92       	push	r10
    1484:	bf 92       	push	r11
    1486:	cf 92       	push	r12
    1488:	df 92       	push	r13
    148a:	ef 92       	push	r14
    148c:	ff 92       	push	r15
    148e:	0f 93       	push	r16
    1490:	1f 93       	push	r17
    1492:	cf 93       	push	r28
    1494:	df 93       	push	r29
    1496:	cd b7       	in	r28, 0x3d	; 61
    1498:	de b7       	in	r29, 0x3e	; 62
    149a:	28 97       	sbiw	r28, 0x08	; 8
    149c:	0f b6       	in	r0, 0x3f	; 63
    149e:	f8 94       	cli
    14a0:	de bf       	out	0x3e, r29	; 62
    14a2:	0f be       	out	0x3f, r0	; 63
    14a4:	cd bf       	out	0x3d, r28	; 61
    14a6:	4c 01       	movw	r8, r24
    14a8:	6b 01       	movw	r12, r22
    14aa:	8f ef       	ldi	r24, 0xFF	; 255
    14ac:	c8 1a       	sub	r12, r24
    14ae:	d8 0a       	sbc	r13, r24
  uint8_t rowPos = 0;
    14b0:	61 2c       	mov	r6, r1
  for (uint8_t i = 0; i < 4; i++)
  {
    for (uint8_t j = 0; j < 4; j++)
    {
      if (mNextShape[Rotate(j, i, 0)]) mColour = colour;
      else mColour = BLACK;
    14b2:	41 2c       	mov	r4, r1
    14b4:	51 2c       	mov	r5, r1
  
  for (uint8_t i = 0; i < 4; i++)
  {
    for (uint8_t j = 0; j < 4; j++)
    {
      if (mNextShape[Rotate(j, i, 0)]) mColour = colour;
    14b6:	34 2e       	mov	r3, r20
    14b8:	25 2e       	mov	r2, r21
    14ba:	34 c0       	rjmp	.+104    	; 0x1524 <aTRS_ENG_drawNextShape+0xb2>
    14bc:	00 91 cd 08 	lds	r16, 0x08CD	; 0x8008cd <mNextShape>
    14c0:	10 91 ce 08 	lds	r17, 0x08CE	; 0x8008ce <mNextShape+0x1>
    14c4:	40 e0       	ldi	r20, 0x00	; 0
    14c6:	66 2d       	mov	r22, r6
    14c8:	87 2d       	mov	r24, r7
    14ca:	9f dc       	rcall	.-1730   	; 0xe0a <Rotate>
    14cc:	f8 01       	movw	r30, r16
    14ce:	e8 0f       	add	r30, r24
    14d0:	f1 1d       	adc	r31, r1
    14d2:	80 81       	ld	r24, Z
    14d4:	88 23       	and	r24, r24
    14d6:	19 f0       	breq	.+6      	; 0x14de <aTRS_ENG_drawNextShape+0x6c>
    14d8:	03 2d       	mov	r16, r3
    14da:	12 2d       	mov	r17, r2
    14dc:	02 c0       	rjmp	.+4      	; 0x14e2 <aTRS_ENG_drawNextShape+0x70>
      else mColour = BLACK;
    14de:	04 2d       	mov	r16, r4
    14e0:	15 2d       	mov	r17, r5
    14e2:	2e 2d       	mov	r18, r14
    14e4:	fa 82       	std	Y+2, r15	; 0x02
    14e6:	e9 82       	std	Y+1, r14	; 0x01
    14e8:	4c 2d       	mov	r20, r12
    14ea:	dc 82       	std	Y+4, r13	; 0x04
    14ec:	cb 82       	std	Y+3, r12	; 0x03
    14ee:	c7 01       	movw	r24, r14
    14f0:	0d 96       	adiw	r24, 0x0d	; 13
    14f2:	68 2f       	mov	r22, r24
    14f4:	9e 83       	std	Y+6, r25	; 0x06
    14f6:	8d 83       	std	Y+5, r24	; 0x05
    14f8:	b8 86       	std	Y+8, r11	; 0x08
    14fa:	af 82       	std	Y+7, r10	; 0x07
          blockPos = getNextShapeUnitBlockPos(x, y, rowPos, colPos) ;
          
          drawUnitBlock(blockPos, mColour);
    14fc:	3a 81       	ldd	r19, Y+2	; 0x02
    14fe:	5c 81       	ldd	r21, Y+4	; 0x04
    1500:	7e 81       	ldd	r23, Y+6	; 0x06
    1502:	8a 2d       	mov	r24, r10
    1504:	98 85       	ldd	r25, Y+8	; 0x08
    1506:	ca de       	rcall	.-620    	; 0x129c <drawUnitBlock>

      colPos++;
    1508:	73 94       	inc	r7
    150a:	8f e0       	ldi	r24, 0x0F	; 15
    150c:	e8 0e       	add	r14, r24
    150e:	f1 1c       	adc	r15, r1
  __unitBlockPos blockPos;
  uint16_t mColour;
  
  for (uint8_t i = 0; i < 4; i++)
  {
    for (uint8_t j = 0; j < 4; j++)
    1510:	84 e0       	ldi	r24, 0x04	; 4
    1512:	78 12       	cpse	r7, r24
    1514:	d3 cf       	rjmp	.-90     	; 0x14bc <aTRS_ENG_drawNextShape+0x4a>
          drawUnitBlock(blockPos, mColour);

      colPos++;
    }
    colPos = 0;
    rowPos++;
    1516:	63 94       	inc	r6
    1518:	8f e0       	ldi	r24, 0x0F	; 15
    151a:	c8 0e       	add	r12, r24
    151c:	d1 1c       	adc	r13, r1
  uint8_t colPos = 0;
  
  __unitBlockPos blockPos;
  uint16_t mColour;
  
  for (uint8_t i = 0; i < 4; i++)
    151e:	84 e0       	ldi	r24, 0x04	; 4
    1520:	68 16       	cp	r6, r24
    1522:	51 f0       	breq	.+20     	; 0x1538 <aTRS_ENG_drawNextShape+0xc6>
  __unitBlockPos blockPos =
  {
    .unitBlock_x1 = x1 +(col*UNIT_BLOCK_SIZE + col) + 1,
    .unitBlock_y1 = y1 + (row*UNIT_BLOCK_SIZE + row) + 1,
    .unitBlock_x2 = x1 +(col*UNIT_BLOCK_SIZE + col) + UNIT_BLOCK_SIZE,
    .unitBlock_y2 = y1 + (row*UNIT_BLOCK_SIZE + row) + UNIT_BLOCK_SIZE,
    1524:	56 01       	movw	r10, r12
    1526:	8d e0       	ldi	r24, 0x0D	; 13
    1528:	a8 0e       	add	r10, r24
    152a:	b1 1c       	adc	r11, r1
    152c:	74 01       	movw	r14, r8
    152e:	8f ef       	ldi	r24, 0xFF	; 255
    1530:	e8 1a       	sub	r14, r24
    1532:	f8 0a       	sbc	r15, r24
    1534:	71 2c       	mov	r7, r1
    1536:	c2 cf       	rjmp	.-124    	; 0x14bc <aTRS_ENG_drawNextShape+0x4a>
      colPos++;
    }
    colPos = 0;
    rowPos++;
  }
}
    1538:	28 96       	adiw	r28, 0x08	; 8
    153a:	0f b6       	in	r0, 0x3f	; 63
    153c:	f8 94       	cli
    153e:	de bf       	out	0x3e, r29	; 62
    1540:	0f be       	out	0x3f, r0	; 63
    1542:	cd bf       	out	0x3d, r28	; 61
    1544:	df 91       	pop	r29
    1546:	cf 91       	pop	r28
    1548:	1f 91       	pop	r17
    154a:	0f 91       	pop	r16
    154c:	ff 90       	pop	r15
    154e:	ef 90       	pop	r14
    1550:	df 90       	pop	r13
    1552:	cf 90       	pop	r12
    1554:	bf 90       	pop	r11
    1556:	af 90       	pop	r10
    1558:	9f 90       	pop	r9
    155a:	8f 90       	pop	r8
    155c:	7f 90       	pop	r7
    155e:	6f 90       	pop	r6
    1560:	5f 90       	pop	r5
    1562:	4f 90       	pop	r4
    1564:	3f 90       	pop	r3
    1566:	2f 90       	pop	r2
    1568:	08 95       	ret

0000156a <aTRS_ENG_AttachToField>:

void aTRS_ENG_AttachToField(void)
{
    156a:	2f 92       	push	r2
    156c:	3f 92       	push	r3
    156e:	4f 92       	push	r4
    1570:	5f 92       	push	r5
    1572:	6f 92       	push	r6
    1574:	7f 92       	push	r7
    1576:	8f 92       	push	r8
    1578:	9f 92       	push	r9
    157a:	af 92       	push	r10
    157c:	bf 92       	push	r11
    157e:	cf 92       	push	r12
    1580:	df 92       	push	r13
    1582:	ef 92       	push	r14
    1584:	ff 92       	push	r15
    1586:	0f 93       	push	r16
    1588:	1f 93       	push	r17
    158a:	cf 93       	push	r28
    158c:	df 93       	push	r29
    158e:	cd b7       	in	r28, 0x3d	; 61
    1590:	de b7       	in	r29, 0x3e	; 62
    1592:	2a 97       	sbiw	r28, 0x0a	; 10
    1594:	0f b6       	in	r0, 0x3f	; 63
    1596:	f8 94       	cli
    1598:	de bf       	out	0x3e, r29	; 62
    159a:	0f be       	out	0x3f, r0	; 63
    159c:	cd bf       	out	0x3d, r28	; 61
    159e:	c1 2c       	mov	r12, r1
    15a0:	d1 2c       	mov	r13, r1
  __unitBlockPos blockPos;
  for (uint8_t nRow = 0; nRow < 4; nRow++)
  {
    for (uint8_t nCol= 0; nCol < 4; nCol++)
    {
      if ((mShapeCursor.row + nRow < SCREEN_HEIGHT) && 
    15a2:	0f 2e       	mov	r0, r31
    15a4:	fe e0       	ldi	r31, 0x0E	; 14
    15a6:	af 2e       	mov	r10, r31
    15a8:	f2 e0       	ldi	r31, 0x02	; 2
    15aa:	bf 2e       	mov	r11, r31
    15ac:	f0 2d       	mov	r31, r0
    15ae:	5c c0       	rjmp	.+184    	; 0x1668 <aTRS_ENG_AttachToField+0xfe>
    15b0:	f5 01       	movw	r30, r10
    15b2:	50 80       	ld	r5, Z
    15b4:	86 01       	movw	r16, r12
    15b6:	05 0d       	add	r16, r5
    15b8:	11 1d       	adc	r17, r1
    15ba:	57 fc       	sbrc	r5, 7
    15bc:	1a 95       	dec	r17
    15be:	04 31       	cpi	r16, 0x14	; 20
    15c0:	11 05       	cpc	r17, r1
    15c2:	0c f0       	brlt	.+2      	; 0x15c6 <aTRS_ENG_AttachToField+0x5c>
    15c4:	42 c0       	rjmp	.+132    	; 0x164a <aTRS_ENG_AttachToField+0xe0>
          (mShapeCursor.col + nCol < SCREEN_WIDTH)  && 
    15c6:	31 80       	ldd	r3, Z+1	; 0x01
    15c8:	63 2c       	mov	r6, r3
    15ca:	03 2c       	mov	r0, r3
    15cc:	00 0c       	add	r0, r0
    15ce:	77 08       	sbc	r7, r7
    15d0:	fa 86       	std	Y+10, r15	; 0x0a
    15d2:	e9 86       	std	Y+9, r14	; 0x09
  __unitBlockPos blockPos;
  for (uint8_t nRow = 0; nRow < 4; nRow++)
  {
    for (uint8_t nCol= 0; nCol < 4; nCol++)
    {
      if ((mShapeCursor.row + nRow < SCREEN_HEIGHT) && 
    15d4:	c3 01       	movw	r24, r6
    15d6:	8e 0d       	add	r24, r14
    15d8:	9f 1d       	adc	r25, r15
    15da:	0e 97       	sbiw	r24, 0x0e	; 14
    15dc:	b0 f5       	brcc	.+108    	; 0x164a <aTRS_ENG_AttachToField+0xe0>
          (mShapeCursor.col + nCol < SCREEN_WIDTH)  && 
          (mShapeCursor.col + nCol >= 0) && 
          (mCurrentShape[Rotate(nCol, nRow, mShapeCursor.rot)] != 0))
    15de:	80 90 14 02 	lds	r8, 0x0214	; 0x800214 <mCurrentShape>
    15e2:	90 90 15 02 	lds	r9, 0x0215	; 0x800215 <mCurrentShape+0x1>
    15e6:	42 81       	ldd	r20, Z+2	; 0x02
    15e8:	62 2d       	mov	r22, r2
    15ea:	8e 2d       	mov	r24, r14
    15ec:	0e dc       	rcall	.-2020   	; 0xe0a <Rotate>
    15ee:	f4 01       	movw	r30, r8
    15f0:	e8 0f       	add	r30, r24
    15f2:	f1 1d       	adc	r31, r1
  {
    for (uint8_t nCol= 0; nCol < 4; nCol++)
    {
      if ((mShapeCursor.row + nRow < SCREEN_HEIGHT) && 
          (mShapeCursor.col + nCol < SCREEN_WIDTH)  && 
          (mShapeCursor.col + nCol >= 0) && 
    15f4:	80 81       	ld	r24, Z
    15f6:	88 23       	and	r24, r24
    15f8:	41 f1       	breq	.+80     	; 0x164a <aTRS_ENG_AttachToField+0xe0>
          (mCurrentShape[Rotate(nCol, nRow, mShapeCursor.rot)] != 0))
      {
        field[(mShapeCursor.row + nRow)* SCREEN_WIDTH + mShapeCursor.col+ nCol] = 1;
    15fa:	00 0f       	add	r16, r16
    15fc:	11 1f       	adc	r17, r17
    15fe:	c8 01       	movw	r24, r16
    1600:	88 0f       	add	r24, r24
    1602:	99 1f       	adc	r25, r25
    1604:	88 0f       	add	r24, r24
    1606:	99 1f       	adc	r25, r25
    1608:	88 0f       	add	r24, r24
    160a:	99 1f       	adc	r25, r25
    160c:	80 1b       	sub	r24, r16
    160e:	91 0b       	sbc	r25, r17
    1610:	68 0e       	add	r6, r24
    1612:	79 1e       	adc	r7, r25
    1614:	6e 0c       	add	r6, r14
    1616:	7f 1c       	adc	r7, r15
    1618:	f3 01       	movw	r30, r6
    161a:	ee 0f       	add	r30, r30
    161c:	ff 1f       	adc	r31, r31
    161e:	e1 53       	subi	r30, 0x31	; 49
    1620:	f7 4f       	sbci	r31, 0xF7	; 247
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	91 83       	std	Z+1, r25	; 0x01
    1628:	80 83       	st	Z, r24
        blockPos = getUnitBlockPos(mShapeCursor.row + nRow, mShapeCursor.col+ nCol) ;
    162a:	63 2d       	mov	r22, r3
    162c:	6e 0d       	add	r22, r14
    162e:	85 2d       	mov	r24, r5
    1630:	82 0d       	add	r24, r2
    1632:	0c dc       	rcall	.-2024   	; 0xe4c <getUnitBlockPos>
    1634:	29 83       	std	Y+1, r18	; 0x01
    1636:	3a 83       	std	Y+2, r19	; 0x02
    1638:	4b 83       	std	Y+3, r20	; 0x03
    163a:	5c 83       	std	Y+4, r21	; 0x04
    163c:	6d 83       	std	Y+5, r22	; 0x05
    163e:	7e 83       	std	Y+6, r23	; 0x06
    1640:	8f 83       	std	Y+7, r24	; 0x07
    1642:	98 87       	std	Y+8, r25	; 0x08
        drawUnitBlock(blockPos, RED);
    1644:	00 e0       	ldi	r16, 0x00	; 0
    1646:	18 ef       	ldi	r17, 0xF8	; 248
    1648:	29 de       	rcall	.-942    	; 0x129c <drawUnitBlock>
    164a:	9f ef       	ldi	r25, 0xFF	; 255
    164c:	e9 1a       	sub	r14, r25
    164e:	f9 0a       	sbc	r15, r25
void aTRS_ENG_AttachToField(void)
{
  __unitBlockPos blockPos;
  for (uint8_t nRow = 0; nRow < 4; nRow++)
  {
    for (uint8_t nCol= 0; nCol < 4; nCol++)
    1650:	e4 e0       	ldi	r30, 0x04	; 4
    1652:	ee 16       	cp	r14, r30
    1654:	f1 04       	cpc	r15, r1
    1656:	09 f0       	breq	.+2      	; 0x165a <aTRS_ENG_AttachToField+0xf0>
    1658:	ab cf       	rjmp	.-170    	; 0x15b0 <aTRS_ENG_AttachToField+0x46>
    165a:	ff ef       	ldi	r31, 0xFF	; 255
    165c:	cf 1a       	sub	r12, r31
    165e:	df 0a       	sbc	r13, r31
}

void aTRS_ENG_AttachToField(void)
{
  __unitBlockPos blockPos;
  for (uint8_t nRow = 0; nRow < 4; nRow++)
    1660:	84 e0       	ldi	r24, 0x04	; 4
    1662:	c8 16       	cp	r12, r24
    1664:	d1 04       	cpc	r13, r1
    1666:	21 f0       	breq	.+8      	; 0x1670 <aTRS_ENG_AttachToField+0x106>
    1668:	2c 2c       	mov	r2, r12
    rowPos++;
  }
}

void aTRS_ENG_AttachToField(void)
{
    166a:	e1 2c       	mov	r14, r1
    166c:	f1 2c       	mov	r15, r1
    166e:	a0 cf       	rjmp	.-192    	; 0x15b0 <aTRS_ENG_AttachToField+0x46>
        blockPos = getUnitBlockPos(mShapeCursor.row + nRow, mShapeCursor.col+ nCol) ;
        drawUnitBlock(blockPos, RED);
      }
    }
  }
}
    1670:	2a 96       	adiw	r28, 0x0a	; 10
    1672:	0f b6       	in	r0, 0x3f	; 63
    1674:	f8 94       	cli
    1676:	de bf       	out	0x3e, r29	; 62
    1678:	0f be       	out	0x3f, r0	; 63
    167a:	cd bf       	out	0x3d, r28	; 61
    167c:	df 91       	pop	r29
    167e:	cf 91       	pop	r28
    1680:	1f 91       	pop	r17
    1682:	0f 91       	pop	r16
    1684:	ff 90       	pop	r15
    1686:	ef 90       	pop	r14
    1688:	df 90       	pop	r13
    168a:	cf 90       	pop	r12
    168c:	bf 90       	pop	r11
    168e:	af 90       	pop	r10
    1690:	9f 90       	pop	r9
    1692:	8f 90       	pop	r8
    1694:	7f 90       	pop	r7
    1696:	6f 90       	pop	r6
    1698:	5f 90       	pop	r5
    169a:	4f 90       	pop	r4
    169c:	3f 90       	pop	r3
    169e:	2f 90       	pop	r2
    16a0:	08 95       	ret

000016a2 <aTRS_ENG_CheckClearedRows>:
  }
  return true;
}

void aTRS_ENG_CheckClearedRows(void)
{
    16a2:	2f 92       	push	r2
    16a4:	3f 92       	push	r3
    16a6:	4f 92       	push	r4
    16a8:	5f 92       	push	r5
    16aa:	6f 92       	push	r6
    16ac:	7f 92       	push	r7
    16ae:	8f 92       	push	r8
    16b0:	9f 92       	push	r9
    16b2:	af 92       	push	r10
    16b4:	bf 92       	push	r11
    16b6:	cf 92       	push	r12
    16b8:	df 92       	push	r13
    16ba:	ef 92       	push	r14
    16bc:	ff 92       	push	r15
    16be:	0f 93       	push	r16
    16c0:	1f 93       	push	r17
    16c2:	cf 93       	push	r28
    16c4:	df 93       	push	r29
    16c6:	cd b7       	in	r28, 0x3d	; 61
    16c8:	de b7       	in	r29, 0x3e	; 62
    16ca:	28 97       	sbiw	r28, 0x08	; 8
    16cc:	0f b6       	in	r0, 0x3f	; 63
    16ce:	f8 94       	cli
    16d0:	de bf       	out	0x3e, r29	; 62
    16d2:	0f be       	out	0x3f, r0	; 63
    16d4:	cd bf       	out	0x3d, r28	; 61
    16d6:	0f 2e       	mov	r0, r31
    16d8:	ff ec       	ldi	r31, 0xCF	; 207
    16da:	ef 2e       	mov	r14, r31
    16dc:	f8 e0       	ldi	r31, 0x08	; 8
    16de:	ff 2e       	mov	r15, r31
    16e0:	f0 2d       	mov	r31, r0
  __unitBlockPos blockPos;
  uint8_t clearedRowNum = 0;
  for (uint8_t i = 0; i < SCREEN_HEIGHT; i++)
    16e2:	31 2c       	mov	r3, r1
}

void aTRS_ENG_CheckClearedRows(void)
{
  __unitBlockPos blockPos;
  uint8_t clearedRowNum = 0;
    16e4:	21 2c       	mov	r2, r1
    16e6:	a8 c0       	rjmp	.+336    	; 0x1838 <aTRS_ENG_CheckClearedRows+0x196>
  {
    uint8_t blockNum = 0;
    
    for (uint8_t j = 0; j < SCREEN_WIDTH; j++)
    {
      if (field[i*SCREEN_WIDTH + j])
    16e8:	81 91       	ld	r24, Z+
    16ea:	91 91       	ld	r25, Z+
    16ec:	89 2b       	or	r24, r25
    16ee:	09 f0       	breq	.+2      	; 0x16f2 <aTRS_ENG_CheckClearedRows+0x50>
      {
        blockNum++;
    16f0:	2f 5f       	subi	r18, 0xFF	; 255
  uint8_t clearedRowNum = 0;
  for (uint8_t i = 0; i < SCREEN_HEIGHT; i++)
  {
    uint8_t blockNum = 0;
    
    for (uint8_t j = 0; j < SCREEN_WIDTH; j++)
    16f2:	e6 15       	cp	r30, r6
    16f4:	f7 05       	cpc	r31, r7
    16f6:	c1 f7       	brne	.-16     	; 0x16e8 <aTRS_ENG_CheckClearedRows+0x46>
    16f8:	a6 c0       	rjmp	.+332    	; 0x1846 <aTRS_ENG_CheckClearedRows+0x1a4>
      {
        blockNum++;
      }
    }

    if (blockNum == SCREEN_WIDTH)
    16fa:	d1 2c       	mov	r13, r1
    { 
      //Render cleared row and update field array
      for (uint8_t k = 0; k < SCREEN_WIDTH; k++)
      {
        blockPos = getUnitBlockPos(i, k) ;
    16fc:	6d 2d       	mov	r22, r13
    16fe:	83 2d       	mov	r24, r3
    1700:	a5 db       	rcall	.-2230   	; 0xe4c <getUnitBlockPos>
    1702:	29 83       	std	Y+1, r18	; 0x01
    1704:	3a 83       	std	Y+2, r19	; 0x02
    1706:	4b 83       	std	Y+3, r20	; 0x03
    1708:	5c 83       	std	Y+4, r21	; 0x04
    170a:	6d 83       	std	Y+5, r22	; 0x05
    170c:	7e 83       	std	Y+6, r23	; 0x06
    170e:	8f 83       	std	Y+7, r24	; 0x07
    1710:	98 87       	std	Y+8, r25	; 0x08
        LCD_GUI_DrawFillRectangle(blockPos.unitBlock_x1,
    1712:	2f 81       	ldd	r18, Y+7	; 0x07
    1714:	38 85       	ldd	r19, Y+8	; 0x08
    1716:	4d 81       	ldd	r20, Y+5	; 0x05
    1718:	5e 81       	ldd	r21, Y+6	; 0x06
    171a:	6b 81       	ldd	r22, Y+3	; 0x03
    171c:	7c 81       	ldd	r23, Y+4	; 0x04
    171e:	00 e0       	ldi	r16, 0x00	; 0
    1720:	10 e0       	ldi	r17, 0x00	; 0
    1722:	89 81       	ldd	r24, Y+1	; 0x01
    1724:	9a 81       	ldd	r25, Y+2	; 0x02
    1726:	e1 d8       	rcall	.-3646   	; 0x8ea <LCD_GUI_DrawFillRectangle>
        blockPos.unitBlock_y1,
        blockPos.unitBlock_x2,
        blockPos.unitBlock_y2,
        BLACK);

        field[i*SCREEN_WIDTH + k] = 0;
    1728:	f7 01       	movw	r30, r14
    172a:	11 92       	st	Z+, r1
    172c:	11 92       	st	Z+, r1
    172e:	7f 01       	movw	r14, r30
    }

    if (blockNum == SCREEN_WIDTH)
    { 
      //Render cleared row and update field array
      for (uint8_t k = 0; k < SCREEN_WIDTH; k++)
    1730:	d3 94       	inc	r13
    1732:	fe e0       	ldi	r31, 0x0E	; 14
    1734:	df 12       	cpse	r13, r31
    1736:	e2 cf       	rjmp	.-60     	; 0x16fc <aTRS_ENG_CheckClearedRows+0x5a>
    1738:	a1 2c       	mov	r10, r1
    173a:	b1 2c       	mov	r11, r1
    173c:	65 c0       	rjmp	.+202    	; 0x1808 <aTRS_ENG_CheckClearedRows+0x166>

      //Shift each column down
      for (uint8_t l = 0; l < SCREEN_WIDTH; l++)
      {
        //loop through each row to the top row 1
        for (uint8_t m = i; m > 0; m--)
    173e:	53 2c       	mov	r5, r3
        {
          uint8_t tmpBlock = field[(m-1)*SCREEN_WIDTH + l];
    1740:	45 01       	movw	r8, r10
    1742:	85 2d       	mov	r24, r5
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	01 97       	sbiw	r24, 0x01	; 1
    1748:	88 0f       	add	r24, r24
    174a:	99 1f       	adc	r25, r25
    174c:	7c 01       	movw	r14, r24
    174e:	ee 0c       	add	r14, r14
    1750:	ff 1c       	adc	r15, r15
    1752:	ee 0c       	add	r14, r14
    1754:	ff 1c       	adc	r15, r15
    1756:	ee 0c       	add	r14, r14
    1758:	ff 1c       	adc	r15, r15
    175a:	e8 1a       	sub	r14, r24
    175c:	f9 0a       	sbc	r15, r25
    175e:	67 01       	movw	r12, r14
    1760:	ca 0c       	add	r12, r10
    1762:	db 1c       	adc	r13, r11
    1764:	f6 01       	movw	r30, r12
    1766:	ee 0f       	add	r30, r30
    1768:	ff 1f       	adc	r31, r31
    176a:	e1 53       	subi	r30, 0x31	; 49
    176c:	f7 4f       	sbci	r31, 0xF7	; 247
    176e:	10 81       	ld	r17, Z
          blockPos = getUnitBlockPos(m, l);
    1770:	64 2d       	mov	r22, r4
    1772:	85 2d       	mov	r24, r5
    1774:	6b db       	rcall	.-2346   	; 0xe4c <getUnitBlockPos>
    1776:	29 83       	std	Y+1, r18	; 0x01
    1778:	3a 83       	std	Y+2, r19	; 0x02
    177a:	4b 83       	std	Y+3, r20	; 0x03
    177c:	5c 83       	std	Y+4, r21	; 0x04
    177e:	6d 83       	std	Y+5, r22	; 0x05
    1780:	7e 83       	std	Y+6, r23	; 0x06
    1782:	8f 83       	std	Y+7, r24	; 0x07
    1784:	98 87       	std	Y+8, r25	; 0x08
          if (tmpBlock && !field[(m)*SCREEN_WIDTH + l])
    1786:	11 23       	and	r17, r17
    1788:	79 f0       	breq	.+30     	; 0x17a8 <aTRS_ENG_CheckClearedRows+0x106>
    178a:	f6 01       	movw	r30, r12
    178c:	ee 0f       	add	r30, r30
    178e:	ff 1f       	adc	r31, r31
    1790:	e5 51       	subi	r30, 0x15	; 21
    1792:	f7 4f       	sbci	r31, 0xF7	; 247
    1794:	80 81       	ld	r24, Z
    1796:	91 81       	ldd	r25, Z+1	; 0x01
    1798:	89 2b       	or	r24, r25
    179a:	e1 f4       	brne	.+56     	; 0x17d4 <aTRS_ENG_CheckClearedRows+0x132>
          {
            drawUnitBlock(blockPos, RED);
    179c:	00 e0       	ldi	r16, 0x00	; 0
    179e:	18 ef       	ldi	r17, 0xF8	; 248
    17a0:	8f 81       	ldd	r24, Y+7	; 0x07
    17a2:	98 85       	ldd	r25, Y+8	; 0x08
    17a4:	7b dd       	rcall	.-1290   	; 0x129c <drawUnitBlock>
    17a6:	16 c0       	rjmp	.+44     	; 0x17d4 <aTRS_ENG_CheckClearedRows+0x132>
          }
          else if (!tmpBlock && field[(m)*SCREEN_WIDTH + l])
    17a8:	f7 01       	movw	r30, r14
    17aa:	ea 0d       	add	r30, r10
    17ac:	fb 1d       	adc	r31, r11
    17ae:	ee 0f       	add	r30, r30
    17b0:	ff 1f       	adc	r31, r31
    17b2:	e5 51       	subi	r30, 0x15	; 21
    17b4:	f7 4f       	sbci	r31, 0xF7	; 247
    17b6:	80 81       	ld	r24, Z
    17b8:	91 81       	ldd	r25, Z+1	; 0x01
    17ba:	89 2b       	or	r24, r25
    17bc:	59 f0       	breq	.+22     	; 0x17d4 <aTRS_ENG_CheckClearedRows+0x132>
          {
            LCD_GUI_DrawFillRectangle(blockPos.unitBlock_x1,
    17be:	2f 81       	ldd	r18, Y+7	; 0x07
    17c0:	38 85       	ldd	r19, Y+8	; 0x08
    17c2:	4d 81       	ldd	r20, Y+5	; 0x05
    17c4:	5e 81       	ldd	r21, Y+6	; 0x06
    17c6:	6b 81       	ldd	r22, Y+3	; 0x03
    17c8:	7c 81       	ldd	r23, Y+4	; 0x04
    17ca:	00 e0       	ldi	r16, 0x00	; 0
    17cc:	10 e0       	ldi	r17, 0x00	; 0
    17ce:	89 81       	ldd	r24, Y+1	; 0x01
    17d0:	9a 81       	ldd	r25, Y+2	; 0x02
    17d2:	8b d8       	rcall	.-3818   	; 0x8ea <LCD_GUI_DrawFillRectangle>
            blockPos.unitBlock_y1,
            blockPos.unitBlock_x2,
            blockPos.unitBlock_y2,
            BLACK);
          }
          field[(m)*SCREEN_WIDTH + l] = field[(m-1)*SCREEN_WIDTH + l];
    17d4:	f6 01       	movw	r30, r12
    17d6:	ee 0f       	add	r30, r30
    17d8:	ff 1f       	adc	r31, r31
    17da:	e1 53       	subi	r30, 0x31	; 49
    17dc:	f7 4f       	sbci	r31, 0xF7	; 247
    17de:	80 81       	ld	r24, Z
    17e0:	91 81       	ldd	r25, Z+1	; 0x01
    17e2:	f7 01       	movw	r30, r14
    17e4:	e8 0d       	add	r30, r8
    17e6:	f9 1d       	adc	r31, r9
    17e8:	ee 0f       	add	r30, r30
    17ea:	ff 1f       	adc	r31, r31
    17ec:	e5 51       	subi	r30, 0x15	; 21
    17ee:	f7 4f       	sbci	r31, 0xF7	; 247
    17f0:	91 83       	std	Z+1, r25	; 0x01
    17f2:	80 83       	st	Z, r24

      //Shift each column down
      for (uint8_t l = 0; l < SCREEN_WIDTH; l++)
      {
        //loop through each row to the top row 1
        for (uint8_t m = i; m > 0; m--)
    17f4:	5a 94       	dec	r5
    17f6:	51 10       	cpse	r5, r1
    17f8:	a4 cf       	rjmp	.-184    	; 0x1742 <aTRS_ENG_CheckClearedRows+0xa0>
    17fa:	2f ef       	ldi	r18, 0xFF	; 255
    17fc:	a2 1a       	sub	r10, r18
    17fe:	b2 0a       	sbc	r11, r18

        field[i*SCREEN_WIDTH + k] = 0;
      }

      //Shift each column down
      for (uint8_t l = 0; l < SCREEN_WIDTH; l++)
    1800:	8e e0       	ldi	r24, 0x0E	; 14
    1802:	a8 16       	cp	r10, r24
    1804:	b1 04       	cpc	r11, r1
    1806:	21 f0       	breq	.+8      	; 0x1810 <aTRS_ENG_CheckClearedRows+0x16e>
    1808:	4a 2c       	mov	r4, r10
      {
        //loop through each row to the top row 1
        for (uint8_t m = i; m > 0; m--)
    180a:	31 10       	cpse	r3, r1
    180c:	98 cf       	rjmp	.-208    	; 0x173e <aTRS_ENG_CheckClearedRows+0x9c>
    180e:	f5 cf       	rjmp	.-22     	; 0x17fa <aTRS_ENG_CheckClearedRows+0x158>
            BLACK);
          }
          field[(m)*SCREEN_WIDTH + l] = field[(m-1)*SCREEN_WIDTH + l];
        }
      }
      clearedRowNum++;
    1810:	23 94       	inc	r2
      mScore += 100*clearedRowNum;
    1812:	80 91 cb 08 	lds	r24, 0x08CB	; 0x8008cb <mScore>
    1816:	90 91 cc 08 	lds	r25, 0x08CC	; 0x8008cc <mScore+0x1>
    181a:	e4 e6       	ldi	r30, 0x64	; 100
    181c:	e2 9d       	mul	r30, r2
    181e:	80 0d       	add	r24, r0
    1820:	91 1d       	adc	r25, r1
    1822:	11 24       	eor	r1, r1
    1824:	90 93 cc 08 	sts	0x08CC, r25	; 0x8008cc <mScore+0x1>
    1828:	80 93 cb 08 	sts	0x08CB, r24	; 0x8008cb <mScore>
    }
    aTRS_ENG_returnShapeCursorHome();
    182c:	57 db       	rcall	.-2386   	; 0xedc <aTRS_ENG_returnShapeCursorHome>

void aTRS_ENG_CheckClearedRows(void)
{
  __unitBlockPos blockPos;
  uint8_t clearedRowNum = 0;
  for (uint8_t i = 0; i < SCREEN_HEIGHT; i++)
    182e:	33 94       	inc	r3
    1830:	73 01       	movw	r14, r6
    1832:	f4 e1       	ldi	r31, 0x14	; 20
    1834:	3f 16       	cp	r3, r31
    1836:	51 f0       	breq	.+20     	; 0x184c <aTRS_ENG_CheckClearedRows+0x1aa>
    1838:	37 01       	movw	r6, r14
    183a:	2c e1       	ldi	r18, 0x1C	; 28
    183c:	62 0e       	add	r6, r18
    183e:	71 1c       	adc	r7, r1
  }
  return true;
}

void aTRS_ENG_CheckClearedRows(void)
{
    1840:	f7 01       	movw	r30, r14
    1842:	20 e0       	ldi	r18, 0x00	; 0
    1844:	51 cf       	rjmp	.-350    	; 0x16e8 <aTRS_ENG_CheckClearedRows+0x46>
      {
        blockNum++;
      }
    }

    if (blockNum == SCREEN_WIDTH)
    1846:	2e 30       	cpi	r18, 0x0E	; 14
    1848:	89 f7       	brne	.-30     	; 0x182c <aTRS_ENG_CheckClearedRows+0x18a>
    184a:	57 cf       	rjmp	.-338    	; 0x16fa <aTRS_ENG_CheckClearedRows+0x58>
      clearedRowNum++;
      mScore += 100*clearedRowNum;
    }
    aTRS_ENG_returnShapeCursorHome();
  }
}
    184c:	28 96       	adiw	r28, 0x08	; 8
    184e:	0f b6       	in	r0, 0x3f	; 63
    1850:	f8 94       	cli
    1852:	de bf       	out	0x3e, r29	; 62
    1854:	0f be       	out	0x3f, r0	; 63
    1856:	cd bf       	out	0x3d, r28	; 61
    1858:	df 91       	pop	r29
    185a:	cf 91       	pop	r28
    185c:	1f 91       	pop	r17
    185e:	0f 91       	pop	r16
    1860:	ff 90       	pop	r15
    1862:	ef 90       	pop	r14
    1864:	df 90       	pop	r13
    1866:	cf 90       	pop	r12
    1868:	bf 90       	pop	r11
    186a:	af 90       	pop	r10
    186c:	9f 90       	pop	r9
    186e:	8f 90       	pop	r8
    1870:	7f 90       	pop	r7
    1872:	6f 90       	pop	r6
    1874:	5f 90       	pop	r5
    1876:	4f 90       	pop	r4
    1878:	3f 90       	pop	r3
    187a:	2f 90       	pop	r2
    187c:	08 95       	ret

0000187e <aTRS_ENG_refreshAllBlocks>:

/************************************************************************/
/* Extra functions                                                      */
/************************************************************************/
void aTRS_ENG_refreshAllBlocks(uint16_t colour)
{
    187e:	af 92       	push	r10
    1880:	bf 92       	push	r11
    1882:	cf 92       	push	r12
    1884:	df 92       	push	r13
    1886:	ef 92       	push	r14
    1888:	ff 92       	push	r15
    188a:	0f 93       	push	r16
    188c:	1f 93       	push	r17
    188e:	cf 93       	push	r28
    1890:	df 93       	push	r29
    1892:	5c 01       	movw	r10, r24
    1894:	0f 2e       	mov	r0, r31
    1896:	fa e0       	ldi	r31, 0x0A	; 10
    1898:	ef 2e       	mov	r14, r31
    189a:	f1 2c       	mov	r15, r1
    189c:	f0 2d       	mov	r31, r0
    189e:	1a c0       	rjmp	.+52     	; 0x18d4 <aTRS_ENG_refreshAllBlocks+0x56>
  for (int i = 0; i < 20; i++)
  {
    for (int j = 0; j < 14; j++)
    {
      LCD_GUI_DrawFillRectangle(11 +(j*UNIT_BLOCK_SIZE + j) + 1,
    18a0:	ae 01       	movw	r20, r28
    18a2:	43 5f       	subi	r20, 0xF3	; 243
    18a4:	5f 4f       	sbci	r21, 0xFF	; 255
    18a6:	85 01       	movw	r16, r10
    18a8:	96 01       	movw	r18, r12
    18aa:	b7 01       	movw	r22, r14
    18ac:	ce 01       	movw	r24, r28
    18ae:	1d d8       	rcall	.-4038   	; 0x8ea <LCD_GUI_DrawFillRectangle>
    18b0:	8f e3       	ldi	r24, 0x3F	; 63
    18b2:	9c e9       	ldi	r25, 0x9C	; 156
    18b4:	01 97       	sbiw	r24, 0x01	; 1
    18b6:	f1 f7       	brne	.-4      	; 0x18b4 <aTRS_ENG_refreshAllBlocks+0x36>
    18b8:	00 c0       	rjmp	.+0      	; 0x18ba <aTRS_ENG_refreshAllBlocks+0x3c>
    18ba:	00 00       	nop
    18bc:	2f 96       	adiw	r28, 0x0f	; 15
/************************************************************************/
void aTRS_ENG_refreshAllBlocks(uint16_t colour)
{
  for (int i = 0; i < 20; i++)
  {
    for (int j = 0; j < 14; j++)
    18be:	ce 3d       	cpi	r28, 0xDE	; 222
    18c0:	d1 05       	cpc	r29, r1
    18c2:	71 f7       	brne	.-36     	; 0x18a0 <aTRS_ENG_refreshAllBlocks+0x22>
    18c4:	9f e0       	ldi	r25, 0x0F	; 15
    18c6:	e9 0e       	add	r14, r25
    18c8:	f1 1c       	adc	r15, r1
/************************************************************************/
/* Extra functions                                                      */
/************************************************************************/
void aTRS_ENG_refreshAllBlocks(uint16_t colour)
{
  for (int i = 0; i < 20; i++)
    18ca:	86 e3       	ldi	r24, 0x36	; 54
    18cc:	e8 16       	cp	r14, r24
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	f8 06       	cpc	r15, r24
    18d2:	39 f0       	breq	.+14     	; 0x18e2 <aTRS_ENG_refreshAllBlocks+0x64>
    18d4:	67 01       	movw	r12, r14
    18d6:	9d e0       	ldi	r25, 0x0D	; 13
    18d8:	c9 0e       	add	r12, r25
    18da:	d1 1c       	adc	r13, r1

/************************************************************************/
/* Extra functions                                                      */
/************************************************************************/
void aTRS_ENG_refreshAllBlocks(uint16_t colour)
{
    18dc:	cc e0       	ldi	r28, 0x0C	; 12
    18de:	d0 e0       	ldi	r29, 0x00	; 0
    18e0:	df cf       	rjmp	.-66     	; 0x18a0 <aTRS_ENG_refreshAllBlocks+0x22>
      9 + (i*UNIT_BLOCK_SIZE + i) + UNIT_BLOCK_SIZE,
      colour);
      _delay_ms(10);
    }
  }
    18e2:	df 91       	pop	r29
    18e4:	cf 91       	pop	r28
    18e6:	1f 91       	pop	r17
    18e8:	0f 91       	pop	r16
    18ea:	ff 90       	pop	r15
    18ec:	ef 90       	pop	r14
    18ee:	df 90       	pop	r13
    18f0:	cf 90       	pop	r12
    18f2:	bf 90       	pop	r11
    18f4:	af 90       	pop	r10
    18f6:	08 95       	ret

000018f8 <aTRS_ENG_GameOver>:
{
  return mScore;
}

void aTRS_ENG_GameOver(void)
{
    18f8:	cf 92       	push	r12
    18fa:	ef 92       	push	r14
    18fc:	ff 92       	push	r15
    18fe:	0f 93       	push	r16
    1900:	1f 93       	push	r17
  LCD_ShowString(60, 100, 4, "GAME", WHITE, BLACK, 0);
    1902:	c1 2c       	mov	r12, r1
    1904:	e1 2c       	mov	r14, r1
    1906:	f1 2c       	mov	r15, r1
    1908:	0f ef       	ldi	r16, 0xFF	; 255
    190a:	1f ef       	ldi	r17, 0xFF	; 255
    190c:	2e e2       	ldi	r18, 0x2E	; 46
    190e:	38 e0       	ldi	r19, 0x08	; 8
    1910:	44 e0       	ldi	r20, 0x04	; 4
    1912:	64 e6       	ldi	r22, 0x64	; 100
    1914:	70 e0       	ldi	r23, 0x00	; 0
    1916:	8c e3       	ldi	r24, 0x3C	; 60
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	69 d8       	rcall	.-3886   	; 0x9ee <LCD_ShowString>
  LCD_ShowString(60, 150, 4, "OVER", WHITE, BLACK, 0);
    191c:	23 e3       	ldi	r18, 0x33	; 51
    191e:	38 e0       	ldi	r19, 0x08	; 8
    1920:	44 e0       	ldi	r20, 0x04	; 4
    1922:	66 e9       	ldi	r22, 0x96	; 150
    1924:	70 e0       	ldi	r23, 0x00	; 0
    1926:	8c e3       	ldi	r24, 0x3C	; 60
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	61 d8       	rcall	.-3902   	; 0x9ee <LCD_ShowString>
    192c:	2f ef       	ldi	r18, 0xFF	; 255
    192e:	83 ed       	ldi	r24, 0xD3	; 211
    1930:	90 e3       	ldi	r25, 0x30	; 48
    1932:	21 50       	subi	r18, 0x01	; 1
    1934:	80 40       	sbci	r24, 0x00	; 0
    1936:	90 40       	sbci	r25, 0x00	; 0
    1938:	e1 f7       	brne	.-8      	; 0x1932 <aTRS_ENG_GameOver+0x3a>
    193a:	00 c0       	rjmp	.+0      	; 0x193c <aTRS_ENG_GameOver+0x44>
    193c:	00 00       	nop
  _delay_ms(1000);
  aTRS_ENG_refreshAllBlocks(WHITE);
    193e:	8f ef       	ldi	r24, 0xFF	; 255
    1940:	9f ef       	ldi	r25, 0xFF	; 255
    1942:	9d df       	rcall	.-198    	; 0x187e <aTRS_ENG_refreshAllBlocks>
  aTRS_ENG_ClearField();
    1944:	94 dc       	rcall	.-1752   	; 0x126e <aTRS_ENG_ClearField>
    1946:	00 e0       	ldi	r16, 0x00	; 0
  LCD_GUI_DrawFillRectangle(TetrisFrame.frame_x1+1,
    1948:	10 e0       	ldi	r17, 0x00	; 0
    194a:	24 e3       	ldi	r18, 0x34	; 52
    194c:	31 e0       	ldi	r19, 0x01	; 1
    194e:	4d ed       	ldi	r20, 0xDD	; 221
    1950:	50 e0       	ldi	r21, 0x00	; 0
    1952:	69 e0       	ldi	r22, 0x09	; 9
    1954:	70 e0       	ldi	r23, 0x00	; 0
    1956:	8b e0       	ldi	r24, 0x0B	; 11
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	0e 94 75 04 	call	0x8ea	; 0x8ea <LCD_GUI_DrawFillRectangle>
                            TetrisFrame.frame_y1+1,
                            TetrisFrame.frame_x2-1,
                            TetrisFrame.frame_y2-2,
                            BLACK);
  aTRS_ENG_returnShapeCursorHome();
    195e:	be da       	rcall	.-2692   	; 0xedc <aTRS_ENG_returnShapeCursorHome>
    1960:	10 92 cc 08 	sts	0x08CC, r1	; 0x8008cc <mScore+0x1>
  mScore = 0;
    1964:	10 92 cb 08 	sts	0x08CB, r1	; 0x8008cb <mScore>

  aTRS_ENG_GenerateNewShape();
    1968:	bf da       	rcall	.-2690   	; 0xee8 <aTRS_ENG_GenerateNewShape>
    196a:	1f 91       	pop	r17
}
    196c:	0f 91       	pop	r16
    196e:	ff 90       	pop	r15
    1970:	ef 90       	pop	r14
    1972:	cf 90       	pop	r12
    1974:	08 95       	ret

00001976 <__udivmodqi4>:
    1976:	99 1b       	sub	r25, r25
    1978:	79 e0       	ldi	r23, 0x09	; 9
    197a:	04 c0       	rjmp	.+8      	; 0x1984 <__udivmodqi4_ep>

0000197c <__udivmodqi4_loop>:
    197c:	99 1f       	adc	r25, r25
    197e:	96 17       	cp	r25, r22
    1980:	08 f0       	brcs	.+2      	; 0x1984 <__udivmodqi4_ep>
    1982:	96 1b       	sub	r25, r22

00001984 <__udivmodqi4_ep>:
    1984:	88 1f       	adc	r24, r24
    1986:	7a 95       	dec	r23
    1988:	c9 f7       	brne	.-14     	; 0x197c <__udivmodqi4_loop>
    198a:	80 95       	com	r24
    198c:	08 95       	ret

0000198e <__divmodhi4>:
    198e:	97 fb       	bst	r25, 7
    1990:	07 2e       	mov	r0, r23
    1992:	16 f4       	brtc	.+4      	; 0x1998 <__divmodhi4+0xa>
    1994:	00 94       	com	r0
    1996:	06 d0       	rcall	.+12     	; 0x19a4 <__divmodhi4_neg1>
    1998:	77 fd       	sbrc	r23, 7
    199a:	08 d0       	rcall	.+16     	; 0x19ac <__divmodhi4_neg2>
    199c:	2d d0       	rcall	.+90     	; 0x19f8 <__udivmodhi4>
    199e:	07 fc       	sbrc	r0, 7
    19a0:	05 d0       	rcall	.+10     	; 0x19ac <__divmodhi4_neg2>
    19a2:	3e f4       	brtc	.+14     	; 0x19b2 <__divmodhi4_exit>

000019a4 <__divmodhi4_neg1>:
    19a4:	90 95       	com	r25
    19a6:	81 95       	neg	r24
    19a8:	9f 4f       	sbci	r25, 0xFF	; 255
    19aa:	08 95       	ret

000019ac <__divmodhi4_neg2>:
    19ac:	70 95       	com	r23
    19ae:	61 95       	neg	r22
    19b0:	7f 4f       	sbci	r23, 0xFF	; 255

000019b2 <__divmodhi4_exit>:
    19b2:	08 95       	ret

000019b4 <__udivmodsi4>:
    19b4:	a1 e2       	ldi	r26, 0x21	; 33
    19b6:	1a 2e       	mov	r1, r26
    19b8:	aa 1b       	sub	r26, r26
    19ba:	bb 1b       	sub	r27, r27
    19bc:	fd 01       	movw	r30, r26
    19be:	0d c0       	rjmp	.+26     	; 0x19da <__udivmodsi4_ep>

000019c0 <__udivmodsi4_loop>:
    19c0:	aa 1f       	adc	r26, r26
    19c2:	bb 1f       	adc	r27, r27
    19c4:	ee 1f       	adc	r30, r30
    19c6:	ff 1f       	adc	r31, r31
    19c8:	a2 17       	cp	r26, r18
    19ca:	b3 07       	cpc	r27, r19
    19cc:	e4 07       	cpc	r30, r20
    19ce:	f5 07       	cpc	r31, r21
    19d0:	20 f0       	brcs	.+8      	; 0x19da <__udivmodsi4_ep>
    19d2:	a2 1b       	sub	r26, r18
    19d4:	b3 0b       	sbc	r27, r19
    19d6:	e4 0b       	sbc	r30, r20
    19d8:	f5 0b       	sbc	r31, r21

000019da <__udivmodsi4_ep>:
    19da:	66 1f       	adc	r22, r22
    19dc:	77 1f       	adc	r23, r23
    19de:	88 1f       	adc	r24, r24
    19e0:	99 1f       	adc	r25, r25
    19e2:	1a 94       	dec	r1
    19e4:	69 f7       	brne	.-38     	; 0x19c0 <__udivmodsi4_loop>
    19e6:	60 95       	com	r22
    19e8:	70 95       	com	r23
    19ea:	80 95       	com	r24
    19ec:	90 95       	com	r25
    19ee:	9b 01       	movw	r18, r22
    19f0:	ac 01       	movw	r20, r24
    19f2:	bd 01       	movw	r22, r26
    19f4:	cf 01       	movw	r24, r30
    19f6:	08 95       	ret

000019f8 <__udivmodhi4>:
    19f8:	aa 1b       	sub	r26, r26
    19fa:	bb 1b       	sub	r27, r27
    19fc:	51 e1       	ldi	r21, 0x11	; 17
    19fe:	07 c0       	rjmp	.+14     	; 0x1a0e <__udivmodhi4_ep>

00001a00 <__udivmodhi4_loop>:
    1a00:	aa 1f       	adc	r26, r26
    1a02:	bb 1f       	adc	r27, r27
    1a04:	a6 17       	cp	r26, r22
    1a06:	b7 07       	cpc	r27, r23
    1a08:	10 f0       	brcs	.+4      	; 0x1a0e <__udivmodhi4_ep>
    1a0a:	a6 1b       	sub	r26, r22
    1a0c:	b7 0b       	sbc	r27, r23

00001a0e <__udivmodhi4_ep>:
    1a0e:	88 1f       	adc	r24, r24
    1a10:	99 1f       	adc	r25, r25
    1a12:	5a 95       	dec	r21
    1a14:	a9 f7       	brne	.-22     	; 0x1a00 <__udivmodhi4_loop>
    1a16:	80 95       	com	r24
    1a18:	90 95       	com	r25
    1a1a:	bc 01       	movw	r22, r24
    1a1c:	cd 01       	movw	r24, r26
    1a1e:	08 95       	ret

00001a20 <do_rand>:
    1a20:	8f 92       	push	r8
    1a22:	9f 92       	push	r9
    1a24:	af 92       	push	r10
    1a26:	bf 92       	push	r11
    1a28:	cf 92       	push	r12
    1a2a:	df 92       	push	r13
    1a2c:	ef 92       	push	r14
    1a2e:	ff 92       	push	r15
    1a30:	cf 93       	push	r28
    1a32:	df 93       	push	r29
    1a34:	ec 01       	movw	r28, r24
    1a36:	68 81       	ld	r22, Y
    1a38:	79 81       	ldd	r23, Y+1	; 0x01
    1a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a3e:	61 15       	cp	r22, r1
    1a40:	71 05       	cpc	r23, r1
    1a42:	81 05       	cpc	r24, r1
    1a44:	91 05       	cpc	r25, r1
    1a46:	21 f4       	brne	.+8      	; 0x1a50 <do_rand+0x30>
    1a48:	64 e2       	ldi	r22, 0x24	; 36
    1a4a:	79 ed       	ldi	r23, 0xD9	; 217
    1a4c:	8b e5       	ldi	r24, 0x5B	; 91
    1a4e:	97 e0       	ldi	r25, 0x07	; 7
    1a50:	2d e1       	ldi	r18, 0x1D	; 29
    1a52:	33 ef       	ldi	r19, 0xF3	; 243
    1a54:	41 e0       	ldi	r20, 0x01	; 1
    1a56:	50 e0       	ldi	r21, 0x00	; 0
    1a58:	13 d3       	rcall	.+1574   	; 0x2080 <__divmodsi4>
    1a5a:	49 01       	movw	r8, r18
    1a5c:	5a 01       	movw	r10, r20
    1a5e:	9b 01       	movw	r18, r22
    1a60:	ac 01       	movw	r20, r24
    1a62:	a7 ea       	ldi	r26, 0xA7	; 167
    1a64:	b1 e4       	ldi	r27, 0x41	; 65
    1a66:	28 d3       	rcall	.+1616   	; 0x20b8 <__muluhisi3>
    1a68:	6b 01       	movw	r12, r22
    1a6a:	7c 01       	movw	r14, r24
    1a6c:	ac ee       	ldi	r26, 0xEC	; 236
    1a6e:	b4 ef       	ldi	r27, 0xF4	; 244
    1a70:	a5 01       	movw	r20, r10
    1a72:	94 01       	movw	r18, r8
    1a74:	2d d3       	rcall	.+1626   	; 0x20d0 <__mulohisi3>
    1a76:	dc 01       	movw	r26, r24
    1a78:	cb 01       	movw	r24, r22
    1a7a:	8c 0d       	add	r24, r12
    1a7c:	9d 1d       	adc	r25, r13
    1a7e:	ae 1d       	adc	r26, r14
    1a80:	bf 1d       	adc	r27, r15
    1a82:	b7 ff       	sbrs	r27, 7
    1a84:	03 c0       	rjmp	.+6      	; 0x1a8c <do_rand+0x6c>
    1a86:	01 97       	sbiw	r24, 0x01	; 1
    1a88:	a1 09       	sbc	r26, r1
    1a8a:	b0 48       	sbci	r27, 0x80	; 128
    1a8c:	88 83       	st	Y, r24
    1a8e:	99 83       	std	Y+1, r25	; 0x01
    1a90:	aa 83       	std	Y+2, r26	; 0x02
    1a92:	bb 83       	std	Y+3, r27	; 0x03
    1a94:	9f 77       	andi	r25, 0x7F	; 127
    1a96:	df 91       	pop	r29
    1a98:	cf 91       	pop	r28
    1a9a:	ff 90       	pop	r15
    1a9c:	ef 90       	pop	r14
    1a9e:	df 90       	pop	r13
    1aa0:	cf 90       	pop	r12
    1aa2:	bf 90       	pop	r11
    1aa4:	af 90       	pop	r10
    1aa6:	9f 90       	pop	r9
    1aa8:	8f 90       	pop	r8
    1aaa:	08 95       	ret

00001aac <rand_r>:
    1aac:	b9 cf       	rjmp	.-142    	; 0x1a20 <do_rand>

00001aae <rand>:
    1aae:	80 e0       	ldi	r24, 0x00	; 0
    1ab0:	92 e0       	ldi	r25, 0x02	; 2
    1ab2:	b6 cf       	rjmp	.-148    	; 0x1a20 <do_rand>

00001ab4 <srand>:
    1ab4:	a0 e0       	ldi	r26, 0x00	; 0
    1ab6:	b0 e0       	ldi	r27, 0x00	; 0
    1ab8:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
    1abc:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    1ac0:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
    1ac4:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
    1ac8:	08 95       	ret

00001aca <sprintf>:
    1aca:	0f 93       	push	r16
    1acc:	1f 93       	push	r17
    1ace:	cf 93       	push	r28
    1ad0:	df 93       	push	r29
    1ad2:	cd b7       	in	r28, 0x3d	; 61
    1ad4:	de b7       	in	r29, 0x3e	; 62
    1ad6:	2e 97       	sbiw	r28, 0x0e	; 14
    1ad8:	0f b6       	in	r0, 0x3f	; 63
    1ada:	f8 94       	cli
    1adc:	de bf       	out	0x3e, r29	; 62
    1ade:	0f be       	out	0x3f, r0	; 63
    1ae0:	cd bf       	out	0x3d, r28	; 61
    1ae2:	0e 89       	ldd	r16, Y+22	; 0x16
    1ae4:	1f 89       	ldd	r17, Y+23	; 0x17
    1ae6:	86 e0       	ldi	r24, 0x06	; 6
    1ae8:	8c 83       	std	Y+4, r24	; 0x04
    1aea:	1a 83       	std	Y+2, r17	; 0x02
    1aec:	09 83       	std	Y+1, r16	; 0x01
    1aee:	8f ef       	ldi	r24, 0xFF	; 255
    1af0:	9f e7       	ldi	r25, 0x7F	; 127
    1af2:	9e 83       	std	Y+6, r25	; 0x06
    1af4:	8d 83       	std	Y+5, r24	; 0x05
    1af6:	ae 01       	movw	r20, r28
    1af8:	46 5e       	subi	r20, 0xE6	; 230
    1afa:	5f 4f       	sbci	r21, 0xFF	; 255
    1afc:	68 8d       	ldd	r22, Y+24	; 0x18
    1afe:	79 8d       	ldd	r23, Y+25	; 0x19
    1b00:	ce 01       	movw	r24, r28
    1b02:	01 96       	adiw	r24, 0x01	; 1
    1b04:	10 d0       	rcall	.+32     	; 0x1b26 <vfprintf>
    1b06:	ef 81       	ldd	r30, Y+7	; 0x07
    1b08:	f8 85       	ldd	r31, Y+8	; 0x08
    1b0a:	e0 0f       	add	r30, r16
    1b0c:	f1 1f       	adc	r31, r17
    1b0e:	10 82       	st	Z, r1
    1b10:	2e 96       	adiw	r28, 0x0e	; 14
    1b12:	0f b6       	in	r0, 0x3f	; 63
    1b14:	f8 94       	cli
    1b16:	de bf       	out	0x3e, r29	; 62
    1b18:	0f be       	out	0x3f, r0	; 63
    1b1a:	cd bf       	out	0x3d, r28	; 61
    1b1c:	df 91       	pop	r29
    1b1e:	cf 91       	pop	r28
    1b20:	1f 91       	pop	r17
    1b22:	0f 91       	pop	r16
    1b24:	08 95       	ret

00001b26 <vfprintf>:
    1b26:	2f 92       	push	r2
    1b28:	3f 92       	push	r3
    1b2a:	4f 92       	push	r4
    1b2c:	5f 92       	push	r5
    1b2e:	6f 92       	push	r6
    1b30:	7f 92       	push	r7
    1b32:	8f 92       	push	r8
    1b34:	9f 92       	push	r9
    1b36:	af 92       	push	r10
    1b38:	bf 92       	push	r11
    1b3a:	cf 92       	push	r12
    1b3c:	df 92       	push	r13
    1b3e:	ef 92       	push	r14
    1b40:	ff 92       	push	r15
    1b42:	0f 93       	push	r16
    1b44:	1f 93       	push	r17
    1b46:	cf 93       	push	r28
    1b48:	df 93       	push	r29
    1b4a:	cd b7       	in	r28, 0x3d	; 61
    1b4c:	de b7       	in	r29, 0x3e	; 62
    1b4e:	2b 97       	sbiw	r28, 0x0b	; 11
    1b50:	0f b6       	in	r0, 0x3f	; 63
    1b52:	f8 94       	cli
    1b54:	de bf       	out	0x3e, r29	; 62
    1b56:	0f be       	out	0x3f, r0	; 63
    1b58:	cd bf       	out	0x3d, r28	; 61
    1b5a:	6c 01       	movw	r12, r24
    1b5c:	7b 01       	movw	r14, r22
    1b5e:	8a 01       	movw	r16, r20
    1b60:	fc 01       	movw	r30, r24
    1b62:	17 82       	std	Z+7, r1	; 0x07
    1b64:	16 82       	std	Z+6, r1	; 0x06
    1b66:	83 81       	ldd	r24, Z+3	; 0x03
    1b68:	81 ff       	sbrs	r24, 1
    1b6a:	bf c1       	rjmp	.+894    	; 0x1eea <vfprintf+0x3c4>
    1b6c:	ce 01       	movw	r24, r28
    1b6e:	01 96       	adiw	r24, 0x01	; 1
    1b70:	3c 01       	movw	r6, r24
    1b72:	f6 01       	movw	r30, r12
    1b74:	93 81       	ldd	r25, Z+3	; 0x03
    1b76:	f7 01       	movw	r30, r14
    1b78:	93 fd       	sbrc	r25, 3
    1b7a:	85 91       	lpm	r24, Z+
    1b7c:	93 ff       	sbrs	r25, 3
    1b7e:	81 91       	ld	r24, Z+
    1b80:	7f 01       	movw	r14, r30
    1b82:	88 23       	and	r24, r24
    1b84:	09 f4       	brne	.+2      	; 0x1b88 <vfprintf+0x62>
    1b86:	ad c1       	rjmp	.+858    	; 0x1ee2 <vfprintf+0x3bc>
    1b88:	85 32       	cpi	r24, 0x25	; 37
    1b8a:	39 f4       	brne	.+14     	; 0x1b9a <vfprintf+0x74>
    1b8c:	93 fd       	sbrc	r25, 3
    1b8e:	85 91       	lpm	r24, Z+
    1b90:	93 ff       	sbrs	r25, 3
    1b92:	81 91       	ld	r24, Z+
    1b94:	7f 01       	movw	r14, r30
    1b96:	85 32       	cpi	r24, 0x25	; 37
    1b98:	21 f4       	brne	.+8      	; 0x1ba2 <vfprintf+0x7c>
    1b9a:	b6 01       	movw	r22, r12
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	d6 d1       	rcall	.+940    	; 0x1f4c <fputc>
    1ba0:	e8 cf       	rjmp	.-48     	; 0x1b72 <vfprintf+0x4c>
    1ba2:	91 2c       	mov	r9, r1
    1ba4:	21 2c       	mov	r2, r1
    1ba6:	31 2c       	mov	r3, r1
    1ba8:	ff e1       	ldi	r31, 0x1F	; 31
    1baa:	f3 15       	cp	r31, r3
    1bac:	d8 f0       	brcs	.+54     	; 0x1be4 <vfprintf+0xbe>
    1bae:	8b 32       	cpi	r24, 0x2B	; 43
    1bb0:	79 f0       	breq	.+30     	; 0x1bd0 <vfprintf+0xaa>
    1bb2:	38 f4       	brcc	.+14     	; 0x1bc2 <vfprintf+0x9c>
    1bb4:	80 32       	cpi	r24, 0x20	; 32
    1bb6:	79 f0       	breq	.+30     	; 0x1bd6 <vfprintf+0xb0>
    1bb8:	83 32       	cpi	r24, 0x23	; 35
    1bba:	a1 f4       	brne	.+40     	; 0x1be4 <vfprintf+0xbe>
    1bbc:	23 2d       	mov	r18, r3
    1bbe:	20 61       	ori	r18, 0x10	; 16
    1bc0:	1d c0       	rjmp	.+58     	; 0x1bfc <vfprintf+0xd6>
    1bc2:	8d 32       	cpi	r24, 0x2D	; 45
    1bc4:	61 f0       	breq	.+24     	; 0x1bde <vfprintf+0xb8>
    1bc6:	80 33       	cpi	r24, 0x30	; 48
    1bc8:	69 f4       	brne	.+26     	; 0x1be4 <vfprintf+0xbe>
    1bca:	23 2d       	mov	r18, r3
    1bcc:	21 60       	ori	r18, 0x01	; 1
    1bce:	16 c0       	rjmp	.+44     	; 0x1bfc <vfprintf+0xd6>
    1bd0:	83 2d       	mov	r24, r3
    1bd2:	82 60       	ori	r24, 0x02	; 2
    1bd4:	38 2e       	mov	r3, r24
    1bd6:	e3 2d       	mov	r30, r3
    1bd8:	e4 60       	ori	r30, 0x04	; 4
    1bda:	3e 2e       	mov	r3, r30
    1bdc:	2a c0       	rjmp	.+84     	; 0x1c32 <vfprintf+0x10c>
    1bde:	f3 2d       	mov	r31, r3
    1be0:	f8 60       	ori	r31, 0x08	; 8
    1be2:	1d c0       	rjmp	.+58     	; 0x1c1e <vfprintf+0xf8>
    1be4:	37 fc       	sbrc	r3, 7
    1be6:	2d c0       	rjmp	.+90     	; 0x1c42 <vfprintf+0x11c>
    1be8:	20 ed       	ldi	r18, 0xD0	; 208
    1bea:	28 0f       	add	r18, r24
    1bec:	2a 30       	cpi	r18, 0x0A	; 10
    1bee:	40 f0       	brcs	.+16     	; 0x1c00 <vfprintf+0xda>
    1bf0:	8e 32       	cpi	r24, 0x2E	; 46
    1bf2:	b9 f4       	brne	.+46     	; 0x1c22 <vfprintf+0xfc>
    1bf4:	36 fc       	sbrc	r3, 6
    1bf6:	75 c1       	rjmp	.+746    	; 0x1ee2 <vfprintf+0x3bc>
    1bf8:	23 2d       	mov	r18, r3
    1bfa:	20 64       	ori	r18, 0x40	; 64
    1bfc:	32 2e       	mov	r3, r18
    1bfe:	19 c0       	rjmp	.+50     	; 0x1c32 <vfprintf+0x10c>
    1c00:	36 fe       	sbrs	r3, 6
    1c02:	06 c0       	rjmp	.+12     	; 0x1c10 <vfprintf+0xea>
    1c04:	8a e0       	ldi	r24, 0x0A	; 10
    1c06:	98 9e       	mul	r9, r24
    1c08:	20 0d       	add	r18, r0
    1c0a:	11 24       	eor	r1, r1
    1c0c:	92 2e       	mov	r9, r18
    1c0e:	11 c0       	rjmp	.+34     	; 0x1c32 <vfprintf+0x10c>
    1c10:	ea e0       	ldi	r30, 0x0A	; 10
    1c12:	2e 9e       	mul	r2, r30
    1c14:	20 0d       	add	r18, r0
    1c16:	11 24       	eor	r1, r1
    1c18:	22 2e       	mov	r2, r18
    1c1a:	f3 2d       	mov	r31, r3
    1c1c:	f0 62       	ori	r31, 0x20	; 32
    1c1e:	3f 2e       	mov	r3, r31
    1c20:	08 c0       	rjmp	.+16     	; 0x1c32 <vfprintf+0x10c>
    1c22:	8c 36       	cpi	r24, 0x6C	; 108
    1c24:	21 f4       	brne	.+8      	; 0x1c2e <vfprintf+0x108>
    1c26:	83 2d       	mov	r24, r3
    1c28:	80 68       	ori	r24, 0x80	; 128
    1c2a:	38 2e       	mov	r3, r24
    1c2c:	02 c0       	rjmp	.+4      	; 0x1c32 <vfprintf+0x10c>
    1c2e:	88 36       	cpi	r24, 0x68	; 104
    1c30:	41 f4       	brne	.+16     	; 0x1c42 <vfprintf+0x11c>
    1c32:	f7 01       	movw	r30, r14
    1c34:	93 fd       	sbrc	r25, 3
    1c36:	85 91       	lpm	r24, Z+
    1c38:	93 ff       	sbrs	r25, 3
    1c3a:	81 91       	ld	r24, Z+
    1c3c:	7f 01       	movw	r14, r30
    1c3e:	81 11       	cpse	r24, r1
    1c40:	b3 cf       	rjmp	.-154    	; 0x1ba8 <vfprintf+0x82>
    1c42:	98 2f       	mov	r25, r24
    1c44:	9f 7d       	andi	r25, 0xDF	; 223
    1c46:	95 54       	subi	r25, 0x45	; 69
    1c48:	93 30       	cpi	r25, 0x03	; 3
    1c4a:	28 f4       	brcc	.+10     	; 0x1c56 <vfprintf+0x130>
    1c4c:	0c 5f       	subi	r16, 0xFC	; 252
    1c4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c50:	9f e3       	ldi	r25, 0x3F	; 63
    1c52:	99 83       	std	Y+1, r25	; 0x01
    1c54:	0d c0       	rjmp	.+26     	; 0x1c70 <vfprintf+0x14a>
    1c56:	83 36       	cpi	r24, 0x63	; 99
    1c58:	31 f0       	breq	.+12     	; 0x1c66 <vfprintf+0x140>
    1c5a:	83 37       	cpi	r24, 0x73	; 115
    1c5c:	71 f0       	breq	.+28     	; 0x1c7a <vfprintf+0x154>
    1c5e:	83 35       	cpi	r24, 0x53	; 83
    1c60:	09 f0       	breq	.+2      	; 0x1c64 <vfprintf+0x13e>
    1c62:	55 c0       	rjmp	.+170    	; 0x1d0e <vfprintf+0x1e8>
    1c64:	20 c0       	rjmp	.+64     	; 0x1ca6 <vfprintf+0x180>
    1c66:	f8 01       	movw	r30, r16
    1c68:	80 81       	ld	r24, Z
    1c6a:	89 83       	std	Y+1, r24	; 0x01
    1c6c:	0e 5f       	subi	r16, 0xFE	; 254
    1c6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c70:	88 24       	eor	r8, r8
    1c72:	83 94       	inc	r8
    1c74:	91 2c       	mov	r9, r1
    1c76:	53 01       	movw	r10, r6
    1c78:	12 c0       	rjmp	.+36     	; 0x1c9e <vfprintf+0x178>
    1c7a:	28 01       	movw	r4, r16
    1c7c:	f2 e0       	ldi	r31, 0x02	; 2
    1c7e:	4f 0e       	add	r4, r31
    1c80:	51 1c       	adc	r5, r1
    1c82:	f8 01       	movw	r30, r16
    1c84:	a0 80       	ld	r10, Z
    1c86:	b1 80       	ldd	r11, Z+1	; 0x01
    1c88:	36 fe       	sbrs	r3, 6
    1c8a:	03 c0       	rjmp	.+6      	; 0x1c92 <vfprintf+0x16c>
    1c8c:	69 2d       	mov	r22, r9
    1c8e:	70 e0       	ldi	r23, 0x00	; 0
    1c90:	02 c0       	rjmp	.+4      	; 0x1c96 <vfprintf+0x170>
    1c92:	6f ef       	ldi	r22, 0xFF	; 255
    1c94:	7f ef       	ldi	r23, 0xFF	; 255
    1c96:	c5 01       	movw	r24, r10
    1c98:	4e d1       	rcall	.+668    	; 0x1f36 <strnlen>
    1c9a:	4c 01       	movw	r8, r24
    1c9c:	82 01       	movw	r16, r4
    1c9e:	f3 2d       	mov	r31, r3
    1ca0:	ff 77       	andi	r31, 0x7F	; 127
    1ca2:	3f 2e       	mov	r3, r31
    1ca4:	15 c0       	rjmp	.+42     	; 0x1cd0 <vfprintf+0x1aa>
    1ca6:	28 01       	movw	r4, r16
    1ca8:	22 e0       	ldi	r18, 0x02	; 2
    1caa:	42 0e       	add	r4, r18
    1cac:	51 1c       	adc	r5, r1
    1cae:	f8 01       	movw	r30, r16
    1cb0:	a0 80       	ld	r10, Z
    1cb2:	b1 80       	ldd	r11, Z+1	; 0x01
    1cb4:	36 fe       	sbrs	r3, 6
    1cb6:	03 c0       	rjmp	.+6      	; 0x1cbe <vfprintf+0x198>
    1cb8:	69 2d       	mov	r22, r9
    1cba:	70 e0       	ldi	r23, 0x00	; 0
    1cbc:	02 c0       	rjmp	.+4      	; 0x1cc2 <vfprintf+0x19c>
    1cbe:	6f ef       	ldi	r22, 0xFF	; 255
    1cc0:	7f ef       	ldi	r23, 0xFF	; 255
    1cc2:	c5 01       	movw	r24, r10
    1cc4:	2d d1       	rcall	.+602    	; 0x1f20 <strnlen_P>
    1cc6:	4c 01       	movw	r8, r24
    1cc8:	f3 2d       	mov	r31, r3
    1cca:	f0 68       	ori	r31, 0x80	; 128
    1ccc:	3f 2e       	mov	r3, r31
    1cce:	82 01       	movw	r16, r4
    1cd0:	33 fc       	sbrc	r3, 3
    1cd2:	19 c0       	rjmp	.+50     	; 0x1d06 <vfprintf+0x1e0>
    1cd4:	82 2d       	mov	r24, r2
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	88 16       	cp	r8, r24
    1cda:	99 06       	cpc	r9, r25
    1cdc:	a0 f4       	brcc	.+40     	; 0x1d06 <vfprintf+0x1e0>
    1cde:	b6 01       	movw	r22, r12
    1ce0:	80 e2       	ldi	r24, 0x20	; 32
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	33 d1       	rcall	.+614    	; 0x1f4c <fputc>
    1ce6:	2a 94       	dec	r2
    1ce8:	f5 cf       	rjmp	.-22     	; 0x1cd4 <vfprintf+0x1ae>
    1cea:	f5 01       	movw	r30, r10
    1cec:	37 fc       	sbrc	r3, 7
    1cee:	85 91       	lpm	r24, Z+
    1cf0:	37 fe       	sbrs	r3, 7
    1cf2:	81 91       	ld	r24, Z+
    1cf4:	5f 01       	movw	r10, r30
    1cf6:	b6 01       	movw	r22, r12
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	28 d1       	rcall	.+592    	; 0x1f4c <fputc>
    1cfc:	21 10       	cpse	r2, r1
    1cfe:	2a 94       	dec	r2
    1d00:	21 e0       	ldi	r18, 0x01	; 1
    1d02:	82 1a       	sub	r8, r18
    1d04:	91 08       	sbc	r9, r1
    1d06:	81 14       	cp	r8, r1
    1d08:	91 04       	cpc	r9, r1
    1d0a:	79 f7       	brne	.-34     	; 0x1cea <vfprintf+0x1c4>
    1d0c:	e1 c0       	rjmp	.+450    	; 0x1ed0 <vfprintf+0x3aa>
    1d0e:	84 36       	cpi	r24, 0x64	; 100
    1d10:	11 f0       	breq	.+4      	; 0x1d16 <vfprintf+0x1f0>
    1d12:	89 36       	cpi	r24, 0x69	; 105
    1d14:	39 f5       	brne	.+78     	; 0x1d64 <vfprintf+0x23e>
    1d16:	f8 01       	movw	r30, r16
    1d18:	37 fe       	sbrs	r3, 7
    1d1a:	07 c0       	rjmp	.+14     	; 0x1d2a <vfprintf+0x204>
    1d1c:	60 81       	ld	r22, Z
    1d1e:	71 81       	ldd	r23, Z+1	; 0x01
    1d20:	82 81       	ldd	r24, Z+2	; 0x02
    1d22:	93 81       	ldd	r25, Z+3	; 0x03
    1d24:	0c 5f       	subi	r16, 0xFC	; 252
    1d26:	1f 4f       	sbci	r17, 0xFF	; 255
    1d28:	08 c0       	rjmp	.+16     	; 0x1d3a <vfprintf+0x214>
    1d2a:	60 81       	ld	r22, Z
    1d2c:	71 81       	ldd	r23, Z+1	; 0x01
    1d2e:	07 2e       	mov	r0, r23
    1d30:	00 0c       	add	r0, r0
    1d32:	88 0b       	sbc	r24, r24
    1d34:	99 0b       	sbc	r25, r25
    1d36:	0e 5f       	subi	r16, 0xFE	; 254
    1d38:	1f 4f       	sbci	r17, 0xFF	; 255
    1d3a:	f3 2d       	mov	r31, r3
    1d3c:	ff 76       	andi	r31, 0x6F	; 111
    1d3e:	3f 2e       	mov	r3, r31
    1d40:	97 ff       	sbrs	r25, 7
    1d42:	09 c0       	rjmp	.+18     	; 0x1d56 <vfprintf+0x230>
    1d44:	90 95       	com	r25
    1d46:	80 95       	com	r24
    1d48:	70 95       	com	r23
    1d4a:	61 95       	neg	r22
    1d4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d4e:	8f 4f       	sbci	r24, 0xFF	; 255
    1d50:	9f 4f       	sbci	r25, 0xFF	; 255
    1d52:	f0 68       	ori	r31, 0x80	; 128
    1d54:	3f 2e       	mov	r3, r31
    1d56:	2a e0       	ldi	r18, 0x0A	; 10
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	a3 01       	movw	r20, r6
    1d5c:	33 d1       	rcall	.+614    	; 0x1fc4 <__ultoa_invert>
    1d5e:	88 2e       	mov	r8, r24
    1d60:	86 18       	sub	r8, r6
    1d62:	44 c0       	rjmp	.+136    	; 0x1dec <vfprintf+0x2c6>
    1d64:	85 37       	cpi	r24, 0x75	; 117
    1d66:	31 f4       	brne	.+12     	; 0x1d74 <vfprintf+0x24e>
    1d68:	23 2d       	mov	r18, r3
    1d6a:	2f 7e       	andi	r18, 0xEF	; 239
    1d6c:	b2 2e       	mov	r11, r18
    1d6e:	2a e0       	ldi	r18, 0x0A	; 10
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	25 c0       	rjmp	.+74     	; 0x1dbe <vfprintf+0x298>
    1d74:	93 2d       	mov	r25, r3
    1d76:	99 7f       	andi	r25, 0xF9	; 249
    1d78:	b9 2e       	mov	r11, r25
    1d7a:	8f 36       	cpi	r24, 0x6F	; 111
    1d7c:	c1 f0       	breq	.+48     	; 0x1dae <vfprintf+0x288>
    1d7e:	18 f4       	brcc	.+6      	; 0x1d86 <vfprintf+0x260>
    1d80:	88 35       	cpi	r24, 0x58	; 88
    1d82:	79 f0       	breq	.+30     	; 0x1da2 <vfprintf+0x27c>
    1d84:	ae c0       	rjmp	.+348    	; 0x1ee2 <vfprintf+0x3bc>
    1d86:	80 37       	cpi	r24, 0x70	; 112
    1d88:	19 f0       	breq	.+6      	; 0x1d90 <vfprintf+0x26a>
    1d8a:	88 37       	cpi	r24, 0x78	; 120
    1d8c:	21 f0       	breq	.+8      	; 0x1d96 <vfprintf+0x270>
    1d8e:	a9 c0       	rjmp	.+338    	; 0x1ee2 <vfprintf+0x3bc>
    1d90:	e9 2f       	mov	r30, r25
    1d92:	e0 61       	ori	r30, 0x10	; 16
    1d94:	be 2e       	mov	r11, r30
    1d96:	b4 fe       	sbrs	r11, 4
    1d98:	0d c0       	rjmp	.+26     	; 0x1db4 <vfprintf+0x28e>
    1d9a:	fb 2d       	mov	r31, r11
    1d9c:	f4 60       	ori	r31, 0x04	; 4
    1d9e:	bf 2e       	mov	r11, r31
    1da0:	09 c0       	rjmp	.+18     	; 0x1db4 <vfprintf+0x28e>
    1da2:	34 fe       	sbrs	r3, 4
    1da4:	0a c0       	rjmp	.+20     	; 0x1dba <vfprintf+0x294>
    1da6:	29 2f       	mov	r18, r25
    1da8:	26 60       	ori	r18, 0x06	; 6
    1daa:	b2 2e       	mov	r11, r18
    1dac:	06 c0       	rjmp	.+12     	; 0x1dba <vfprintf+0x294>
    1dae:	28 e0       	ldi	r18, 0x08	; 8
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	05 c0       	rjmp	.+10     	; 0x1dbe <vfprintf+0x298>
    1db4:	20 e1       	ldi	r18, 0x10	; 16
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	02 c0       	rjmp	.+4      	; 0x1dbe <vfprintf+0x298>
    1dba:	20 e1       	ldi	r18, 0x10	; 16
    1dbc:	32 e0       	ldi	r19, 0x02	; 2
    1dbe:	f8 01       	movw	r30, r16
    1dc0:	b7 fe       	sbrs	r11, 7
    1dc2:	07 c0       	rjmp	.+14     	; 0x1dd2 <vfprintf+0x2ac>
    1dc4:	60 81       	ld	r22, Z
    1dc6:	71 81       	ldd	r23, Z+1	; 0x01
    1dc8:	82 81       	ldd	r24, Z+2	; 0x02
    1dca:	93 81       	ldd	r25, Z+3	; 0x03
    1dcc:	0c 5f       	subi	r16, 0xFC	; 252
    1dce:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd0:	06 c0       	rjmp	.+12     	; 0x1dde <vfprintf+0x2b8>
    1dd2:	60 81       	ld	r22, Z
    1dd4:	71 81       	ldd	r23, Z+1	; 0x01
    1dd6:	80 e0       	ldi	r24, 0x00	; 0
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	0e 5f       	subi	r16, 0xFE	; 254
    1ddc:	1f 4f       	sbci	r17, 0xFF	; 255
    1dde:	a3 01       	movw	r20, r6
    1de0:	f1 d0       	rcall	.+482    	; 0x1fc4 <__ultoa_invert>
    1de2:	88 2e       	mov	r8, r24
    1de4:	86 18       	sub	r8, r6
    1de6:	fb 2d       	mov	r31, r11
    1de8:	ff 77       	andi	r31, 0x7F	; 127
    1dea:	3f 2e       	mov	r3, r31
    1dec:	36 fe       	sbrs	r3, 6
    1dee:	0d c0       	rjmp	.+26     	; 0x1e0a <vfprintf+0x2e4>
    1df0:	23 2d       	mov	r18, r3
    1df2:	2e 7f       	andi	r18, 0xFE	; 254
    1df4:	a2 2e       	mov	r10, r18
    1df6:	89 14       	cp	r8, r9
    1df8:	58 f4       	brcc	.+22     	; 0x1e10 <vfprintf+0x2ea>
    1dfa:	34 fe       	sbrs	r3, 4
    1dfc:	0b c0       	rjmp	.+22     	; 0x1e14 <vfprintf+0x2ee>
    1dfe:	32 fc       	sbrc	r3, 2
    1e00:	09 c0       	rjmp	.+18     	; 0x1e14 <vfprintf+0x2ee>
    1e02:	83 2d       	mov	r24, r3
    1e04:	8e 7e       	andi	r24, 0xEE	; 238
    1e06:	a8 2e       	mov	r10, r24
    1e08:	05 c0       	rjmp	.+10     	; 0x1e14 <vfprintf+0x2ee>
    1e0a:	b8 2c       	mov	r11, r8
    1e0c:	a3 2c       	mov	r10, r3
    1e0e:	03 c0       	rjmp	.+6      	; 0x1e16 <vfprintf+0x2f0>
    1e10:	b8 2c       	mov	r11, r8
    1e12:	01 c0       	rjmp	.+2      	; 0x1e16 <vfprintf+0x2f0>
    1e14:	b9 2c       	mov	r11, r9
    1e16:	a4 fe       	sbrs	r10, 4
    1e18:	0f c0       	rjmp	.+30     	; 0x1e38 <vfprintf+0x312>
    1e1a:	fe 01       	movw	r30, r28
    1e1c:	e8 0d       	add	r30, r8
    1e1e:	f1 1d       	adc	r31, r1
    1e20:	80 81       	ld	r24, Z
    1e22:	80 33       	cpi	r24, 0x30	; 48
    1e24:	21 f4       	brne	.+8      	; 0x1e2e <vfprintf+0x308>
    1e26:	9a 2d       	mov	r25, r10
    1e28:	99 7e       	andi	r25, 0xE9	; 233
    1e2a:	a9 2e       	mov	r10, r25
    1e2c:	09 c0       	rjmp	.+18     	; 0x1e40 <vfprintf+0x31a>
    1e2e:	a2 fe       	sbrs	r10, 2
    1e30:	06 c0       	rjmp	.+12     	; 0x1e3e <vfprintf+0x318>
    1e32:	b3 94       	inc	r11
    1e34:	b3 94       	inc	r11
    1e36:	04 c0       	rjmp	.+8      	; 0x1e40 <vfprintf+0x31a>
    1e38:	8a 2d       	mov	r24, r10
    1e3a:	86 78       	andi	r24, 0x86	; 134
    1e3c:	09 f0       	breq	.+2      	; 0x1e40 <vfprintf+0x31a>
    1e3e:	b3 94       	inc	r11
    1e40:	a3 fc       	sbrc	r10, 3
    1e42:	10 c0       	rjmp	.+32     	; 0x1e64 <vfprintf+0x33e>
    1e44:	a0 fe       	sbrs	r10, 0
    1e46:	06 c0       	rjmp	.+12     	; 0x1e54 <vfprintf+0x32e>
    1e48:	b2 14       	cp	r11, r2
    1e4a:	80 f4       	brcc	.+32     	; 0x1e6c <vfprintf+0x346>
    1e4c:	28 0c       	add	r2, r8
    1e4e:	92 2c       	mov	r9, r2
    1e50:	9b 18       	sub	r9, r11
    1e52:	0d c0       	rjmp	.+26     	; 0x1e6e <vfprintf+0x348>
    1e54:	b2 14       	cp	r11, r2
    1e56:	58 f4       	brcc	.+22     	; 0x1e6e <vfprintf+0x348>
    1e58:	b6 01       	movw	r22, r12
    1e5a:	80 e2       	ldi	r24, 0x20	; 32
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	76 d0       	rcall	.+236    	; 0x1f4c <fputc>
    1e60:	b3 94       	inc	r11
    1e62:	f8 cf       	rjmp	.-16     	; 0x1e54 <vfprintf+0x32e>
    1e64:	b2 14       	cp	r11, r2
    1e66:	18 f4       	brcc	.+6      	; 0x1e6e <vfprintf+0x348>
    1e68:	2b 18       	sub	r2, r11
    1e6a:	02 c0       	rjmp	.+4      	; 0x1e70 <vfprintf+0x34a>
    1e6c:	98 2c       	mov	r9, r8
    1e6e:	21 2c       	mov	r2, r1
    1e70:	a4 fe       	sbrs	r10, 4
    1e72:	0f c0       	rjmp	.+30     	; 0x1e92 <vfprintf+0x36c>
    1e74:	b6 01       	movw	r22, r12
    1e76:	80 e3       	ldi	r24, 0x30	; 48
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	68 d0       	rcall	.+208    	; 0x1f4c <fputc>
    1e7c:	a2 fe       	sbrs	r10, 2
    1e7e:	16 c0       	rjmp	.+44     	; 0x1eac <vfprintf+0x386>
    1e80:	a1 fc       	sbrc	r10, 1
    1e82:	03 c0       	rjmp	.+6      	; 0x1e8a <vfprintf+0x364>
    1e84:	88 e7       	ldi	r24, 0x78	; 120
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	02 c0       	rjmp	.+4      	; 0x1e8e <vfprintf+0x368>
    1e8a:	88 e5       	ldi	r24, 0x58	; 88
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	b6 01       	movw	r22, r12
    1e90:	0c c0       	rjmp	.+24     	; 0x1eaa <vfprintf+0x384>
    1e92:	8a 2d       	mov	r24, r10
    1e94:	86 78       	andi	r24, 0x86	; 134
    1e96:	51 f0       	breq	.+20     	; 0x1eac <vfprintf+0x386>
    1e98:	a1 fe       	sbrs	r10, 1
    1e9a:	02 c0       	rjmp	.+4      	; 0x1ea0 <vfprintf+0x37a>
    1e9c:	8b e2       	ldi	r24, 0x2B	; 43
    1e9e:	01 c0       	rjmp	.+2      	; 0x1ea2 <vfprintf+0x37c>
    1ea0:	80 e2       	ldi	r24, 0x20	; 32
    1ea2:	a7 fc       	sbrc	r10, 7
    1ea4:	8d e2       	ldi	r24, 0x2D	; 45
    1ea6:	b6 01       	movw	r22, r12
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	50 d0       	rcall	.+160    	; 0x1f4c <fputc>
    1eac:	89 14       	cp	r8, r9
    1eae:	30 f4       	brcc	.+12     	; 0x1ebc <vfprintf+0x396>
    1eb0:	b6 01       	movw	r22, r12
    1eb2:	80 e3       	ldi	r24, 0x30	; 48
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	4a d0       	rcall	.+148    	; 0x1f4c <fputc>
    1eb8:	9a 94       	dec	r9
    1eba:	f8 cf       	rjmp	.-16     	; 0x1eac <vfprintf+0x386>
    1ebc:	8a 94       	dec	r8
    1ebe:	f3 01       	movw	r30, r6
    1ec0:	e8 0d       	add	r30, r8
    1ec2:	f1 1d       	adc	r31, r1
    1ec4:	80 81       	ld	r24, Z
    1ec6:	b6 01       	movw	r22, r12
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	40 d0       	rcall	.+128    	; 0x1f4c <fputc>
    1ecc:	81 10       	cpse	r8, r1
    1ece:	f6 cf       	rjmp	.-20     	; 0x1ebc <vfprintf+0x396>
    1ed0:	22 20       	and	r2, r2
    1ed2:	09 f4       	brne	.+2      	; 0x1ed6 <vfprintf+0x3b0>
    1ed4:	4e ce       	rjmp	.-868    	; 0x1b72 <vfprintf+0x4c>
    1ed6:	b6 01       	movw	r22, r12
    1ed8:	80 e2       	ldi	r24, 0x20	; 32
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	37 d0       	rcall	.+110    	; 0x1f4c <fputc>
    1ede:	2a 94       	dec	r2
    1ee0:	f7 cf       	rjmp	.-18     	; 0x1ed0 <vfprintf+0x3aa>
    1ee2:	f6 01       	movw	r30, r12
    1ee4:	86 81       	ldd	r24, Z+6	; 0x06
    1ee6:	97 81       	ldd	r25, Z+7	; 0x07
    1ee8:	02 c0       	rjmp	.+4      	; 0x1eee <vfprintf+0x3c8>
    1eea:	8f ef       	ldi	r24, 0xFF	; 255
    1eec:	9f ef       	ldi	r25, 0xFF	; 255
    1eee:	2b 96       	adiw	r28, 0x0b	; 11
    1ef0:	0f b6       	in	r0, 0x3f	; 63
    1ef2:	f8 94       	cli
    1ef4:	de bf       	out	0x3e, r29	; 62
    1ef6:	0f be       	out	0x3f, r0	; 63
    1ef8:	cd bf       	out	0x3d, r28	; 61
    1efa:	df 91       	pop	r29
    1efc:	cf 91       	pop	r28
    1efe:	1f 91       	pop	r17
    1f00:	0f 91       	pop	r16
    1f02:	ff 90       	pop	r15
    1f04:	ef 90       	pop	r14
    1f06:	df 90       	pop	r13
    1f08:	cf 90       	pop	r12
    1f0a:	bf 90       	pop	r11
    1f0c:	af 90       	pop	r10
    1f0e:	9f 90       	pop	r9
    1f10:	8f 90       	pop	r8
    1f12:	7f 90       	pop	r7
    1f14:	6f 90       	pop	r6
    1f16:	5f 90       	pop	r5
    1f18:	4f 90       	pop	r4
    1f1a:	3f 90       	pop	r3
    1f1c:	2f 90       	pop	r2
    1f1e:	08 95       	ret

00001f20 <strnlen_P>:
    1f20:	fc 01       	movw	r30, r24
    1f22:	05 90       	lpm	r0, Z+
    1f24:	61 50       	subi	r22, 0x01	; 1
    1f26:	70 40       	sbci	r23, 0x00	; 0
    1f28:	01 10       	cpse	r0, r1
    1f2a:	d8 f7       	brcc	.-10     	; 0x1f22 <strnlen_P+0x2>
    1f2c:	80 95       	com	r24
    1f2e:	90 95       	com	r25
    1f30:	8e 0f       	add	r24, r30
    1f32:	9f 1f       	adc	r25, r31
    1f34:	08 95       	ret

00001f36 <strnlen>:
    1f36:	fc 01       	movw	r30, r24
    1f38:	61 50       	subi	r22, 0x01	; 1
    1f3a:	70 40       	sbci	r23, 0x00	; 0
    1f3c:	01 90       	ld	r0, Z+
    1f3e:	01 10       	cpse	r0, r1
    1f40:	d8 f7       	brcc	.-10     	; 0x1f38 <strnlen+0x2>
    1f42:	80 95       	com	r24
    1f44:	90 95       	com	r25
    1f46:	8e 0f       	add	r24, r30
    1f48:	9f 1f       	adc	r25, r31
    1f4a:	08 95       	ret

00001f4c <fputc>:
    1f4c:	0f 93       	push	r16
    1f4e:	1f 93       	push	r17
    1f50:	cf 93       	push	r28
    1f52:	df 93       	push	r29
    1f54:	fb 01       	movw	r30, r22
    1f56:	23 81       	ldd	r18, Z+3	; 0x03
    1f58:	21 fd       	sbrc	r18, 1
    1f5a:	03 c0       	rjmp	.+6      	; 0x1f62 <fputc+0x16>
    1f5c:	8f ef       	ldi	r24, 0xFF	; 255
    1f5e:	9f ef       	ldi	r25, 0xFF	; 255
    1f60:	2c c0       	rjmp	.+88     	; 0x1fba <fputc+0x6e>
    1f62:	22 ff       	sbrs	r18, 2
    1f64:	16 c0       	rjmp	.+44     	; 0x1f92 <fputc+0x46>
    1f66:	46 81       	ldd	r20, Z+6	; 0x06
    1f68:	57 81       	ldd	r21, Z+7	; 0x07
    1f6a:	24 81       	ldd	r18, Z+4	; 0x04
    1f6c:	35 81       	ldd	r19, Z+5	; 0x05
    1f6e:	42 17       	cp	r20, r18
    1f70:	53 07       	cpc	r21, r19
    1f72:	44 f4       	brge	.+16     	; 0x1f84 <fputc+0x38>
    1f74:	a0 81       	ld	r26, Z
    1f76:	b1 81       	ldd	r27, Z+1	; 0x01
    1f78:	9d 01       	movw	r18, r26
    1f7a:	2f 5f       	subi	r18, 0xFF	; 255
    1f7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f7e:	31 83       	std	Z+1, r19	; 0x01
    1f80:	20 83       	st	Z, r18
    1f82:	8c 93       	st	X, r24
    1f84:	26 81       	ldd	r18, Z+6	; 0x06
    1f86:	37 81       	ldd	r19, Z+7	; 0x07
    1f88:	2f 5f       	subi	r18, 0xFF	; 255
    1f8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f8c:	37 83       	std	Z+7, r19	; 0x07
    1f8e:	26 83       	std	Z+6, r18	; 0x06
    1f90:	14 c0       	rjmp	.+40     	; 0x1fba <fputc+0x6e>
    1f92:	8b 01       	movw	r16, r22
    1f94:	ec 01       	movw	r28, r24
    1f96:	fb 01       	movw	r30, r22
    1f98:	00 84       	ldd	r0, Z+8	; 0x08
    1f9a:	f1 85       	ldd	r31, Z+9	; 0x09
    1f9c:	e0 2d       	mov	r30, r0
    1f9e:	19 95       	eicall
    1fa0:	89 2b       	or	r24, r25
    1fa2:	e1 f6       	brne	.-72     	; 0x1f5c <fputc+0x10>
    1fa4:	d8 01       	movw	r26, r16
    1fa6:	16 96       	adiw	r26, 0x06	; 6
    1fa8:	8d 91       	ld	r24, X+
    1faa:	9c 91       	ld	r25, X
    1fac:	17 97       	sbiw	r26, 0x07	; 7
    1fae:	01 96       	adiw	r24, 0x01	; 1
    1fb0:	17 96       	adiw	r26, 0x07	; 7
    1fb2:	9c 93       	st	X, r25
    1fb4:	8e 93       	st	-X, r24
    1fb6:	16 97       	sbiw	r26, 0x06	; 6
    1fb8:	ce 01       	movw	r24, r28
    1fba:	df 91       	pop	r29
    1fbc:	cf 91       	pop	r28
    1fbe:	1f 91       	pop	r17
    1fc0:	0f 91       	pop	r16
    1fc2:	08 95       	ret

00001fc4 <__ultoa_invert>:
    1fc4:	fa 01       	movw	r30, r20
    1fc6:	aa 27       	eor	r26, r26
    1fc8:	28 30       	cpi	r18, 0x08	; 8
    1fca:	51 f1       	breq	.+84     	; 0x2020 <__ultoa_invert+0x5c>
    1fcc:	20 31       	cpi	r18, 0x10	; 16
    1fce:	81 f1       	breq	.+96     	; 0x2030 <__ultoa_invert+0x6c>
    1fd0:	e8 94       	clt
    1fd2:	6f 93       	push	r22
    1fd4:	6e 7f       	andi	r22, 0xFE	; 254
    1fd6:	6e 5f       	subi	r22, 0xFE	; 254
    1fd8:	7f 4f       	sbci	r23, 0xFF	; 255
    1fda:	8f 4f       	sbci	r24, 0xFF	; 255
    1fdc:	9f 4f       	sbci	r25, 0xFF	; 255
    1fde:	af 4f       	sbci	r26, 0xFF	; 255
    1fe0:	b1 e0       	ldi	r27, 0x01	; 1
    1fe2:	3e d0       	rcall	.+124    	; 0x2060 <__ultoa_invert+0x9c>
    1fe4:	b4 e0       	ldi	r27, 0x04	; 4
    1fe6:	3c d0       	rcall	.+120    	; 0x2060 <__ultoa_invert+0x9c>
    1fe8:	67 0f       	add	r22, r23
    1fea:	78 1f       	adc	r23, r24
    1fec:	89 1f       	adc	r24, r25
    1fee:	9a 1f       	adc	r25, r26
    1ff0:	a1 1d       	adc	r26, r1
    1ff2:	68 0f       	add	r22, r24
    1ff4:	79 1f       	adc	r23, r25
    1ff6:	8a 1f       	adc	r24, r26
    1ff8:	91 1d       	adc	r25, r1
    1ffa:	a1 1d       	adc	r26, r1
    1ffc:	6a 0f       	add	r22, r26
    1ffe:	71 1d       	adc	r23, r1
    2000:	81 1d       	adc	r24, r1
    2002:	91 1d       	adc	r25, r1
    2004:	a1 1d       	adc	r26, r1
    2006:	20 d0       	rcall	.+64     	; 0x2048 <__ultoa_invert+0x84>
    2008:	09 f4       	brne	.+2      	; 0x200c <__ultoa_invert+0x48>
    200a:	68 94       	set
    200c:	3f 91       	pop	r19
    200e:	2a e0       	ldi	r18, 0x0A	; 10
    2010:	26 9f       	mul	r18, r22
    2012:	11 24       	eor	r1, r1
    2014:	30 19       	sub	r19, r0
    2016:	30 5d       	subi	r19, 0xD0	; 208
    2018:	31 93       	st	Z+, r19
    201a:	de f6       	brtc	.-74     	; 0x1fd2 <__ultoa_invert+0xe>
    201c:	cf 01       	movw	r24, r30
    201e:	08 95       	ret
    2020:	46 2f       	mov	r20, r22
    2022:	47 70       	andi	r20, 0x07	; 7
    2024:	40 5d       	subi	r20, 0xD0	; 208
    2026:	41 93       	st	Z+, r20
    2028:	b3 e0       	ldi	r27, 0x03	; 3
    202a:	0f d0       	rcall	.+30     	; 0x204a <__ultoa_invert+0x86>
    202c:	c9 f7       	brne	.-14     	; 0x2020 <__ultoa_invert+0x5c>
    202e:	f6 cf       	rjmp	.-20     	; 0x201c <__ultoa_invert+0x58>
    2030:	46 2f       	mov	r20, r22
    2032:	4f 70       	andi	r20, 0x0F	; 15
    2034:	40 5d       	subi	r20, 0xD0	; 208
    2036:	4a 33       	cpi	r20, 0x3A	; 58
    2038:	18 f0       	brcs	.+6      	; 0x2040 <__ultoa_invert+0x7c>
    203a:	49 5d       	subi	r20, 0xD9	; 217
    203c:	31 fd       	sbrc	r19, 1
    203e:	40 52       	subi	r20, 0x20	; 32
    2040:	41 93       	st	Z+, r20
    2042:	02 d0       	rcall	.+4      	; 0x2048 <__ultoa_invert+0x84>
    2044:	a9 f7       	brne	.-22     	; 0x2030 <__ultoa_invert+0x6c>
    2046:	ea cf       	rjmp	.-44     	; 0x201c <__ultoa_invert+0x58>
    2048:	b4 e0       	ldi	r27, 0x04	; 4
    204a:	a6 95       	lsr	r26
    204c:	97 95       	ror	r25
    204e:	87 95       	ror	r24
    2050:	77 95       	ror	r23
    2052:	67 95       	ror	r22
    2054:	ba 95       	dec	r27
    2056:	c9 f7       	brne	.-14     	; 0x204a <__ultoa_invert+0x86>
    2058:	00 97       	sbiw	r24, 0x00	; 0
    205a:	61 05       	cpc	r22, r1
    205c:	71 05       	cpc	r23, r1
    205e:	08 95       	ret
    2060:	9b 01       	movw	r18, r22
    2062:	ac 01       	movw	r20, r24
    2064:	0a 2e       	mov	r0, r26
    2066:	06 94       	lsr	r0
    2068:	57 95       	ror	r21
    206a:	47 95       	ror	r20
    206c:	37 95       	ror	r19
    206e:	27 95       	ror	r18
    2070:	ba 95       	dec	r27
    2072:	c9 f7       	brne	.-14     	; 0x2066 <__ultoa_invert+0xa2>
    2074:	62 0f       	add	r22, r18
    2076:	73 1f       	adc	r23, r19
    2078:	84 1f       	adc	r24, r20
    207a:	95 1f       	adc	r25, r21
    207c:	a0 1d       	adc	r26, r0
    207e:	08 95       	ret

00002080 <__divmodsi4>:
    2080:	05 2e       	mov	r0, r21
    2082:	97 fb       	bst	r25, 7
    2084:	16 f4       	brtc	.+4      	; 0x208a <__divmodsi4+0xa>
    2086:	00 94       	com	r0
    2088:	0f d0       	rcall	.+30     	; 0x20a8 <__negsi2>
    208a:	57 fd       	sbrc	r21, 7
    208c:	05 d0       	rcall	.+10     	; 0x2098 <__divmodsi4_neg2>
    208e:	92 dc       	rcall	.-1756   	; 0x19b4 <__udivmodsi4>
    2090:	07 fc       	sbrc	r0, 7
    2092:	02 d0       	rcall	.+4      	; 0x2098 <__divmodsi4_neg2>
    2094:	46 f4       	brtc	.+16     	; 0x20a6 <__divmodsi4_exit>
    2096:	08 c0       	rjmp	.+16     	; 0x20a8 <__negsi2>

00002098 <__divmodsi4_neg2>:
    2098:	50 95       	com	r21
    209a:	40 95       	com	r20
    209c:	30 95       	com	r19
    209e:	21 95       	neg	r18
    20a0:	3f 4f       	sbci	r19, 0xFF	; 255
    20a2:	4f 4f       	sbci	r20, 0xFF	; 255
    20a4:	5f 4f       	sbci	r21, 0xFF	; 255

000020a6 <__divmodsi4_exit>:
    20a6:	08 95       	ret

000020a8 <__negsi2>:
    20a8:	90 95       	com	r25
    20aa:	80 95       	com	r24
    20ac:	70 95       	com	r23
    20ae:	61 95       	neg	r22
    20b0:	7f 4f       	sbci	r23, 0xFF	; 255
    20b2:	8f 4f       	sbci	r24, 0xFF	; 255
    20b4:	9f 4f       	sbci	r25, 0xFF	; 255
    20b6:	08 95       	ret

000020b8 <__muluhisi3>:
    20b8:	0f d0       	rcall	.+30     	; 0x20d8 <__umulhisi3>
    20ba:	a5 9f       	mul	r26, r21
    20bc:	90 0d       	add	r25, r0
    20be:	b4 9f       	mul	r27, r20
    20c0:	90 0d       	add	r25, r0
    20c2:	a4 9f       	mul	r26, r20
    20c4:	80 0d       	add	r24, r0
    20c6:	91 1d       	adc	r25, r1
    20c8:	11 24       	eor	r1, r1
    20ca:	08 95       	ret

000020cc <__mulshisi3>:
    20cc:	b7 ff       	sbrs	r27, 7
    20ce:	f4 cf       	rjmp	.-24     	; 0x20b8 <__muluhisi3>

000020d0 <__mulohisi3>:
    20d0:	f3 df       	rcall	.-26     	; 0x20b8 <__muluhisi3>
    20d2:	82 1b       	sub	r24, r18
    20d4:	93 0b       	sbc	r25, r19
    20d6:	08 95       	ret

000020d8 <__umulhisi3>:
    20d8:	a2 9f       	mul	r26, r18
    20da:	b0 01       	movw	r22, r0
    20dc:	b3 9f       	mul	r27, r19
    20de:	c0 01       	movw	r24, r0
    20e0:	a3 9f       	mul	r26, r19
    20e2:	70 0d       	add	r23, r0
    20e4:	81 1d       	adc	r24, r1
    20e6:	11 24       	eor	r1, r1
    20e8:	91 1d       	adc	r25, r1
    20ea:	b2 9f       	mul	r27, r18
    20ec:	70 0d       	add	r23, r0
    20ee:	81 1d       	adc	r24, r1
    20f0:	11 24       	eor	r1, r1
    20f2:	91 1d       	adc	r25, r1
    20f4:	08 95       	ret

000020f6 <_exit>:
    20f6:	f8 94       	cli

000020f8 <__stop_program>:
    20f8:	ff cf       	rjmp	.-2      	; 0x20f8 <__stop_program>
