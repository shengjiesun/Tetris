
ST7796_TFT_Development.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000058  00800200  0000129a  0000132e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000129a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006b  00800258  00800258  00001386  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001386  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000013e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000290  00000000  00000000  00001424  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003f7f  00000000  00000000  000016b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000017d5  00000000  00000000  00005633  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018db  00000000  00000000  00006e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000095c  00000000  00000000  000086e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000eed  00000000  00000000  00009040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002d15  00000000  00000000  00009f2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  0000cc42  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	83 c0       	rjmp	.+262    	; 0x164 <__vector_23>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	b2 c5       	rjmp	.+2916   	; 0xbca <__vector_25>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ea e9       	ldi	r30, 0x9A	; 154
      fc:	f2 e1       	ldi	r31, 0x12	; 18
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 35       	cpi	r26, 0x58	; 88
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2
     110:	a8 e5       	ldi	r26, 0x58	; 88
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a3 3c       	cpi	r26, 0xC3	; 195
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	bd d3       	rcall	.+1914   	; 0x89a <main>
     120:	0c 94 4b 09 	jmp	0x1296	; 0x1296 <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <timer0_init>:
	bit 2 = 0
	
	WGM01 = 0     "Normal" timer/counter mode
	WGM00 = 0
	*/
	TCCR0A = 0b00000000;
     126:	14 bc       	out	0x24, r1	; 36
	
	CS02 = 0
	CS01 = 1      clock / 64 = 250kHz -> /256 -> 1024us per overflow
	CS00 = 1
	*/
	TCCR0B = 0b00000011;
     128:	83 e0       	ldi	r24, 0x03	; 3
     12a:	85 bd       	out	0x25, r24	; 37
	bit 3 = 0
	OCIE0B = 0    don't enable Timer/Counter 0 Output Compare Match B Interrupt
	OCIE0A = 0    don't enable Timer/Counter 0 Output Compare Match A Interrupt Enable
	TOIE0 = 1     enable Timer/Counter 0 Overflow Interrupt
	*/
	TIMSK0 = 0b00000001;
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
	TCNT0 = 0;
     132:	16 bc       	out	0x26, r1	; 38
     134:	08 95       	ret

00000136 <Backlight_Init>:
	
}

void Backlight_Init(void)
{
  timer0_init();
     136:	f7 cf       	rjmp	.-18     	; 0x126 <timer0_init>
     138:	08 95       	ret

0000013a <SetBackLightDuty>:
}

void SetBackLightDuty(uint8_t dutyCycle)
{
  DDRB |= (1<<PB7);  //set pin as output
     13a:	27 9a       	sbi	0x04, 7	; 4
  TCCR0A |= (1<<COM0A1); //enable output compare on PD6, clear OC0A on compare, set OC0A at BOTTOM
     13c:	94 b5       	in	r25, 0x24	; 36
     13e:	90 68       	ori	r25, 0x80	; 128
     140:	94 bd       	out	0x24, r25	; 36
  TCCR0A |= (1<<WGM01) | (1<<WGM00); //Fast PWM mode
     142:	94 b5       	in	r25, 0x24	; 36
     144:	93 60       	ori	r25, 0x03	; 3
     146:	94 bd       	out	0x24, r25	; 36
  
  if (dutyCycle > 100) OCR0A = 0xff;    //upper 8bit PWM boundary
     148:	85 36       	cpi	r24, 0x65	; 101
     14a:	18 f0       	brcs	.+6      	; 0x152 <SetBackLightDuty+0x18>
     14c:	8f ef       	ldi	r24, 0xFF	; 255
     14e:	87 bd       	out	0x27, r24	; 39
     150:	08 95       	ret
  else if(dutyCycle < 0) OCR0A = 0x00;  //lower PWM boundary
  else if ((dutyCycle <= 100) && (dutyCycle >= 0)) OCR0A = dutyCycle * 255 / 100; //duty cycle percentage converted to 8 bit
     152:	2f ef       	ldi	r18, 0xFF	; 255
     154:	82 9f       	mul	r24, r18
     156:	c0 01       	movw	r24, r0
     158:	11 24       	eor	r1, r1
     15a:	64 e6       	ldi	r22, 0x64	; 100
     15c:	70 e0       	ldi	r23, 0x00	; 0
     15e:	77 d5       	rcall	.+2798   	; 0xc4e <__divmodhi4>
     160:	67 bd       	out	0x27, r22	; 39
     162:	08 95       	ret

00000164 <__vector_23>:

/************************************************************************/
/* Private function definitions                                         */
/************************************************************************/
ISR (TIMER0_OVF_vect)
{
     164:	1f 92       	push	r1
     166:	0f 92       	push	r0
     168:	0f b6       	in	r0, 0x3f	; 63
     16a:	0f 92       	push	r0
     16c:	11 24       	eor	r1, r1
     16e:	2f 93       	push	r18
     170:	3f 93       	push	r19
     172:	8f 93       	push	r24
     174:	9f 93       	push	r25
     176:	af 93       	push	r26
     178:	bf 93       	push	r27
  unsigned long m = milli_second;
     17a:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <milli_second>
     17e:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <milli_second+0x1>
     182:	a0 91 64 02 	lds	r26, 0x0264	; 0x800264 <milli_second+0x2>
     186:	b0 91 65 02 	lds	r27, 0x0265	; 0x800265 <milli_second+0x3>
  unsigned char f = milli_fraction;
     18a:	30 91 61 02 	lds	r19, 0x0261	; 0x800261 <milli_fraction>
  m += MILLIS_INC;
  f += FRACT_INC;
     18e:	23 e0       	ldi	r18, 0x03	; 3
     190:	23 0f       	add	r18, r19
  if (f >= FRACT_MAX) {
     192:	2d 37       	cpi	r18, 0x7D	; 125
     194:	20 f4       	brcc	.+8      	; 0x19e <__vector_23+0x3a>
/************************************************************************/
ISR (TIMER0_OVF_vect)
{
  unsigned long m = milli_second;
  unsigned char f = milli_fraction;
  m += MILLIS_INC;
     196:	01 96       	adiw	r24, 0x01	; 1
     198:	a1 1d       	adc	r26, r1
     19a:	b1 1d       	adc	r27, r1
     19c:	05 c0       	rjmp	.+10     	; 0x1a8 <__vector_23+0x44>
  f += FRACT_INC;
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
     19e:	26 e8       	ldi	r18, 0x86	; 134
     1a0:	23 0f       	add	r18, r19
    m +=1;
     1a2:	02 96       	adiw	r24, 0x02	; 2
     1a4:	a1 1d       	adc	r26, r1
     1a6:	b1 1d       	adc	r27, r1
  }
  milli_second = m;
     1a8:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <milli_second>
     1ac:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <milli_second+0x1>
     1b0:	a0 93 64 02 	sts	0x0264, r26	; 0x800264 <milli_second+0x2>
     1b4:	b0 93 65 02 	sts	0x0265, r27	; 0x800265 <milli_second+0x3>
  milli_fraction = f;
     1b8:	20 93 61 02 	sts	0x0261, r18	; 0x800261 <milli_fraction>
  timer0_counts++;
     1bc:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <timer0_counts>
     1c0:	90 91 5e 02 	lds	r25, 0x025E	; 0x80025e <timer0_counts+0x1>
     1c4:	a0 91 5f 02 	lds	r26, 0x025F	; 0x80025f <timer0_counts+0x2>
     1c8:	b0 91 60 02 	lds	r27, 0x0260	; 0x800260 <timer0_counts+0x3>
     1cc:	01 96       	adiw	r24, 0x01	; 1
     1ce:	a1 1d       	adc	r26, r1
     1d0:	b1 1d       	adc	r27, r1
     1d2:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <timer0_counts>
     1d6:	90 93 5e 02 	sts	0x025E, r25	; 0x80025e <timer0_counts+0x1>
     1da:	a0 93 5f 02 	sts	0x025F, r26	; 0x80025f <timer0_counts+0x2>
     1de:	b0 93 60 02 	sts	0x0260, r27	; 0x800260 <timer0_counts+0x3>
     1e2:	bf 91       	pop	r27
     1e4:	af 91       	pop	r26
     1e6:	9f 91       	pop	r25
     1e8:	8f 91       	pop	r24
     1ea:	3f 91       	pop	r19
     1ec:	2f 91       	pop	r18
     1ee:	0f 90       	pop	r0
     1f0:	0f be       	out	0x3f, r0	; 63
     1f2:	0f 90       	pop	r0
     1f4:	1f 90       	pop	r1
     1f6:	18 95       	reti

000001f8 <DS1307_ClockEnable>:
}

char* DS1307_GetDayString(tmElements_t* tm)
{
  return dayOfWeekString[tm->Day];
}
     1f8:	cf 93       	push	r28
     1fa:	80 ed       	ldi	r24, 0xD0	; 208
     1fc:	4a d4       	rcall	.+2196   	; 0xa92 <TWIStart>
     1fe:	80 e0       	ldi	r24, 0x00	; 0
     200:	78 d4       	rcall	.+2288   	; 0xaf2 <TWIWrite>
     202:	81 ed       	ldi	r24, 0xD1	; 209
     204:	46 d4       	rcall	.+2188   	; 0xa92 <TWIStart>
     206:	92 d4       	rcall	.+2340   	; 0xb2c <TWIReadNACK>
     208:	c8 2f       	mov	r28, r24
     20a:	6a d4       	rcall	.+2260   	; 0xae0 <TWIStop>
     20c:	80 ed       	ldi	r24, 0xD0	; 208
     20e:	41 d4       	rcall	.+2178   	; 0xa92 <TWIStart>
     210:	80 e0       	ldi	r24, 0x00	; 0
     212:	6f d4       	rcall	.+2270   	; 0xaf2 <TWIWrite>
     214:	8c 2f       	mov	r24, r28
     216:	8f 77       	andi	r24, 0x7F	; 127
     218:	6c d4       	rcall	.+2264   	; 0xaf2 <TWIWrite>
     21a:	62 d4       	rcall	.+2244   	; 0xae0 <TWIStop>
     21c:	cf 91       	pop	r28
     21e:	08 95       	ret

00000220 <DS1307_Init>:
     220:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <__data_end>
     224:	81 11       	cpse	r24, r1
     226:	05 c0       	rjmp	.+10     	; 0x232 <DS1307_Init+0x12>
     228:	24 d4       	rcall	.+2120   	; 0xa72 <TWI_init>
     22a:	e6 df       	rcall	.-52     	; 0x1f8 <DS1307_ClockEnable>
     22c:	81 e0       	ldi	r24, 0x01	; 1
     22e:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <__data_end>
     232:	08 95       	ret

00000234 <DS1307_readDate>:

void DS1307_readDate(tmElements_t* date)
{
     234:	cf 93       	push	r28
     236:	df 93       	push	r29
     238:	ec 01       	movw	r28, r24
  uint8_t sec;
  TWIStart(DS1307_Write);
     23a:	80 ed       	ldi	r24, 0xD0	; 208
     23c:	2a d4       	rcall	.+2132   	; 0xa92 <TWIStart>
  TWIWrite(DS1307_SECONDS);
     23e:	80 e0       	ldi	r24, 0x00	; 0
     240:	58 d4       	rcall	.+2224   	; 0xaf2 <TWIWrite>

  TWIStart(DS1307_Read);
     242:	81 ed       	ldi	r24, 0xD1	; 209
     244:	26 d4       	rcall	.+2124   	; 0xa92 <TWIStart>
  sec = TWIReadACK();
     246:	67 d4       	rcall	.+2254   	; 0xb16 <TWIReadACK>
     248:	98 2f       	mov	r25, r24
  date->Second = bcd2dec(sec & 0b01111111);
     24a:	96 95       	lsr	r25
     24c:	96 95       	lsr	r25
     24e:	96 95       	lsr	r25
     250:	9e 70       	andi	r25, 0x0E	; 14
     252:	29 2f       	mov	r18, r25
     254:	22 0f       	add	r18, r18
     256:	22 0f       	add	r18, r18
     258:	92 0f       	add	r25, r18
     25a:	8f 70       	andi	r24, 0x0F	; 15
     25c:	89 0f       	add	r24, r25
     25e:	88 83       	st	Y, r24
  date->Minute = bcd2dec(TWIReadACK());
     260:	5a d4       	rcall	.+2228   	; 0xb16 <TWIReadACK>
     262:	98 2f       	mov	r25, r24
     264:	92 95       	swap	r25
     266:	9f 70       	andi	r25, 0x0F	; 15
     268:	99 0f       	add	r25, r25
     26a:	29 2f       	mov	r18, r25
     26c:	22 0f       	add	r18, r18
     26e:	22 0f       	add	r18, r18
     270:	92 0f       	add	r25, r18
     272:	8f 70       	andi	r24, 0x0F	; 15
     274:	89 0f       	add	r24, r25
     276:	89 83       	std	Y+1, r24	; 0x01
  date->Hour   = bcd2dec(TWIReadACK() & 0x3f);
     278:	4e d4       	rcall	.+2204   	; 0xb16 <TWIReadACK>
     27a:	98 2f       	mov	r25, r24
     27c:	96 95       	lsr	r25
     27e:	96 95       	lsr	r25
     280:	96 95       	lsr	r25
     282:	96 70       	andi	r25, 0x06	; 6
     284:	29 2f       	mov	r18, r25
     286:	22 0f       	add	r18, r18
     288:	22 0f       	add	r18, r18
     28a:	92 0f       	add	r25, r18
     28c:	8f 70       	andi	r24, 0x0F	; 15
     28e:	89 0f       	add	r24, r25
     290:	8a 83       	std	Y+2, r24	; 0x02
  date->Day    = bcd2dec(TWIReadACK());
     292:	41 d4       	rcall	.+2178   	; 0xb16 <TWIReadACK>
     294:	98 2f       	mov	r25, r24
     296:	92 95       	swap	r25
     298:	9f 70       	andi	r25, 0x0F	; 15
     29a:	99 0f       	add	r25, r25
     29c:	29 2f       	mov	r18, r25
     29e:	22 0f       	add	r18, r18
     2a0:	22 0f       	add	r18, r18
     2a2:	92 0f       	add	r25, r18
     2a4:	8f 70       	andi	r24, 0x0F	; 15
     2a6:	89 0f       	add	r24, r25
     2a8:	8b 83       	std	Y+3, r24	; 0x03
  date->Date   = bcd2dec(TWIReadACK());
     2aa:	35 d4       	rcall	.+2154   	; 0xb16 <TWIReadACK>
     2ac:	98 2f       	mov	r25, r24
     2ae:	92 95       	swap	r25
     2b0:	9f 70       	andi	r25, 0x0F	; 15
     2b2:	99 0f       	add	r25, r25
     2b4:	29 2f       	mov	r18, r25
     2b6:	22 0f       	add	r18, r18
     2b8:	22 0f       	add	r18, r18
     2ba:	92 0f       	add	r25, r18
     2bc:	8f 70       	andi	r24, 0x0F	; 15
     2be:	89 0f       	add	r24, r25
     2c0:	8c 83       	std	Y+4, r24	; 0x04
  date->Month  = bcd2dec(TWIReadACK());
     2c2:	29 d4       	rcall	.+2130   	; 0xb16 <TWIReadACK>
     2c4:	98 2f       	mov	r25, r24
     2c6:	92 95       	swap	r25
     2c8:	9f 70       	andi	r25, 0x0F	; 15
     2ca:	99 0f       	add	r25, r25
     2cc:	29 2f       	mov	r18, r25
     2ce:	22 0f       	add	r18, r18
     2d0:	22 0f       	add	r18, r18
     2d2:	92 0f       	add	r25, r18
     2d4:	8f 70       	andi	r24, 0x0F	; 15
     2d6:	89 0f       	add	r24, r25
     2d8:	8d 83       	std	Y+5, r24	; 0x05
  date->Year   = (bcd2dec(TWIReadNACK()));
     2da:	28 d4       	rcall	.+2128   	; 0xb2c <TWIReadNACK>
     2dc:	98 2f       	mov	r25, r24
     2de:	92 95       	swap	r25
     2e0:	9f 70       	andi	r25, 0x0F	; 15
     2e2:	99 0f       	add	r25, r25
     2e4:	29 2f       	mov	r18, r25
     2e6:	22 0f       	add	r18, r18
     2e8:	22 0f       	add	r18, r18
     2ea:	92 0f       	add	r25, r18
     2ec:	8f 70       	andi	r24, 0x0F	; 15
     2ee:	89 0f       	add	r24, r25
     2f0:	8e 83       	std	Y+6, r24	; 0x06
  TWIStop();
     2f2:	f6 d3       	rcall	.+2028   	; 0xae0 <TWIStop>
     2f4:	df 91       	pop	r29
}
     2f6:	cf 91       	pop	r28
     2f8:	08 95       	ret

000002fa <LCD_WR_DATA>:
  LCD_CS_SET;
}

static void LCD_WR_DATA(uint8_t data)
{
  LCD_CS_CLR;
     2fa:	28 98       	cbi	0x05, 0	; 5
  LCD_RS_SET;
     2fc:	75 9a       	sbi	0x0e, 5	; 14
  SPI_Master_transmit(data);
     2fe:	6c d3       	rcall	.+1752   	; 0x9d8 <SPI_Master_transmit>
  LCD_CS_SET;
     300:	28 9a       	sbi	0x05, 0	; 5
     302:	08 95       	ret

00000304 <LCD_WR_REG>:
/************************************************************************/
/* Private function definitions                                         */
/************************************************************************/
static void LCD_WR_REG(uint8_t data)
{
  LCD_CS_CLR;
     304:	28 98       	cbi	0x05, 0	; 5
  LCD_RS_CLR;
     306:	75 98       	cbi	0x0e, 5	; 14
  SPI_Master_transmit(data);
     308:	67 d3       	rcall	.+1742   	; 0x9d8 <SPI_Master_transmit>
  LCD_CS_SET;
     30a:	28 9a       	sbi	0x05, 0	; 5
     30c:	08 95       	ret

0000030e <LCD_RESET>:
  LCD_CS_SET;
}

void LCD_RESET(void)
{
  LCD_RST_CLR;
     30e:	74 98       	cbi	0x0e, 4	; 14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     310:	2f ef       	ldi	r18, 0xFF	; 255
     312:	81 ee       	ldi	r24, 0xE1	; 225
     314:	94 e0       	ldi	r25, 0x04	; 4
     316:	21 50       	subi	r18, 0x01	; 1
     318:	80 40       	sbci	r24, 0x00	; 0
     31a:	90 40       	sbci	r25, 0x00	; 0
     31c:	e1 f7       	brne	.-8      	; 0x316 <LCD_RESET+0x8>
     31e:	00 c0       	rjmp	.+0      	; 0x320 <LCD_RESET+0x12>
     320:	00 00       	nop
  _delay_ms(100);
  LCD_RST_SET;
     322:	74 9a       	sbi	0x0e, 4	; 14
     324:	2f ef       	ldi	r18, 0xFF	; 255
     326:	80 e7       	ldi	r24, 0x70	; 112
     328:	92 e0       	ldi	r25, 0x02	; 2
     32a:	21 50       	subi	r18, 0x01	; 1
     32c:	80 40       	sbci	r24, 0x00	; 0
     32e:	90 40       	sbci	r25, 0x00	; 0
     330:	e1 f7       	brne	.-8      	; 0x32a <LCD_RESET+0x1c>
     332:	00 c0       	rjmp	.+0      	; 0x334 <LCD_RESET+0x26>
     334:	00 00       	nop
     336:	08 95       	ret

00000338 <LCD_SetWindows>:
  _delay_ms(50);
}

void LCD_SetWindows(uint16_t xStar, uint16_t yStar, uint16_t xEnd, uint16_t yEnd)
{
     338:	af 92       	push	r10
     33a:	bf 92       	push	r11
     33c:	cf 92       	push	r12
     33e:	df 92       	push	r13
     340:	ef 92       	push	r14
     342:	ff 92       	push	r15
     344:	0f 93       	push	r16
     346:	1f 93       	push	r17
     348:	cf 93       	push	r28
     34a:	df 93       	push	r29
     34c:	b8 2e       	mov	r11, r24
     34e:	a9 2e       	mov	r10, r25
     350:	f6 2e       	mov	r15, r22
     352:	e7 2e       	mov	r14, r23
     354:	d4 2e       	mov	r13, r20
     356:	c5 2e       	mov	r12, r21
     358:	12 2f       	mov	r17, r18
     35a:	03 2f       	mov	r16, r19
  LCD_WR_REG(lcddev.setxcmd);
     35c:	c6 e6       	ldi	r28, 0x66	; 102
     35e:	d2 e0       	ldi	r29, 0x02	; 2
     360:	89 85       	ldd	r24, Y+9	; 0x09
     362:	d0 df       	rcall	.-96     	; 0x304 <LCD_WR_REG>
  LCD_WR_DATA(xStar >> 8);
     364:	8a 2d       	mov	r24, r10
     366:	c9 df       	rcall	.-110    	; 0x2fa <LCD_WR_DATA>
  LCD_WR_DATA(0x00FF & xStar);
     368:	8b 2d       	mov	r24, r11
     36a:	c7 df       	rcall	.-114    	; 0x2fa <LCD_WR_DATA>
  LCD_WR_DATA(xEnd >> 8);
     36c:	8c 2d       	mov	r24, r12
     36e:	c5 df       	rcall	.-118    	; 0x2fa <LCD_WR_DATA>
  LCD_WR_DATA(0x00FF & xEnd);
     370:	8d 2d       	mov	r24, r13
     372:	c3 df       	rcall	.-122    	; 0x2fa <LCD_WR_DATA>

  LCD_WR_REG(lcddev.setycmd);
     374:	8b 85       	ldd	r24, Y+11	; 0x0b
     376:	c6 df       	rcall	.-116    	; 0x304 <LCD_WR_REG>
  LCD_WR_DATA(yStar >> 8);
     378:	8e 2d       	mov	r24, r14
     37a:	bf df       	rcall	.-130    	; 0x2fa <LCD_WR_DATA>
  LCD_WR_DATA(0x00FF & yStar);
     37c:	8f 2d       	mov	r24, r15
     37e:	bd df       	rcall	.-134    	; 0x2fa <LCD_WR_DATA>
  LCD_WR_DATA(yEnd >> 8);
     380:	80 2f       	mov	r24, r16
     382:	bb df       	rcall	.-138    	; 0x2fa <LCD_WR_DATA>
     384:	81 2f       	mov	r24, r17
  LCD_WR_DATA(0x00FF & yEnd);
     386:	b9 df       	rcall	.-142    	; 0x2fa <LCD_WR_DATA>
     388:	8f 81       	ldd	r24, Y+7	; 0x07
     38a:	bc df       	rcall	.-136    	; 0x304 <LCD_WR_REG>
  LCD_WR_DATA(LCD_RegValue);
}

static void LCD_WriteRAM_Prepare(void)
{
  LCD_WR_REG(lcddev.wramcmd);
     38c:	df 91       	pop	r29
     38e:	cf 91       	pop	r28
     390:	1f 91       	pop	r17
  LCD_WR_DATA(0x00FF & yStar);
  LCD_WR_DATA(yEnd >> 8);
  LCD_WR_DATA(0x00FF & yEnd);

  LCD_WriteRAM_Prepare();
}
     392:	0f 91       	pop	r16
     394:	ff 90       	pop	r15
     396:	ef 90       	pop	r14
     398:	df 90       	pop	r13
     39a:	cf 90       	pop	r12
     39c:	bf 90       	pop	r11
     39e:	af 90       	pop	r10
     3a0:	08 95       	ret

000003a2 <LCD_SetCursor>:
     3a2:	9b 01       	movw	r18, r22
     3a4:	ac 01       	movw	r20, r24
     3a6:	c8 cf       	rjmp	.-112    	; 0x338 <LCD_SetWindows>

void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
  LCD_SetWindows(Xpos,Ypos,Xpos,Ypos);
     3a8:	08 95       	ret

000003aa <LCD_direction>:
}

void LCD_direction(LCD_Rotation_t direction)
{
  lcddev.setxcmd=0x2A;
     3aa:	e6 e6       	ldi	r30, 0x66	; 102
     3ac:	f2 e0       	ldi	r31, 0x02	; 2
     3ae:	2a e2       	ldi	r18, 0x2A	; 42
     3b0:	30 e0       	ldi	r19, 0x00	; 0
     3b2:	32 87       	std	Z+10, r19	; 0x0a
     3b4:	21 87       	std	Z+9, r18	; 0x09
  lcddev.setycmd=0x2B;
     3b6:	2b e2       	ldi	r18, 0x2B	; 43
     3b8:	30 e0       	ldi	r19, 0x00	; 0
     3ba:	34 87       	std	Z+12, r19	; 0x0c
     3bc:	23 87       	std	Z+11, r18	; 0x0b
  lcddev.wramcmd=0x2C;
     3be:	2c e2       	ldi	r18, 0x2C	; 44
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	30 87       	std	Z+8, r19	; 0x08
     3c4:	27 83       	std	Z+7, r18	; 0x07
  switch(direction)
     3c6:	81 30       	cpi	r24, 0x01	; 1
     3c8:	a9 f0       	breq	.+42     	; 0x3f4 <LCD_direction+0x4a>
     3ca:	28 f0       	brcs	.+10     	; 0x3d6 <LCD_direction+0x2c>
     3cc:	82 30       	cpi	r24, 0x02	; 2
     3ce:	09 f1       	breq	.+66     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     3d0:	83 30       	cpi	r24, 0x03	; 3
     3d2:	71 f1       	breq	.+92     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     3d4:	08 95       	ret
  {
    case LCD_ROTATE_0:
      lcddev.width=LCD_W;
     3d6:	e6 e6       	ldi	r30, 0x66	; 102
     3d8:	f2 e0       	ldi	r31, 0x02	; 2
     3da:	80 e4       	ldi	r24, 0x40	; 64
     3dc:	91 e0       	ldi	r25, 0x01	; 1
     3de:	91 83       	std	Z+1, r25	; 0x01
     3e0:	80 83       	st	Z, r24
      lcddev.height=LCD_H;
     3e2:	80 ee       	ldi	r24, 0xE0	; 224
     3e4:	91 e0       	ldi	r25, 0x01	; 1
     3e6:	93 83       	std	Z+3, r25	; 0x03
     3e8:	82 83       	std	Z+2, r24	; 0x02
  LCD_CS_SET;
}

static void LCD_WriteReg(uint8_t LCD_Reg, uint8_t LCD_RegValue)
{
  LCD_WR_REG(LCD_Reg);
     3ea:	86 e3       	ldi	r24, 0x36	; 54
     3ec:	8b df       	rcall	.-234    	; 0x304 <LCD_WR_REG>
  LCD_WR_DATA(LCD_RegValue);
     3ee:	88 e4       	ldi	r24, 0x48	; 72
     3f0:	84 cf       	rjmp	.-248    	; 0x2fa <LCD_WR_DATA>
     3f2:	08 95       	ret
      lcddev.width=LCD_W;
      lcddev.height=LCD_H;
      LCD_WriteReg(0x36,(1<<3)|(1<<6));
      break;
    case LCD_ROTATE_90:
      lcddev.width=LCD_H;
     3f4:	e6 e6       	ldi	r30, 0x66	; 102
     3f6:	f2 e0       	ldi	r31, 0x02	; 2
     3f8:	80 ee       	ldi	r24, 0xE0	; 224
     3fa:	91 e0       	ldi	r25, 0x01	; 1
     3fc:	91 83       	std	Z+1, r25	; 0x01
     3fe:	80 83       	st	Z, r24
      lcddev.height=LCD_W;
     400:	80 e4       	ldi	r24, 0x40	; 64
     402:	91 e0       	ldi	r25, 0x01	; 1
     404:	93 83       	std	Z+3, r25	; 0x03
  LCD_CS_SET;
}

static void LCD_WriteReg(uint8_t LCD_Reg, uint8_t LCD_RegValue)
{
  LCD_WR_REG(LCD_Reg);
     406:	82 83       	std	Z+2, r24	; 0x02
     408:	86 e3       	ldi	r24, 0x36	; 54
  LCD_WR_DATA(LCD_RegValue);
     40a:	7c df       	rcall	.-264    	; 0x304 <LCD_WR_REG>
     40c:	88 e2       	ldi	r24, 0x28	; 40
     40e:	75 cf       	rjmp	.-278    	; 0x2fa <LCD_WR_DATA>
     410:	08 95       	ret
      lcddev.width=LCD_H;
      lcddev.height=LCD_W;
      LCD_WriteReg(0x36,(1<<3)|(1<<5));
      break;
    case LCD_ROTATE_180:
      lcddev.width=LCD_W;
     412:	e6 e6       	ldi	r30, 0x66	; 102
     414:	f2 e0       	ldi	r31, 0x02	; 2
     416:	80 e4       	ldi	r24, 0x40	; 64
     418:	91 e0       	ldi	r25, 0x01	; 1
     41a:	91 83       	std	Z+1, r25	; 0x01
     41c:	80 83       	st	Z, r24
      lcddev.height=LCD_H;
     41e:	80 ee       	ldi	r24, 0xE0	; 224
     420:	91 e0       	ldi	r25, 0x01	; 1
     422:	93 83       	std	Z+3, r25	; 0x03
  LCD_CS_SET;
}

static void LCD_WriteReg(uint8_t LCD_Reg, uint8_t LCD_RegValue)
{
  LCD_WR_REG(LCD_Reg);
     424:	82 83       	std	Z+2, r24	; 0x02
     426:	86 e3       	ldi	r24, 0x36	; 54
     428:	6d df       	rcall	.-294    	; 0x304 <LCD_WR_REG>
  LCD_WR_DATA(LCD_RegValue);
     42a:	88 e8       	ldi	r24, 0x88	; 136
     42c:	66 cf       	rjmp	.-308    	; 0x2fa <LCD_WR_DATA>
     42e:	08 95       	ret
     430:	e6 e6       	ldi	r30, 0x66	; 102
      lcddev.width=LCD_W;
      lcddev.height=LCD_H;
      LCD_WriteReg(0x36,(1<<3)|(1<<7));
      break;
    case LCD_ROTATE_270:
      lcddev.width=LCD_H;
     432:	f2 e0       	ldi	r31, 0x02	; 2
     434:	80 ee       	ldi	r24, 0xE0	; 224
     436:	91 e0       	ldi	r25, 0x01	; 1
     438:	91 83       	std	Z+1, r25	; 0x01
     43a:	80 83       	st	Z, r24
      lcddev.height=LCD_W;
     43c:	80 e4       	ldi	r24, 0x40	; 64
     43e:	91 e0       	ldi	r25, 0x01	; 1
     440:	93 83       	std	Z+3, r25	; 0x03
  LCD_CS_SET;
}

static void LCD_WriteReg(uint8_t LCD_Reg, uint8_t LCD_RegValue)
{
  LCD_WR_REG(LCD_Reg);
     442:	82 83       	std	Z+2, r24	; 0x02
     444:	86 e3       	ldi	r24, 0x36	; 54
     446:	5e df       	rcall	.-324    	; 0x304 <LCD_WR_REG>
  LCD_WR_DATA(LCD_RegValue);
     448:	88 ee       	ldi	r24, 0xE8	; 232
     44a:	57 cf       	rjmp	.-338    	; 0x2fa <LCD_WR_DATA>
     44c:	08 95       	ret

0000044e <LCD_SetBackLight>:
     44e:	75 ce       	rjmp	.-790    	; 0x13a <SetBackLightDuty>
  LCD_WriteData_16Bit(colour);
}

void LCD_SetBackLight(uint8_t duty)
{
  SetBackLightDuty(duty);
     450:	08 95       	ret

00000452 <LCD_WriteData_16Bit>:
}

void LCD_WriteData_16Bit(uint16_t Data)
{
     452:	cf 93       	push	r28
     454:	c8 2f       	mov	r28, r24
  LCD_CS_CLR;
     456:	28 98       	cbi	0x05, 0	; 5
  LCD_RS_SET;
     458:	75 9a       	sbi	0x0e, 5	; 14
  SPI_Master_transmit(Data>>8);
     45a:	89 2f       	mov	r24, r25
     45c:	bd d2       	rcall	.+1402   	; 0x9d8 <SPI_Master_transmit>
  SPI_Master_transmit(Data);
     45e:	8c 2f       	mov	r24, r28
     460:	bb d2       	rcall	.+1398   	; 0x9d8 <SPI_Master_transmit>
  LCD_CS_SET;
     462:	28 9a       	sbi	0x05, 0	; 5
}
     464:	cf 91       	pop	r28
     466:	08 95       	ret

00000468 <LCD_Clear>:
  SetBackLightDuty(100);
  LCD_Clear(BLACK);
}

void LCD_Clear(uint16_t Color)
{
     468:	cf 92       	push	r12
     46a:	df 92       	push	r13
     46c:	ef 92       	push	r14
     46e:	ff 92       	push	r15
     470:	0f 93       	push	r16
     472:	1f 93       	push	r17
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	7c 01       	movw	r14, r24
  unsigned int i,m;
  LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);
     47a:	c6 e6       	ldi	r28, 0x66	; 102
     47c:	d2 e0       	ldi	r29, 0x02	; 2
     47e:	2a 81       	ldd	r18, Y+2	; 0x02
     480:	3b 81       	ldd	r19, Y+3	; 0x03
     482:	21 50       	subi	r18, 0x01	; 1
     484:	31 09       	sbc	r19, r1
     486:	48 81       	ld	r20, Y
     488:	59 81       	ldd	r21, Y+1	; 0x01
     48a:	41 50       	subi	r20, 0x01	; 1
     48c:	51 09       	sbc	r21, r1
     48e:	60 e0       	ldi	r22, 0x00	; 0
     490:	70 e0       	ldi	r23, 0x00	; 0
     492:	80 e0       	ldi	r24, 0x00	; 0
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	50 df       	rcall	.-352    	; 0x338 <LCD_SetWindows>
  LCD_CS_CLR;
     498:	28 98       	cbi	0x05, 0	; 5
  LCD_RS_SET;
     49a:	75 9a       	sbi	0x0e, 5	; 14
  for(i=0;i<lcddev.height;i++)
     49c:	8a 81       	ldd	r24, Y+2	; 0x02
     49e:	9b 81       	ldd	r25, Y+3	; 0x03
     4a0:	89 2b       	or	r24, r25
     4a2:	b1 f4       	brne	.+44     	; 0x4d0 <LCD_Clear+0x68>
     4a4:	1f c0       	rjmp	.+62     	; 0x4e4 <LCD_Clear+0x7c>
  {
    for(m=0;m<lcddev.width;m++)
     4a6:	c0 e0       	ldi	r28, 0x00	; 0
     4a8:	d0 e0       	ldi	r29, 0x00	; 0
    {
      LCD_WriteData_16Bit(Color);
     4aa:	c7 01       	movw	r24, r14
     4ac:	d2 df       	rcall	.-92     	; 0x452 <LCD_WriteData_16Bit>
  LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);
  LCD_CS_CLR;
  LCD_RS_SET;
  for(i=0;i<lcddev.height;i++)
  {
    for(m=0;m<lcddev.width;m++)
     4ae:	21 96       	adiw	r28, 0x01	; 1
     4b0:	f8 01       	movw	r30, r16
     4b2:	80 81       	ld	r24, Z
     4b4:	91 81       	ldd	r25, Z+1	; 0x01
     4b6:	c8 17       	cp	r28, r24
     4b8:	d9 07       	cpc	r29, r25
     4ba:	b8 f3       	brcs	.-18     	; 0x4aa <LCD_Clear+0x42>
{
  unsigned int i,m;
  LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);
  LCD_CS_CLR;
  LCD_RS_SET;
  for(i=0;i<lcddev.height;i++)
     4bc:	ff ef       	ldi	r31, 0xFF	; 255
     4be:	cf 1a       	sub	r12, r31
     4c0:	df 0a       	sbc	r13, r31
     4c2:	f8 01       	movw	r30, r16
     4c4:	82 81       	ldd	r24, Z+2	; 0x02
     4c6:	93 81       	ldd	r25, Z+3	; 0x03
     4c8:	c8 16       	cp	r12, r24
     4ca:	d9 06       	cpc	r13, r25
     4cc:	28 f0       	brcs	.+10     	; 0x4d8 <LCD_Clear+0x70>
     4ce:	0a c0       	rjmp	.+20     	; 0x4e4 <LCD_Clear+0x7c>
     4d0:	c1 2c       	mov	r12, r1
     4d2:	d1 2c       	mov	r13, r1
  {
    for(m=0;m<lcddev.width;m++)
     4d4:	06 e6       	ldi	r16, 0x66	; 102
     4d6:	12 e0       	ldi	r17, 0x02	; 2
     4d8:	f8 01       	movw	r30, r16
     4da:	80 81       	ld	r24, Z
     4dc:	91 81       	ldd	r25, Z+1	; 0x01
     4de:	89 2b       	or	r24, r25
     4e0:	11 f7       	brne	.-60     	; 0x4a6 <LCD_Clear+0x3e>
     4e2:	ec cf       	rjmp	.-40     	; 0x4bc <LCD_Clear+0x54>
    {
      LCD_WriteData_16Bit(Color);
    }
  }
  LCD_CS_SET;
     4e4:	28 9a       	sbi	0x05, 0	; 5
}
     4e6:	df 91       	pop	r29
     4e8:	cf 91       	pop	r28
     4ea:	1f 91       	pop	r17
     4ec:	0f 91       	pop	r16
     4ee:	ff 90       	pop	r15
     4f0:	ef 90       	pop	r14
     4f2:	df 90       	pop	r13
     4f4:	cf 90       	pop	r12
     4f6:	08 95       	ret

000004f8 <LCD_Init>:
/************************************************************************/
/* Public function definitions                                          */
/************************************************************************/
void LCD_Init(void)
{
  SPI_Master_init();
     4f8:	47 d2       	rcall	.+1166   	; 0x988 <SPI_Master_init>
  LCD_WR_REG(lcddev.wramcmd);
}

void LCD_GPIOInit(void)
{
  DDR_LCD_CTRL |= ((1 << LCD_RST) | (1 << LCD_RS));
     4fa:	8d b1       	in	r24, 0x0d	; 13
     4fc:	80 63       	ori	r24, 0x30	; 48
/************************************************************************/
void LCD_Init(void)
{
  SPI_Master_init();
  LCD_GPIOInit();
  Backlight_Init();
     4fe:	8d b9       	out	0x0d, r24	; 13
  LCD_RESET();
     500:	1a de       	rcall	.-972    	; 0x136 <Backlight_Init>

  LCD_WR_REG(0xF0);
     502:	05 df       	rcall	.-502    	; 0x30e <LCD_RESET>
     504:	80 ef       	ldi	r24, 0xF0	; 240
  LCD_WR_DATA(0xC3);
     506:	fe de       	rcall	.-516    	; 0x304 <LCD_WR_REG>
     508:	83 ec       	ldi	r24, 0xC3	; 195
  LCD_WR_REG(0xF0);
     50a:	f7 de       	rcall	.-530    	; 0x2fa <LCD_WR_DATA>
     50c:	80 ef       	ldi	r24, 0xF0	; 240
  LCD_WR_DATA(0x96);
     50e:	fa de       	rcall	.-524    	; 0x304 <LCD_WR_REG>
     510:	86 e9       	ldi	r24, 0x96	; 150
  LCD_WR_REG(0x36);
     512:	f3 de       	rcall	.-538    	; 0x2fa <LCD_WR_DATA>
     514:	86 e3       	ldi	r24, 0x36	; 54
  LCD_WR_DATA(0x68);
     516:	f6 de       	rcall	.-532    	; 0x304 <LCD_WR_REG>
     518:	88 e6       	ldi	r24, 0x68	; 104
  LCD_WR_REG(0x3A);
     51a:	ef de       	rcall	.-546    	; 0x2fa <LCD_WR_DATA>
     51c:	8a e3       	ldi	r24, 0x3A	; 58
  LCD_WR_DATA(0x05);
     51e:	f2 de       	rcall	.-540    	; 0x304 <LCD_WR_REG>
     520:	85 e0       	ldi	r24, 0x05	; 5
  LCD_WR_REG(0xB0);
     522:	eb de       	rcall	.-554    	; 0x2fa <LCD_WR_DATA>
     524:	80 eb       	ldi	r24, 0xB0	; 176
  LCD_WR_DATA(0x80);
     526:	ee de       	rcall	.-548    	; 0x304 <LCD_WR_REG>
     528:	80 e8       	ldi	r24, 0x80	; 128
  LCD_WR_REG(0xB6);
     52a:	e7 de       	rcall	.-562    	; 0x2fa <LCD_WR_DATA>
     52c:	86 eb       	ldi	r24, 0xB6	; 182
  LCD_WR_DATA(0x00);
     52e:	ea de       	rcall	.-556    	; 0x304 <LCD_WR_REG>
     530:	80 e0       	ldi	r24, 0x00	; 0
  LCD_WR_DATA(0x02);
     532:	e3 de       	rcall	.-570    	; 0x2fa <LCD_WR_DATA>
     534:	82 e0       	ldi	r24, 0x02	; 2
  LCD_WR_REG(0xB5);
     536:	e1 de       	rcall	.-574    	; 0x2fa <LCD_WR_DATA>
     538:	85 eb       	ldi	r24, 0xB5	; 181
  LCD_WR_DATA(0x02);
     53a:	e4 de       	rcall	.-568    	; 0x304 <LCD_WR_REG>
     53c:	82 e0       	ldi	r24, 0x02	; 2
  LCD_WR_DATA(0x03);
     53e:	dd de       	rcall	.-582    	; 0x2fa <LCD_WR_DATA>
     540:	83 e0       	ldi	r24, 0x03	; 3
  LCD_WR_DATA(0x00);
     542:	db de       	rcall	.-586    	; 0x2fa <LCD_WR_DATA>
     544:	80 e0       	ldi	r24, 0x00	; 0
  LCD_WR_DATA(0x04);
     546:	d9 de       	rcall	.-590    	; 0x2fa <LCD_WR_DATA>
     548:	84 e0       	ldi	r24, 0x04	; 4
  LCD_WR_REG(0xB1);
     54a:	d7 de       	rcall	.-594    	; 0x2fa <LCD_WR_DATA>
     54c:	81 eb       	ldi	r24, 0xB1	; 177
  LCD_WR_DATA(0x80);
     54e:	da de       	rcall	.-588    	; 0x304 <LCD_WR_REG>
     550:	80 e8       	ldi	r24, 0x80	; 128
  LCD_WR_DATA(0x10);
     552:	d3 de       	rcall	.-602    	; 0x2fa <LCD_WR_DATA>
     554:	80 e1       	ldi	r24, 0x10	; 16
  LCD_WR_REG(0xB4);
     556:	d1 de       	rcall	.-606    	; 0x2fa <LCD_WR_DATA>
     558:	84 eb       	ldi	r24, 0xB4	; 180
  LCD_WR_DATA(0x00);
     55a:	d4 de       	rcall	.-600    	; 0x304 <LCD_WR_REG>
     55c:	80 e0       	ldi	r24, 0x00	; 0
  LCD_WR_REG(0xB7);
     55e:	cd de       	rcall	.-614    	; 0x2fa <LCD_WR_DATA>
     560:	87 eb       	ldi	r24, 0xB7	; 183
  LCD_WR_DATA(0xC6);
     562:	d0 de       	rcall	.-608    	; 0x304 <LCD_WR_REG>
     564:	86 ec       	ldi	r24, 0xC6	; 198
  LCD_WR_REG(0xC5);
     566:	c9 de       	rcall	.-622    	; 0x2fa <LCD_WR_DATA>
     568:	85 ec       	ldi	r24, 0xC5	; 197
  LCD_WR_DATA(0x24);
     56a:	cc de       	rcall	.-616    	; 0x304 <LCD_WR_REG>
     56c:	84 e2       	ldi	r24, 0x24	; 36
  LCD_WR_REG(0xE4);
     56e:	c5 de       	rcall	.-630    	; 0x2fa <LCD_WR_DATA>
     570:	84 ee       	ldi	r24, 0xE4	; 228
  LCD_WR_DATA(0x31);
     572:	c8 de       	rcall	.-624    	; 0x304 <LCD_WR_REG>
     574:	81 e3       	ldi	r24, 0x31	; 49
  LCD_WR_REG(0xE8);
     576:	c1 de       	rcall	.-638    	; 0x2fa <LCD_WR_DATA>
     578:	88 ee       	ldi	r24, 0xE8	; 232
  LCD_WR_DATA(0x40);
     57a:	c4 de       	rcall	.-632    	; 0x304 <LCD_WR_REG>
     57c:	80 e4       	ldi	r24, 0x40	; 64
  LCD_WR_DATA(0x8A);
     57e:	bd de       	rcall	.-646    	; 0x2fa <LCD_WR_DATA>
     580:	8a e8       	ldi	r24, 0x8A	; 138
  LCD_WR_DATA(0x00);
     582:	bb de       	rcall	.-650    	; 0x2fa <LCD_WR_DATA>
     584:	80 e0       	ldi	r24, 0x00	; 0
  LCD_WR_DATA(0x00);
     586:	b9 de       	rcall	.-654    	; 0x2fa <LCD_WR_DATA>
     588:	80 e0       	ldi	r24, 0x00	; 0
  LCD_WR_DATA(0x29);
     58a:	b7 de       	rcall	.-658    	; 0x2fa <LCD_WR_DATA>
     58c:	89 e2       	ldi	r24, 0x29	; 41
  LCD_WR_DATA(0x19);
     58e:	b5 de       	rcall	.-662    	; 0x2fa <LCD_WR_DATA>
     590:	89 e1       	ldi	r24, 0x19	; 25
  LCD_WR_DATA(0xA5);
     592:	b3 de       	rcall	.-666    	; 0x2fa <LCD_WR_DATA>
     594:	85 ea       	ldi	r24, 0xA5	; 165
  LCD_WR_DATA(0x33);
     596:	b1 de       	rcall	.-670    	; 0x2fa <LCD_WR_DATA>
     598:	83 e3       	ldi	r24, 0x33	; 51
  LCD_WR_REG(0xC2);
     59a:	af de       	rcall	.-674    	; 0x2fa <LCD_WR_DATA>
     59c:	82 ec       	ldi	r24, 0xC2	; 194
  LCD_WR_REG(0xA7);
     59e:	b2 de       	rcall	.-668    	; 0x304 <LCD_WR_REG>
     5a0:	87 ea       	ldi	r24, 0xA7	; 167

  LCD_WR_REG(0xE0);
     5a2:	b0 de       	rcall	.-672    	; 0x304 <LCD_WR_REG>
     5a4:	80 ee       	ldi	r24, 0xE0	; 224
  LCD_WR_DATA(0xF0);
     5a6:	ae de       	rcall	.-676    	; 0x304 <LCD_WR_REG>
     5a8:	80 ef       	ldi	r24, 0xF0	; 240
  LCD_WR_DATA(0x09);
     5aa:	a7 de       	rcall	.-690    	; 0x2fa <LCD_WR_DATA>
     5ac:	89 e0       	ldi	r24, 0x09	; 9
  LCD_WR_DATA(0x13);
     5ae:	a5 de       	rcall	.-694    	; 0x2fa <LCD_WR_DATA>
     5b0:	83 e1       	ldi	r24, 0x13	; 19
  LCD_WR_DATA(0x12);
     5b2:	a3 de       	rcall	.-698    	; 0x2fa <LCD_WR_DATA>
     5b4:	82 e1       	ldi	r24, 0x12	; 18
  LCD_WR_DATA(0x12);
     5b6:	a1 de       	rcall	.-702    	; 0x2fa <LCD_WR_DATA>
     5b8:	82 e1       	ldi	r24, 0x12	; 18
  LCD_WR_DATA(0x2B);
     5ba:	9f de       	rcall	.-706    	; 0x2fa <LCD_WR_DATA>
     5bc:	8b e2       	ldi	r24, 0x2B	; 43
  LCD_WR_DATA(0x3C);
     5be:	9d de       	rcall	.-710    	; 0x2fa <LCD_WR_DATA>
     5c0:	8c e3       	ldi	r24, 0x3C	; 60
  LCD_WR_DATA(0x44);
     5c2:	9b de       	rcall	.-714    	; 0x2fa <LCD_WR_DATA>
     5c4:	84 e4       	ldi	r24, 0x44	; 68
  LCD_WR_DATA(0x4B);
     5c6:	99 de       	rcall	.-718    	; 0x2fa <LCD_WR_DATA>
     5c8:	8b e4       	ldi	r24, 0x4B	; 75
  LCD_WR_DATA(0x1B);
     5ca:	97 de       	rcall	.-722    	; 0x2fa <LCD_WR_DATA>
     5cc:	8b e1       	ldi	r24, 0x1B	; 27
  LCD_WR_DATA(0x18);
     5ce:	95 de       	rcall	.-726    	; 0x2fa <LCD_WR_DATA>
     5d0:	88 e1       	ldi	r24, 0x18	; 24
  LCD_WR_DATA(0x17);
     5d2:	93 de       	rcall	.-730    	; 0x2fa <LCD_WR_DATA>
     5d4:	87 e1       	ldi	r24, 0x17	; 23
  LCD_WR_DATA(0x1D);
     5d6:	91 de       	rcall	.-734    	; 0x2fa <LCD_WR_DATA>
     5d8:	8d e1       	ldi	r24, 0x1D	; 29
  LCD_WR_DATA(0x21);
     5da:	8f de       	rcall	.-738    	; 0x2fa <LCD_WR_DATA>
     5dc:	81 e2       	ldi	r24, 0x21	; 33
     5de:	8d de       	rcall	.-742    	; 0x2fa <LCD_WR_DATA>

  LCD_WR_REG(0XE1);
     5e0:	81 ee       	ldi	r24, 0xE1	; 225
     5e2:	90 de       	rcall	.-736    	; 0x304 <LCD_WR_REG>
     5e4:	80 ef       	ldi	r24, 0xF0	; 240
  LCD_WR_DATA(0xF0);
     5e6:	89 de       	rcall	.-750    	; 0x2fa <LCD_WR_DATA>
     5e8:	89 e0       	ldi	r24, 0x09	; 9
     5ea:	87 de       	rcall	.-754    	; 0x2fa <LCD_WR_DATA>
  LCD_WR_DATA(0x09);
     5ec:	83 e1       	ldi	r24, 0x13	; 19
     5ee:	85 de       	rcall	.-758    	; 0x2fa <LCD_WR_DATA>
     5f0:	8c e0       	ldi	r24, 0x0C	; 12
  LCD_WR_DATA(0x13);
     5f2:	83 de       	rcall	.-762    	; 0x2fa <LCD_WR_DATA>
     5f4:	8d e0       	ldi	r24, 0x0D	; 13
     5f6:	81 de       	rcall	.-766    	; 0x2fa <LCD_WR_DATA>
  LCD_WR_DATA(0x0C);
     5f8:	87 e2       	ldi	r24, 0x27	; 39
     5fa:	7f de       	rcall	.-770    	; 0x2fa <LCD_WR_DATA>
     5fc:	8b e3       	ldi	r24, 0x3B	; 59
  LCD_WR_DATA(0x0D);
     5fe:	7d de       	rcall	.-774    	; 0x2fa <LCD_WR_DATA>
     600:	84 e4       	ldi	r24, 0x44	; 68
     602:	7b de       	rcall	.-778    	; 0x2fa <LCD_WR_DATA>
  LCD_WR_DATA(0x27);
     604:	8d e4       	ldi	r24, 0x4D	; 77
     606:	79 de       	rcall	.-782    	; 0x2fa <LCD_WR_DATA>
     608:	8b e0       	ldi	r24, 0x0B	; 11
  LCD_WR_DATA(0x3B);
     60a:	77 de       	rcall	.-786    	; 0x2fa <LCD_WR_DATA>
     60c:	87 e1       	ldi	r24, 0x17	; 23
     60e:	75 de       	rcall	.-790    	; 0x2fa <LCD_WR_DATA>
  LCD_WR_DATA(0x44);
     610:	87 e1       	ldi	r24, 0x17	; 23
     612:	73 de       	rcall	.-794    	; 0x2fa <LCD_WR_DATA>
     614:	8d e1       	ldi	r24, 0x1D	; 29
  LCD_WR_DATA(0x4D);
     616:	71 de       	rcall	.-798    	; 0x2fa <LCD_WR_DATA>
     618:	81 e2       	ldi	r24, 0x21	; 33
     61a:	6f de       	rcall	.-802    	; 0x2fa <LCD_WR_DATA>
  LCD_WR_DATA(0x0B);
     61c:	86 e3       	ldi	r24, 0x36	; 54
     61e:	72 de       	rcall	.-796    	; 0x304 <LCD_WR_REG>
     620:	8c ee       	ldi	r24, 0xEC	; 236
  LCD_WR_DATA(0x17);
     622:	6b de       	rcall	.-810    	; 0x2fa <LCD_WR_DATA>
     624:	80 ef       	ldi	r24, 0xF0	; 240
     626:	6e de       	rcall	.-804    	; 0x304 <LCD_WR_REG>
  LCD_WR_DATA(0x17);
     628:	83 ec       	ldi	r24, 0xC3	; 195
     62a:	67 de       	rcall	.-818    	; 0x2fa <LCD_WR_DATA>
     62c:	80 ef       	ldi	r24, 0xF0	; 240
  LCD_WR_DATA(0x1D);
     62e:	6a de       	rcall	.-812    	; 0x304 <LCD_WR_REG>
     630:	89 e6       	ldi	r24, 0x69	; 105
     632:	63 de       	rcall	.-826    	; 0x2fa <LCD_WR_DATA>
  LCD_WR_DATA(0x21);
     634:	83 e1       	ldi	r24, 0x13	; 19
     636:	66 de       	rcall	.-820    	; 0x304 <LCD_WR_REG>
     638:	81 e1       	ldi	r24, 0x11	; 17

  LCD_WR_REG(0X36);
     63a:	64 de       	rcall	.-824    	; 0x304 <LCD_WR_REG>
     63c:	89 e2       	ldi	r24, 0x29	; 41
     63e:	62 de       	rcall	.-828    	; 0x304 <LCD_WR_REG>
  LCD_WR_DATA(0xEC);
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	b3 de       	rcall	.-666    	; 0x3aa <LCD_direction>
     644:	84 e6       	ldi	r24, 0x64	; 100
  LCD_WR_REG(0xF0);
     646:	79 dd       	rcall	.-1294   	; 0x13a <SetBackLightDuty>
     648:	80 e0       	ldi	r24, 0x00	; 0
     64a:	90 e0       	ldi	r25, 0x00	; 0
  LCD_WR_DATA(0xC3);
     64c:	0d cf       	rjmp	.-486    	; 0x468 <LCD_Clear>
     64e:	08 95       	ret

00000650 <LCD_GUI_DrawPoint>:
     650:	cf 93       	push	r28
  LCD_WR_REG(0xF0);
     652:	df 93       	push	r29
     654:	ea 01       	movw	r28, r20
     656:	a5 de       	rcall	.-694    	; 0x3a2 <LCD_SetCursor>
  LCD_WR_DATA(0x69);
     658:	ce 01       	movw	r24, r28
     65a:	fb de       	rcall	.-522    	; 0x452 <LCD_WriteData_16Bit>
     65c:	df 91       	pop	r29
  LCD_WR_REG(0X13);
     65e:	cf 91       	pop	r28
     660:	08 95       	ret

00000662 <LCD_GUI_Fill>:
  LCD_SetCursor(x,y);
  LCD_WriteData_16Bit(color);
}

void LCD_GUI_Fill(uint16_t sx, uint16_t sy, uint16_t ex, uint16_t ey, uint16_t colour)
{
     662:	af 92       	push	r10
     664:	bf 92       	push	r11
     666:	cf 92       	push	r12
     668:	df 92       	push	r13
     66a:	ef 92       	push	r14
     66c:	ff 92       	push	r15
     66e:	0f 93       	push	r16
     670:	1f 93       	push	r17
     672:	cf 93       	push	r28
     674:	df 93       	push	r29
  if (ex < sx)
     676:	48 17       	cp	r20, r24
     678:	59 07       	cpc	r21, r25
     67a:	28 f4       	brcc	.+10     	; 0x686 <LCD_GUI_Fill+0x24>
     67c:	f8 2f       	mov	r31, r24
     67e:	e9 2f       	mov	r30, r25
static void swap(uint16_t *a, uint16_t *b)
{
  uint16_t tmp;
  tmp = *a;
  *a = *b;
  *b = tmp;
     680:	ca 01       	movw	r24, r20

static void swap(uint16_t *a, uint16_t *b)
{
  uint16_t tmp;
  tmp = *a;
  *a = *b;
     682:	4f 2f       	mov	r20, r31
     684:	5e 2f       	mov	r21, r30
{
  if (ex < sx)
  {
    swap(&ex, &sx);
  }
  if (ey < sy)
     686:	26 17       	cp	r18, r22
     688:	37 07       	cpc	r19, r23
     68a:	28 f4       	brcc	.+10     	; 0x696 <LCD_GUI_Fill+0x34>
     68c:	f6 2f       	mov	r31, r22
     68e:	e7 2f       	mov	r30, r23
static void swap(uint16_t *a, uint16_t *b)
{
  uint16_t tmp;
  tmp = *a;
  *a = *b;
  *b = tmp;
     690:	b9 01       	movw	r22, r18

static void swap(uint16_t *a, uint16_t *b)
{
  uint16_t tmp;
  tmp = *a;
  *a = *b;
     692:	2f 2f       	mov	r18, r31
     694:	3e 2f       	mov	r19, r30
  {
    swap(&ey, &sy);
  }

  uint16_t i,j;
  uint16_t width=ex-sx+1;
     696:	7a 01       	movw	r14, r20
     698:	ef ef       	ldi	r30, 0xFF	; 255
     69a:	ee 1a       	sub	r14, r30
     69c:	fe 0a       	sbc	r15, r30
     69e:	e8 1a       	sub	r14, r24
     6a0:	f9 0a       	sbc	r15, r25
  uint16_t height=ey-sy+1;
     6a2:	59 01       	movw	r10, r18
     6a4:	ef ef       	ldi	r30, 0xFF	; 255
     6a6:	ae 1a       	sub	r10, r30
     6a8:	be 0a       	sbc	r11, r30
     6aa:	a6 1a       	sub	r10, r22
     6ac:	b7 0a       	sbc	r11, r23
  LCD_SetWindows(sx,sy,ex,ey);
     6ae:	44 de       	rcall	.-888    	; 0x338 <LCD_SetWindows>
  for(i=0;i<height;i++)
     6b0:	a1 14       	cp	r10, r1
     6b2:	b1 04       	cpc	r11, r1
     6b4:	81 f4       	brne	.+32     	; 0x6d6 <LCD_GUI_Fill+0x74>
     6b6:	15 c0       	rjmp	.+42     	; 0x6e2 <LCD_GUI_Fill+0x80>
  {
    for(j=0;j<width;j++)
     6b8:	c0 e0       	ldi	r28, 0x00	; 0
     6ba:	d0 e0       	ldi	r29, 0x00	; 0
    LCD_WriteData_16Bit(colour);
     6bc:	c8 01       	movw	r24, r16
     6be:	c9 de       	rcall	.-622    	; 0x452 <LCD_WriteData_16Bit>
  uint16_t width=ex-sx+1;
  uint16_t height=ey-sy+1;
  LCD_SetWindows(sx,sy,ex,ey);
  for(i=0;i<height;i++)
  {
    for(j=0;j<width;j++)
     6c0:	21 96       	adiw	r28, 0x01	; 1
     6c2:	ec 16       	cp	r14, r28
     6c4:	fd 06       	cpc	r15, r29
     6c6:	d1 f7       	brne	.-12     	; 0x6bc <LCD_GUI_Fill+0x5a>

  uint16_t i,j;
  uint16_t width=ex-sx+1;
  uint16_t height=ey-sy+1;
  LCD_SetWindows(sx,sy,ex,ey);
  for(i=0;i<height;i++)
     6c8:	8f ef       	ldi	r24, 0xFF	; 255
     6ca:	c8 1a       	sub	r12, r24
     6cc:	d8 0a       	sbc	r13, r24
     6ce:	ac 14       	cp	r10, r12
     6d0:	bd 04       	cpc	r11, r13
     6d2:	19 f4       	brne	.+6      	; 0x6da <LCD_GUI_Fill+0x78>
     6d4:	06 c0       	rjmp	.+12     	; 0x6e2 <LCD_GUI_Fill+0x80>
     6d6:	c1 2c       	mov	r12, r1
     6d8:	d1 2c       	mov	r13, r1
  {
    for(j=0;j<width;j++)
     6da:	e1 14       	cp	r14, r1
     6dc:	f1 04       	cpc	r15, r1
     6de:	61 f7       	brne	.-40     	; 0x6b8 <LCD_GUI_Fill+0x56>
     6e0:	f3 cf       	rjmp	.-26     	; 0x6c8 <LCD_GUI_Fill+0x66>
    LCD_WriteData_16Bit(colour);
  }
}
     6e2:	df 91       	pop	r29
     6e4:	cf 91       	pop	r28
     6e6:	1f 91       	pop	r17
     6e8:	0f 91       	pop	r16
     6ea:	ff 90       	pop	r15
     6ec:	ef 90       	pop	r14
     6ee:	df 90       	pop	r13
     6f0:	cf 90       	pop	r12
     6f2:	bf 90       	pop	r11
     6f4:	af 90       	pop	r10
     6f6:	08 95       	ret

000006f8 <LCD_GUI_DrawLine>:

void LCD_GUI_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t colour)
{
     6f8:	2f 92       	push	r2
     6fa:	3f 92       	push	r3
     6fc:	4f 92       	push	r4
     6fe:	5f 92       	push	r5
     700:	6f 92       	push	r6
     702:	7f 92       	push	r7
     704:	8f 92       	push	r8
     706:	9f 92       	push	r9
     708:	af 92       	push	r10
     70a:	bf 92       	push	r11
     70c:	cf 92       	push	r12
     70e:	df 92       	push	r13
     710:	ef 92       	push	r14
     712:	ff 92       	push	r15
     714:	0f 93       	push	r16
     716:	1f 93       	push	r17
     718:	cf 93       	push	r28
     71a:	df 93       	push	r29
     71c:	cd b7       	in	r28, 0x3d	; 61
     71e:	de b7       	in	r29, 0x3e	; 62
     720:	28 97       	sbiw	r28, 0x08	; 8
     722:	0f b6       	in	r0, 0x3f	; 63
     724:	f8 94       	cli
     726:	de bf       	out	0x3e, r29	; 62
     728:	0f be       	out	0x3f, r0	; 63
     72a:	cd bf       	out	0x3d, r28	; 61
     72c:	1a 83       	std	Y+2, r17	; 0x02
     72e:	09 83       	std	Y+1, r16	; 0x01
  uint16_t t;
  int xerr=0,yerr=0,delta_x,delta_y,distance;
  int incx,incy,uRow,uCol;

  delta_x=x2-x1;
     730:	6a 01       	movw	r12, r20
     732:	c8 1a       	sub	r12, r24
     734:	d9 0a       	sbc	r13, r25
  delta_y=y2-y1;
     736:	39 01       	movw	r6, r18
     738:	66 1a       	sub	r6, r22
     73a:	77 0a       	sbc	r7, r23
  uRow=x1;
     73c:	1c 01       	movw	r2, r24
  uCol=y1;
     73e:	2b 01       	movw	r4, r22
  if(delta_x>0)incx=1;
     740:	1c 14       	cp	r1, r12
     742:	1d 04       	cpc	r1, r13
     744:	5c f0       	brlt	.+22     	; 0x75c <LCD_GUI_DrawLine+0x64>
  else if(delta_x==0)incx=0;
     746:	c1 14       	cp	r12, r1
     748:	d1 04       	cpc	r13, r1
     74a:	69 f0       	breq	.+26     	; 0x766 <LCD_GUI_DrawLine+0x6e>
  else {incx=-1;delta_x=-delta_x;}
     74c:	d1 94       	neg	r13
     74e:	c1 94       	neg	r12
     750:	d1 08       	sbc	r13, r1
     752:	8f ef       	ldi	r24, 0xFF	; 255
     754:	9f ef       	ldi	r25, 0xFF	; 255
     756:	9c 83       	std	Y+4, r25	; 0x04
     758:	8b 83       	std	Y+3, r24	; 0x03
     75a:	07 c0       	rjmp	.+14     	; 0x76a <LCD_GUI_DrawLine+0x72>

  delta_x=x2-x1;
  delta_y=y2-y1;
  uRow=x1;
  uCol=y1;
  if(delta_x>0)incx=1;
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	9c 83       	std	Y+4, r25	; 0x04
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	02 c0       	rjmp	.+4      	; 0x76a <LCD_GUI_DrawLine+0x72>
  else if(delta_x==0)incx=0;
     766:	1c 82       	std	Y+4, r1	; 0x04
     768:	1b 82       	std	Y+3, r1	; 0x03
  else {incx=-1;delta_x=-delta_x;}
  if(delta_y>0)incy=1;
     76a:	16 14       	cp	r1, r6
     76c:	17 04       	cpc	r1, r7
     76e:	5c f0       	brlt	.+22     	; 0x786 <LCD_GUI_DrawLine+0x8e>
  else if(delta_y==0)incy=0;
     770:	61 14       	cp	r6, r1
     772:	71 04       	cpc	r7, r1
     774:	69 f0       	breq	.+26     	; 0x790 <LCD_GUI_DrawLine+0x98>
  else{incy=-1;delta_y=-delta_y;}
     776:	71 94       	neg	r7
     778:	61 94       	neg	r6
     77a:	71 08       	sbc	r7, r1
     77c:	8f ef       	ldi	r24, 0xFF	; 255
     77e:	9f ef       	ldi	r25, 0xFF	; 255
     780:	9e 83       	std	Y+6, r25	; 0x06
     782:	8d 83       	std	Y+5, r24	; 0x05
     784:	07 c0       	rjmp	.+14     	; 0x794 <LCD_GUI_DrawLine+0x9c>
  uRow=x1;
  uCol=y1;
  if(delta_x>0)incx=1;
  else if(delta_x==0)incx=0;
  else {incx=-1;delta_x=-delta_x;}
  if(delta_y>0)incy=1;
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	9e 83       	std	Y+6, r25	; 0x06
     78c:	8d 83       	std	Y+5, r24	; 0x05
     78e:	02 c0       	rjmp	.+4      	; 0x794 <LCD_GUI_DrawLine+0x9c>
  else if(delta_y==0)incy=0;
     790:	1e 82       	std	Y+6, r1	; 0x06
     792:	1d 82       	std	Y+5, r1	; 0x05
     794:	76 01       	movw	r14, r12
     796:	c6 14       	cp	r12, r6
     798:	d7 04       	cpc	r13, r7
     79a:	0c f4       	brge	.+2      	; 0x79e <LCD_GUI_DrawLine+0xa6>
     79c:	73 01       	movw	r14, r6
  else{incy=-1;delta_y=-delta_y;}
  if( delta_x>delta_y)distance=delta_x;
  else distance=delta_y;
  for(t=0;t<=distance+1;t++ )
     79e:	57 01       	movw	r10, r14
     7a0:	9f ef       	ldi	r25, 0xFF	; 255
     7a2:	a9 1a       	sub	r10, r25
     7a4:	b9 0a       	sbc	r11, r25
}

void LCD_GUI_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t colour)
{
  uint16_t t;
  int xerr=0,yerr=0,delta_x,delta_y,distance;
     7a6:	00 e0       	ldi	r16, 0x00	; 0
     7a8:	10 e0       	ldi	r17, 0x00	; 0
     7aa:	18 86       	std	Y+8, r1	; 0x08
     7ac:	1f 82       	std	Y+7, r1	; 0x07
  if(delta_y>0)incy=1;
  else if(delta_y==0)incy=0;
  else{incy=-1;delta_y=-delta_y;}
  if( delta_x>delta_y)distance=delta_x;
  else distance=delta_y;
  for(t=0;t<=distance+1;t++ )
     7ae:	81 2c       	mov	r8, r1
     7b0:	91 2c       	mov	r9, r1
  {
    LCD_GUI_DrawPoint(uRow, uCol, colour);
     7b2:	49 81       	ldd	r20, Y+1	; 0x01
     7b4:	5a 81       	ldd	r21, Y+2	; 0x02
     7b6:	b2 01       	movw	r22, r4
     7b8:	c1 01       	movw	r24, r2
     7ba:	4a df       	rcall	.-364    	; 0x650 <LCD_GUI_DrawPoint>
    xerr+=delta_x ;
     7bc:	8f 81       	ldd	r24, Y+7	; 0x07
     7be:	98 85       	ldd	r25, Y+8	; 0x08
     7c0:	8c 0d       	add	r24, r12
     7c2:	9d 1d       	adc	r25, r13
     7c4:	98 87       	std	Y+8, r25	; 0x08
     7c6:	8f 83       	std	Y+7, r24	; 0x07
    yerr+=delta_y ;
     7c8:	06 0d       	add	r16, r6
     7ca:	17 1d       	adc	r17, r7
    if(xerr>distance)
     7cc:	e8 16       	cp	r14, r24
     7ce:	f9 06       	cpc	r15, r25
     7d0:	44 f4       	brge	.+16     	; 0x7e2 <LCD_GUI_DrawLine+0xea>
    {
      xerr-=distance;
     7d2:	8e 19       	sub	r24, r14
     7d4:	9f 09       	sbc	r25, r15
     7d6:	98 87       	std	Y+8, r25	; 0x08
     7d8:	8f 83       	std	Y+7, r24	; 0x07
      uRow+=incx;
     7da:	8b 81       	ldd	r24, Y+3	; 0x03
     7dc:	9c 81       	ldd	r25, Y+4	; 0x04
     7de:	28 0e       	add	r2, r24
     7e0:	39 1e       	adc	r3, r25
    }
    if(yerr>distance)
     7e2:	e0 16       	cp	r14, r16
     7e4:	f1 06       	cpc	r15, r17
     7e6:	34 f4       	brge	.+12     	; 0x7f4 <LCD_GUI_DrawLine+0xfc>
    {
      yerr-=distance;
     7e8:	0e 19       	sub	r16, r14
     7ea:	1f 09       	sbc	r17, r15
      uCol+=incy;
     7ec:	8d 81       	ldd	r24, Y+5	; 0x05
     7ee:	9e 81       	ldd	r25, Y+6	; 0x06
     7f0:	48 0e       	add	r4, r24
     7f2:	59 1e       	adc	r5, r25
  if(delta_y>0)incy=1;
  else if(delta_y==0)incy=0;
  else{incy=-1;delta_y=-delta_y;}
  if( delta_x>delta_y)distance=delta_x;
  else distance=delta_y;
  for(t=0;t<=distance+1;t++ )
     7f4:	9f ef       	ldi	r25, 0xFF	; 255
     7f6:	89 1a       	sub	r8, r25
     7f8:	99 0a       	sbc	r9, r25
     7fa:	a8 14       	cp	r10, r8
     7fc:	b9 04       	cpc	r11, r9
     7fe:	c8 f6       	brcc	.-78     	; 0x7b2 <LCD_GUI_DrawLine+0xba>
    {
      yerr-=distance;
      uCol+=incy;
    }
  }
}
     800:	28 96       	adiw	r28, 0x08	; 8
     802:	0f b6       	in	r0, 0x3f	; 63
     804:	f8 94       	cli
     806:	de bf       	out	0x3e, r29	; 62
     808:	0f be       	out	0x3f, r0	; 63
     80a:	cd bf       	out	0x3d, r28	; 61
     80c:	df 91       	pop	r29
     80e:	cf 91       	pop	r28
     810:	1f 91       	pop	r17
     812:	0f 91       	pop	r16
     814:	ff 90       	pop	r15
     816:	ef 90       	pop	r14
     818:	df 90       	pop	r13
     81a:	cf 90       	pop	r12
     81c:	bf 90       	pop	r11
     81e:	af 90       	pop	r10
     820:	9f 90       	pop	r9
     822:	8f 90       	pop	r8
     824:	7f 90       	pop	r7
     826:	6f 90       	pop	r6
     828:	5f 90       	pop	r5
     82a:	4f 90       	pop	r4
     82c:	3f 90       	pop	r3
     82e:	2f 90       	pop	r2
     830:	08 95       	ret

00000832 <LCD_GUI_DrawRectangle>:

void LCD_GUI_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t colour)
{
     832:	8f 92       	push	r8
     834:	9f 92       	push	r9
     836:	af 92       	push	r10
     838:	bf 92       	push	r11
     83a:	cf 92       	push	r12
     83c:	df 92       	push	r13
     83e:	ef 92       	push	r14
     840:	ff 92       	push	r15
     842:	0f 93       	push	r16
     844:	1f 93       	push	r17
     846:	cf 93       	push	r28
     848:	df 93       	push	r29
     84a:	4c 01       	movw	r8, r24
     84c:	7b 01       	movw	r14, r22
     84e:	ea 01       	movw	r28, r20
     850:	69 01       	movw	r12, r18
  LCD_GUI_DrawLine(x1, y1, x2, y1, colour);
     852:	9b 01       	movw	r18, r22
     854:	51 df       	rcall	.-350    	; 0x6f8 <LCD_GUI_DrawLine>
  LCD_GUI_DrawLine(x1, y1, x1, y2, colour);
     856:	96 01       	movw	r18, r12
     858:	a4 01       	movw	r20, r8
     85a:	b7 01       	movw	r22, r14
     85c:	c4 01       	movw	r24, r8
     85e:	4c df       	rcall	.-360    	; 0x6f8 <LCD_GUI_DrawLine>
  LCD_GUI_DrawLine(x1, y2, x2, y2, colour);
     860:	96 01       	movw	r18, r12
     862:	ae 01       	movw	r20, r28
     864:	b6 01       	movw	r22, r12
     866:	c4 01       	movw	r24, r8
     868:	47 df       	rcall	.-370    	; 0x6f8 <LCD_GUI_DrawLine>
  LCD_GUI_DrawLine(x2, y1, x2, y2, colour);
     86a:	96 01       	movw	r18, r12
     86c:	ae 01       	movw	r20, r28
     86e:	b7 01       	movw	r22, r14
     870:	ce 01       	movw	r24, r28
     872:	42 df       	rcall	.-380    	; 0x6f8 <LCD_GUI_DrawLine>
}
     874:	df 91       	pop	r29
     876:	cf 91       	pop	r28
     878:	1f 91       	pop	r17
     87a:	0f 91       	pop	r16
     87c:	ff 90       	pop	r15
     87e:	ef 90       	pop	r14
     880:	df 90       	pop	r13
     882:	cf 90       	pop	r12
     884:	bf 90       	pop	r11
     886:	af 90       	pop	r10
     888:	9f 90       	pop	r9
     88a:	8f 90       	pop	r8
     88c:	08 95       	ret

0000088e <LCD_GUI_DrawFillRectangle>:

void LCD_GUI_DrawFillRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t colour)
{
     88e:	0f 93       	push	r16
     890:	1f 93       	push	r17
  LCD_GUI_Fill(x1, y1, x2, y2, colour);
     892:	e7 de       	rcall	.-562    	; 0x662 <LCD_GUI_Fill>
}
     894:	1f 91       	pop	r17
     896:	0f 91       	pop	r16
     898:	08 95       	ret

0000089a <main>:
  MAGENTA,
  BROWN
};

int main(void)
{
     89a:	cf 93       	push	r28
     89c:	df 93       	push	r29
     89e:	cd b7       	in	r28, 0x3d	; 61
     8a0:	de b7       	in	r29, 0x3e	; 62
     8a2:	c7 55       	subi	r28, 0x57	; 87
     8a4:	d1 09       	sbc	r29, r1
     8a6:	0f b6       	in	r0, 0x3f	; 63
     8a8:	f8 94       	cli
     8aa:	de bf       	out	0x3e, r29	; 62
     8ac:	0f be       	out	0x3f, r0	; 63
     8ae:	cd bf       	out	0x3d, r28	; 61
  USART_init(9600);
     8b0:	80 e8       	ldi	r24, 0x80	; 128
     8b2:	95 e2       	ldi	r25, 0x25	; 37
     8b4:	46 d1       	rcall	.+652    	; 0xb42 <USART_init>
  DS1307_Init();
     8b6:	b4 dc       	rcall	.-1688   	; 0x220 <DS1307_Init>
  LCD_Init();
     8b8:	1f de       	rcall	.-962    	; 0x4f8 <LCD_Init>
  LCD_SetBackLight(100);
     8ba:	84 e6       	ldi	r24, 0x64	; 100
     8bc:	c8 dd       	rcall	.-1136   	; 0x44e <LCD_SetBackLight>
  LCD_direction(LCD_ROTATE_90);
     8be:	81 e0       	ldi	r24, 0x01	; 1
     8c0:	74 dd       	rcall	.-1304   	; 0x3aa <LCD_direction>
     8c2:	0f 2e       	mov	r0, r31
  while (1)
  {
    drawFrame();
    
    DS1307_readDate(&tm);
    sprintf(line1, "DATE:   %2d-%2d-%4d", tm.Date, tm.Month, (tm.Year + 2000));
     8c4:	fe e0       	ldi	r31, 0x0E	; 14
     8c6:	8f 2e       	mov	r8, r31
     8c8:	f2 e0       	ldi	r31, 0x02	; 2
     8ca:	9f 2e       	mov	r9, r31
     8cc:	f0 2d       	mov	r31, r0
     8ce:	5e 01       	movw	r10, r28
     8d0:	88 e0       	ldi	r24, 0x08	; 8
     8d2:	a8 0e       	add	r10, r24
     8d4:	b1 1c       	adc	r11, r1
     8d6:	0f 2e       	mov	r0, r31
    sprintf(line2, "TIME:    %2d:%2d:%2d ", tm.Hour, tm.Minute, tm.Second);
     8d8:	f2 e2       	ldi	r31, 0x22	; 34
     8da:	cf 2e       	mov	r12, r31
     8dc:	f2 e0       	ldi	r31, 0x02	; 2
     8de:	df 2e       	mov	r13, r31
     8e0:	f0 2d       	mov	r31, r0
     8e2:	7e 01       	movw	r14, r28
     8e4:	9c e1       	ldi	r25, 0x1C	; 28
     8e6:	e9 0e       	add	r14, r25
     8e8:	f1 1c       	adc	r15, r1
     8ea:	08 e3       	ldi	r16, 0x38	; 56
    sprintf(line3, "Weekday: %d", tm.Day);
     8ec:	12 e0       	ldi	r17, 0x02	; 2
     8ee:	3e 01       	movw	r6, r28
     8f0:	80 e3       	ldi	r24, 0x30	; 48
     8f2:	68 0e       	add	r6, r24
     8f4:	71 1c       	adc	r7, r1
     8f6:	0f 2e       	mov	r0, r31
    sprintf(line4, "%2d:%2d:%2d ", tm.Hour, tm.Minute, tm.Second);
     8f8:	fb e2       	ldi	r31, 0x2B	; 43
     8fa:	4f 2e       	mov	r4, r31
     8fc:	f2 e0       	ldi	r31, 0x02	; 2
     8fe:	5f 2e       	mov	r5, r31
     900:	f0 2d       	mov	r31, r0
     902:	1e 01       	movw	r2, r28
     904:	94 e4       	ldi	r25, 0x44	; 68
     906:	29 0e       	add	r2, r25
  char line3[20];
  char line4[20];

  while (1)
  {
    drawFrame();
     908:	31 1c       	adc	r3, r1
     90a:	6c d0       	rcall	.+216    	; 0x9e4 <drawFrame>
    
    DS1307_readDate(&tm);
     90c:	ce 01       	movw	r24, r28
     90e:	01 96       	adiw	r24, 0x01	; 1
     910:	91 dc       	rcall	.-1758   	; 0x234 <DS1307_readDate>
     912:	8f 81       	ldd	r24, Y+7	; 0x07
    sprintf(line1, "DATE:   %2d-%2d-%4d", tm.Date, tm.Month, (tm.Year + 2000));
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	80 53       	subi	r24, 0x30	; 48
     918:	98 4f       	sbci	r25, 0xF8	; 248
     91a:	9f 93       	push	r25
     91c:	8f 93       	push	r24
     91e:	8e 81       	ldd	r24, Y+6	; 0x06
     920:	1f 92       	push	r1
     922:	8f 93       	push	r24
     924:	8d 81       	ldd	r24, Y+5	; 0x05
     926:	1f 92       	push	r1
     928:	8f 93       	push	r24
     92a:	9f 92       	push	r9
     92c:	8f 92       	push	r8
     92e:	bf 92       	push	r11
     930:	af 92       	push	r10
     932:	d6 d1       	rcall	.+940    	; 0xce0 <sprintf>
     934:	89 81       	ldd	r24, Y+1	; 0x01
    sprintf(line2, "TIME:    %2d:%2d:%2d ", tm.Hour, tm.Minute, tm.Second);
     936:	1f 92       	push	r1
     938:	8f 93       	push	r24
     93a:	8a 81       	ldd	r24, Y+2	; 0x02
     93c:	1f 92       	push	r1
     93e:	8f 93       	push	r24
     940:	8b 81       	ldd	r24, Y+3	; 0x03
     942:	1f 92       	push	r1
     944:	8f 93       	push	r24
     946:	df 92       	push	r13
     948:	cf 92       	push	r12
     94a:	ff 92       	push	r15
     94c:	ef 92       	push	r14
     94e:	c8 d1       	rcall	.+912    	; 0xce0 <sprintf>
    sprintf(line3, "Weekday: %d", tm.Day);
     950:	8c 81       	ldd	r24, Y+4	; 0x04
     952:	1f 92       	push	r1
     954:	8f 93       	push	r24
     956:	1f 93       	push	r17
     958:	0f 93       	push	r16
     95a:	7f 92       	push	r7
     95c:	6f 92       	push	r6
     95e:	c0 d1       	rcall	.+896    	; 0xce0 <sprintf>
     960:	89 81       	ldd	r24, Y+1	; 0x01
    sprintf(line4, "%2d:%2d:%2d ", tm.Hour, tm.Minute, tm.Second);
     962:	1f 92       	push	r1
     964:	8f 93       	push	r24
     966:	8a 81       	ldd	r24, Y+2	; 0x02
     968:	1f 92       	push	r1
     96a:	8f 93       	push	r24
     96c:	8b 81       	ldd	r24, Y+3	; 0x03
     96e:	1f 92       	push	r1
     970:	8f 93       	push	r24
     972:	5f 92       	push	r5
     974:	4f 92       	push	r4
     976:	3f 92       	push	r3
     978:	2f 92       	push	r2
     97a:	b2 d1       	rcall	.+868    	; 0xce0 <sprintf>
     97c:	0f b6       	in	r0, 0x3f	; 63
     97e:	f8 94       	cli
     980:	de bf       	out	0x3e, r29	; 62
     982:	0f be       	out	0x3f, r0	; 63
     984:	cd bf       	out	0x3d, r28	; 61
     986:	c1 cf       	rjmp	.-126    	; 0x90a <main+0x70>

00000988 <SPI_Master_init>:
     988:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <mIsMasterInitialised>
  SPI_Clock_Polarity_Select(LEADING_EDGE_RISING);
  SPI_Clock_Phase_Select(LEADING_EDGE_SAMPLE);
  SPI_Clock_Rate(SPI_CLOCK_RATE_8MHz);
  SPI_enable();

  mIsSlaveInitialised = true;
     98c:	90 91 5a 02 	lds	r25, 0x025A	; 0x80025a <mIsMasterInitialised+0x1>
     990:	89 2b       	or	r24, r25
     992:	09 f5       	brne	.+66     	; 0x9d6 <SPI_Master_init+0x4e>
     994:	84 b1       	in	r24, 0x04	; 4
     996:	87 60       	ori	r24, 0x07	; 7
     998:	84 b9       	out	0x04, r24	; 4
     99a:	8c b5       	in	r24, 0x2c	; 44
     99c:	80 61       	ori	r24, 0x10	; 16
     99e:	8c bd       	out	0x2c, r24	; 44
     9a0:	8c b5       	in	r24, 0x2c	; 44
     9a2:	8f 7d       	andi	r24, 0xDF	; 223
     9a4:	8c bd       	out	0x2c, r24	; 44
     9a6:	8c b5       	in	r24, 0x2c	; 44
     9a8:	87 7f       	andi	r24, 0xF7	; 247
     9aa:	8c bd       	out	0x2c, r24	; 44
     9ac:	8c b5       	in	r24, 0x2c	; 44
     9ae:	8b 7f       	andi	r24, 0xFB	; 251
     9b0:	8c bd       	out	0x2c, r24	; 44
     9b2:	8c b5       	in	r24, 0x2c	; 44
     9b4:	8d 7f       	andi	r24, 0xFD	; 253
     9b6:	8c bd       	out	0x2c, r24	; 44
     9b8:	8c b5       	in	r24, 0x2c	; 44
     9ba:	8e 7f       	andi	r24, 0xFE	; 254
     9bc:	8c bd       	out	0x2c, r24	; 44
     9be:	8d b5       	in	r24, 0x2d	; 45
     9c0:	81 60       	ori	r24, 0x01	; 1
     9c2:	8d bd       	out	0x2d, r24	; 45
     9c4:	8c b5       	in	r24, 0x2c	; 44
     9c6:	80 64       	ori	r24, 0x40	; 64
     9c8:	8c bd       	out	0x2c, r24	; 44
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	90 93 5a 02 	sts	0x025A, r25	; 0x80025a <mIsMasterInitialised+0x1>
     9d2:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <mIsMasterInitialised>
     9d6:	08 95       	ret

000009d8 <SPI_Master_transmit>:
}

//Need to select slave before sending the data
char SPI_Master_transmit(char data)
{
  SPDR = data;
     9d8:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & (1<<SPIF))) {};
     9da:	0d b4       	in	r0, 0x2d	; 45
     9dc:	07 fe       	sbrs	r0, 7
     9de:	fd cf       	rjmp	.-6      	; 0x9da <SPI_Master_transmit+0x2>
  return SPDR;
     9e0:	8e b5       	in	r24, 0x2e	; 46
}
     9e2:	08 95       	ret

000009e4 <drawFrame>:
  .frame_colour = WHITE,
  .frame_bg     = BLACK,
};

void drawFrame(void)
{
     9e4:	0f 93       	push	r16
     9e6:	1f 93       	push	r17
     9e8:	cf 93       	push	r28
     9ea:	df 93       	push	r29
  LCD_GUI_DrawRectangle(TetrisFrame.frame_x1, 
     9ec:	c0 e0       	ldi	r28, 0x00	; 0
     9ee:	d2 e0       	ldi	r29, 0x02	; 2
     9f0:	0a 85       	ldd	r16, Y+10	; 0x0a
     9f2:	1b 85       	ldd	r17, Y+11	; 0x0b
     9f4:	2e 81       	ldd	r18, Y+6	; 0x06
     9f6:	3f 81       	ldd	r19, Y+7	; 0x07
     9f8:	4c 81       	ldd	r20, Y+4	; 0x04
     9fa:	5d 81       	ldd	r21, Y+5	; 0x05
     9fc:	6a 81       	ldd	r22, Y+2	; 0x02
     9fe:	7b 81       	ldd	r23, Y+3	; 0x03
     a00:	88 81       	ld	r24, Y
     a02:	99 81       	ldd	r25, Y+1	; 0x01
     a04:	16 df       	rcall	.-468    	; 0x832 <LCD_GUI_DrawRectangle>
                        TetrisFrame.frame_colour);

  LCD_GUI_DrawRectangle(TetrisFrame.frame_x1 + TetrisFrame.frame_thickness,
                        TetrisFrame.frame_y1 + TetrisFrame.frame_thickness,
                        TetrisFrame.frame_x2 - TetrisFrame.frame_thickness,
                        TetrisFrame.frame_y2 - TetrisFrame.frame_thickness,
     a06:	88 85       	ldd	r24, Y+8	; 0x08
     a08:	99 85       	ldd	r25, Y+9	; 0x09
                        TetrisFrame.frame_y1, 
                        TetrisFrame.frame_x2, 
                        TetrisFrame.frame_y2, 
                        TetrisFrame.frame_colour);

  LCD_GUI_DrawRectangle(TetrisFrame.frame_x1 + TetrisFrame.frame_thickness,
     a0a:	0a 85       	ldd	r16, Y+10	; 0x0a
     a0c:	1b 85       	ldd	r17, Y+11	; 0x0b
     a0e:	2e 81       	ldd	r18, Y+6	; 0x06
     a10:	3f 81       	ldd	r19, Y+7	; 0x07
     a12:	28 1b       	sub	r18, r24
     a14:	39 0b       	sbc	r19, r25
     a16:	4c 81       	ldd	r20, Y+4	; 0x04
     a18:	5d 81       	ldd	r21, Y+5	; 0x05
     a1a:	48 1b       	sub	r20, r24
     a1c:	59 0b       	sbc	r21, r25
     a1e:	6a 81       	ldd	r22, Y+2	; 0x02
     a20:	7b 81       	ldd	r23, Y+3	; 0x03
     a22:	68 0f       	add	r22, r24
     a24:	79 1f       	adc	r23, r25
     a26:	e8 81       	ld	r30, Y
     a28:	f9 81       	ldd	r31, Y+1	; 0x01
     a2a:	8e 0f       	add	r24, r30
     a2c:	9f 1f       	adc	r25, r31
     a2e:	01 df       	rcall	.-510    	; 0x832 <LCD_GUI_DrawRectangle>
                        TetrisFrame.frame_colour);

  LCD_GUI_DrawFillRectangle(TetrisFrame.frame_x1 + TetrisFrame.frame_thickness + 1,
                            TetrisFrame.frame_y1 + TetrisFrame.frame_thickness + 1,
                            TetrisFrame.frame_x2 - TetrisFrame.frame_thickness - 1,
                            TetrisFrame.frame_y2 - TetrisFrame.frame_thickness - 1,
     a30:	88 85       	ldd	r24, Y+8	; 0x08
     a32:	99 85       	ldd	r25, Y+9	; 0x09
                        TetrisFrame.frame_y1 + TetrisFrame.frame_thickness,
                        TetrisFrame.frame_x2 - TetrisFrame.frame_thickness,
                        TetrisFrame.frame_y2 - TetrisFrame.frame_thickness,
                        TetrisFrame.frame_colour);

  LCD_GUI_DrawFillRectangle(TetrisFrame.frame_x1 + TetrisFrame.frame_thickness + 1,
     a34:	0c 85       	ldd	r16, Y+12	; 0x0c
     a36:	1d 85       	ldd	r17, Y+13	; 0x0d
     a38:	2e 81       	ldd	r18, Y+6	; 0x06
     a3a:	3f 81       	ldd	r19, Y+7	; 0x07
     a3c:	21 50       	subi	r18, 0x01	; 1
     a3e:	31 09       	sbc	r19, r1
     a40:	28 1b       	sub	r18, r24
     a42:	39 0b       	sbc	r19, r25
     a44:	4c 81       	ldd	r20, Y+4	; 0x04
     a46:	5d 81       	ldd	r21, Y+5	; 0x05
     a48:	41 50       	subi	r20, 0x01	; 1
     a4a:	51 09       	sbc	r21, r1
     a4c:	48 1b       	sub	r20, r24
     a4e:	59 0b       	sbc	r21, r25
     a50:	6a 81       	ldd	r22, Y+2	; 0x02
     a52:	7b 81       	ldd	r23, Y+3	; 0x03
     a54:	68 0f       	add	r22, r24
     a56:	79 1f       	adc	r23, r25
     a58:	6f 5f       	subi	r22, 0xFF	; 255
     a5a:	7f 4f       	sbci	r23, 0xFF	; 255
     a5c:	e8 81       	ld	r30, Y
     a5e:	f9 81       	ldd	r31, Y+1	; 0x01
     a60:	8e 0f       	add	r24, r30
     a62:	9f 1f       	adc	r25, r31
     a64:	01 96       	adiw	r24, 0x01	; 1
     a66:	13 df       	rcall	.-474    	; 0x88e <LCD_GUI_DrawFillRectangle>
                            TetrisFrame.frame_y2 - TetrisFrame.frame_thickness - 1,
                            TetrisFrame.frame_bg);



}
     a68:	df 91       	pop	r29
     a6a:	cf 91       	pop	r28
     a6c:	1f 91       	pop	r17
     a6e:	0f 91       	pop	r16
     a70:	08 95       	ret

00000a72 <TWI_init>:
			while(TWCR & (1<<TWSTO));							//wait until stop condition is executed and bus released
			continue;
		}				
		break;													//if status != TW_MT_SLA_ACK, 		
	}
}
     a72:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <mInitialised>
     a76:	81 11       	cpse	r24, r1
     a78:	0b c0       	rjmp	.+22     	; 0xa90 <TWI_init+0x1e>
     a7a:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     a7e:	8c e0       	ldi	r24, 0x0C	; 12
     a80:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
     a84:	84 e0       	ldi	r24, 0x04	; 4
     a86:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     a8a:	81 e0       	ldi	r24, 0x01	; 1
     a8c:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <mInitialised>
     a90:	08 95       	ret

00000a92 <TWIStart>:
     a92:	94 ea       	ldi	r25, 0xA4	; 164
     a94:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     a98:	ec eb       	ldi	r30, 0xBC	; 188
     a9a:	f0 e0       	ldi	r31, 0x00	; 0
     a9c:	90 81       	ld	r25, Z
     a9e:	99 23       	and	r25, r25
     aa0:	ec f7       	brge	.-6      	; 0xa9c <TWIStart+0xa>
     aa2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     aa6:	98 7f       	andi	r25, 0xF8	; 248
     aa8:	98 30       	cpi	r25, 0x08	; 8
     aaa:	11 f0       	breq	.+4      	; 0xab0 <TWIStart+0x1e>
     aac:	90 31       	cpi	r25, 0x10	; 16
     aae:	a1 f4       	brne	.+40     	; 0xad8 <TWIStart+0x46>
     ab0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     ab4:	84 e8       	ldi	r24, 0x84	; 132
     ab6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     aba:	ec eb       	ldi	r30, 0xBC	; 188
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	80 81       	ld	r24, Z
     ac0:	88 23       	and	r24, r24
     ac2:	ec f7       	brge	.-6      	; 0xabe <TWIStart+0x2c>
     ac4:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     ac8:	98 7f       	andi	r25, 0xF8	; 248
     aca:	98 31       	cpi	r25, 0x18	; 24
     acc:	39 f0       	breq	.+14     	; 0xadc <TWIStart+0x4a>
     ace:	81 e0       	ldi	r24, 0x01	; 1
     ad0:	90 34       	cpi	r25, 0x40	; 64
     ad2:	29 f4       	brne	.+10     	; 0xade <TWIStart+0x4c>
     ad4:	80 e0       	ldi	r24, 0x00	; 0
     ad6:	08 95       	ret
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	08 95       	ret
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	08 95       	ret

00000ae0 <TWIStop>:



void TWIStop(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);					//Send the stop condition
     ae0:	84 e9       	ldi	r24, 0x94	; 148
     ae2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	while (TWCR & (1<<TWSTO));								//Wait until stop condition is excecuted and bus released
     ae6:	ec eb       	ldi	r30, 0xBC	; 188
     ae8:	f0 e0       	ldi	r31, 0x00	; 0
     aea:	80 81       	ld	r24, Z
     aec:	84 fd       	sbrc	r24, 4
     aee:	fd cf       	rjmp	.-6      	; 0xaea <TWIStop+0xa>
}
     af0:	08 95       	ret

00000af2 <TWIWrite>:

uint8_t TWIWrite(uint8_t u8data)
{
	uint8_t status;
	
	TWDR = u8data;										//load the TW data register with the byte	
     af2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWCR = (1<<TWINT)|(1<<TWEN);						
     af6:	84 e8       	ldi	r24, 0x84	; 132
     af8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	while ((TWCR & (1<<TWINT)) == 0);					//wait for the transmission to complete
     afc:	ec eb       	ldi	r30, 0xBC	; 188
     afe:	f0 e0       	ldi	r31, 0x00	; 0
     b00:	80 81       	ld	r24, Z
     b02:	88 23       	and	r24, r24
     b04:	ec f7       	brge	.-6      	; 0xb00 <TWIWrite+0xe>
	
	status = TW_STATUS & 0xF8;							//check if start carried out successfully, Mask prescaler bits
     b06:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     b0a:	98 7f       	andi	r25, 0xF8	; 248
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	98 32       	cpi	r25, 0x28	; 40
     b10:	09 f4       	brne	.+2      	; 0xb14 <TWIWrite+0x22>
     b12:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 1;
	}
	
	return 0;
}
     b14:	08 95       	ret

00000b16 <TWIReadACK>:



uint8_t TWIReadACK(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
     b16:	84 ec       	ldi	r24, 0xC4	; 196
     b18:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	while ((TWCR & (1<<TWINT)) == 0);
     b1c:	ec eb       	ldi	r30, 0xBC	; 188
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	80 81       	ld	r24, Z
     b22:	88 23       	and	r24, r24
     b24:	ec f7       	brge	.-6      	; 0xb20 <TWIReadACK+0xa>
	return TWDR;
     b26:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
}
     b2a:	08 95       	ret

00000b2c <TWIReadNACK>:



uint8_t TWIReadNACK(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN);
     b2c:	84 e8       	ldi	r24, 0x84	; 132
     b2e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	while ((TWCR & (1<<TWINT)) == 0);
     b32:	ec eb       	ldi	r30, 0xBC	; 188
     b34:	f0 e0       	ldi	r31, 0x00	; 0
     b36:	80 81       	ld	r24, Z
     b38:	88 23       	and	r24, r24
     b3a:	ec f7       	brge	.-6      	; 0xb36 <TWIReadNACK+0xa>
	return TWDR;
     b3c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     b40:	08 95       	ret

00000b42 <USART_init>:
long USART_received_Int(void)
{
	long number;
	number = atol(Rx_buffer);
	return number;
}
     b42:	a0 e0       	ldi	r26, 0x00	; 0
     b44:	b0 e0       	ldi	r27, 0x00	; 0
     b46:	88 0f       	add	r24, r24
     b48:	99 1f       	adc	r25, r25
     b4a:	aa 1f       	adc	r26, r26
     b4c:	bb 1f       	adc	r27, r27
     b4e:	88 0f       	add	r24, r24
     b50:	99 1f       	adc	r25, r25
     b52:	aa 1f       	adc	r26, r26
     b54:	bb 1f       	adc	r27, r27
     b56:	9c 01       	movw	r18, r24
     b58:	ad 01       	movw	r20, r26
     b5a:	22 0f       	add	r18, r18
     b5c:	33 1f       	adc	r19, r19
     b5e:	44 1f       	adc	r20, r20
     b60:	55 1f       	adc	r21, r21
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	60 e0       	ldi	r22, 0x00	; 0
     b6c:	74 e2       	ldi	r23, 0x24	; 36
     b6e:	84 ef       	ldi	r24, 0xF4	; 244
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	80 d0       	rcall	.+256    	; 0xc74 <__udivmodsi4>
     b74:	21 50       	subi	r18, 0x01	; 1
     b76:	31 09       	sbc	r19, r1
     b78:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
     b7c:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
     b80:	e1 ec       	ldi	r30, 0xC1	; 193
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	80 81       	ld	r24, Z
     b86:	88 61       	ori	r24, 0x18	; 24
     b88:	80 83       	st	Z, r24
     b8a:	80 81       	ld	r24, Z
     b8c:	80 68       	ori	r24, 0x80	; 128
     b8e:	80 83       	st	Z, r24
     b90:	e2 ec       	ldi	r30, 0xC2	; 194
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	80 81       	ld	r24, Z
     b96:	86 60       	ori	r24, 0x06	; 6
     b98:	80 83       	st	Z, r24
     b9a:	78 94       	sei
     b9c:	08 95       	ret

00000b9e <USART_putstring>:
     b9e:	cf 93       	push	r28
     ba0:	df 93       	push	r29
     ba2:	fc 01       	movw	r30, r24
     ba4:	20 81       	ld	r18, Z
     ba6:	22 23       	and	r18, r18
     ba8:	69 f0       	breq	.+26     	; 0xbc4 <USART_putstring+0x26>
     baa:	dc 01       	movw	r26, r24
     bac:	11 96       	adiw	r26, 0x01	; 1
     bae:	e0 ec       	ldi	r30, 0xC0	; 192
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	c6 ec       	ldi	r28, 0xC6	; 198
     bb4:	d0 e0       	ldi	r29, 0x00	; 0
     bb6:	90 81       	ld	r25, Z
     bb8:	95 ff       	sbrs	r25, 5
     bba:	fd cf       	rjmp	.-6      	; 0xbb6 <USART_putstring+0x18>
     bbc:	28 83       	st	Y, r18
     bbe:	2d 91       	ld	r18, X+
     bc0:	21 11       	cpse	r18, r1
     bc2:	f9 cf       	rjmp	.-14     	; 0xbb6 <USART_putstring+0x18>
     bc4:	df 91       	pop	r29
     bc6:	cf 91       	pop	r28
     bc8:	08 95       	ret

00000bca <__vector_25>:
  while (!(UCSR0A & (1 << UDRE0)));  //wait until UDRE0 is set
  UDR0 = data;
}

ISR(USART0_RX_vect)
{
     bca:	1f 92       	push	r1
     bcc:	0f 92       	push	r0
     bce:	0f b6       	in	r0, 0x3f	; 63
     bd0:	0f 92       	push	r0
     bd2:	11 24       	eor	r1, r1
     bd4:	0b b6       	in	r0, 0x3b	; 59
     bd6:	0f 92       	push	r0
     bd8:	2f 93       	push	r18
     bda:	3f 93       	push	r19
     bdc:	4f 93       	push	r20
     bde:	5f 93       	push	r21
     be0:	6f 93       	push	r22
     be2:	7f 93       	push	r23
     be4:	8f 93       	push	r24
     be6:	9f 93       	push	r25
     be8:	af 93       	push	r26
     bea:	bf 93       	push	r27
     bec:	ef 93       	push	r30
     bee:	ff 93       	push	r31
	char ReceivedByte;
	ReceivedByte = UDR0; // Fetch the received byte value into the variable "ByteReceived"
     bf0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	//UDR0 = ReceivedByte; // Echo back the received byte back to the computer
	Rx_buffer[Rx_buffer_index++] = ReceivedByte;
     bf4:	e0 91 5c 02 	lds	r30, 0x025C	; 0x80025c <Rx_buffer_index>
     bf8:	91 e0       	ldi	r25, 0x01	; 1
     bfa:	9e 0f       	add	r25, r30
     bfc:	90 93 5c 02 	sts	0x025C, r25	; 0x80025c <Rx_buffer_index>
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	e5 56       	subi	r30, 0x65	; 101
     c04:	fd 4f       	sbci	r31, 0xFD	; 253
     c06:	80 83       	st	Z, r24
	if (ReceivedByte == '\n') 
     c08:	8a 30       	cpi	r24, 0x0A	; 10
     c0a:	71 f4       	brne	.+28     	; 0xc28 <__vector_25+0x5e>
	{
		Rx_buffer[Rx_buffer_index] = 0; //put zero to terminate the string array
     c0c:	e0 91 5c 02 	lds	r30, 0x025C	; 0x80025c <Rx_buffer_index>
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	e5 56       	subi	r30, 0x65	; 101
     c14:	fd 4f       	sbci	r31, 0xFD	; 253
     c16:	10 82       	st	Z, r1
		USART_putstring("[Rx echo]: ");
     c18:	8b e4       	ldi	r24, 0x4B	; 75
     c1a:	92 e0       	ldi	r25, 0x02	; 2
     c1c:	c0 df       	rcall	.-128    	; 0xb9e <USART_putstring>
		USART_putstring(Rx_buffer);
     c1e:	8b e9       	ldi	r24, 0x9B	; 155
     c20:	92 e0       	ldi	r25, 0x02	; 2
     c22:	bd df       	rcall	.-134    	; 0xb9e <USART_putstring>
		Rx_buffer_index = 0;
     c24:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <Rx_buffer_index>
		ReceivedByte = 0x00;
	}
}
     c28:	ff 91       	pop	r31
     c2a:	ef 91       	pop	r30
     c2c:	bf 91       	pop	r27
     c2e:	af 91       	pop	r26
     c30:	9f 91       	pop	r25
     c32:	8f 91       	pop	r24
     c34:	7f 91       	pop	r23
     c36:	6f 91       	pop	r22
     c38:	5f 91       	pop	r21
     c3a:	4f 91       	pop	r20
     c3c:	3f 91       	pop	r19
     c3e:	2f 91       	pop	r18
     c40:	0f 90       	pop	r0
     c42:	0b be       	out	0x3b, r0	; 59
     c44:	0f 90       	pop	r0
     c46:	0f be       	out	0x3f, r0	; 63
     c48:	0f 90       	pop	r0
     c4a:	1f 90       	pop	r1
     c4c:	18 95       	reti

00000c4e <__divmodhi4>:
     c4e:	97 fb       	bst	r25, 7
     c50:	07 2e       	mov	r0, r23
     c52:	16 f4       	brtc	.+4      	; 0xc58 <__divmodhi4+0xa>
     c54:	00 94       	com	r0
     c56:	06 d0       	rcall	.+12     	; 0xc64 <__divmodhi4_neg1>
     c58:	77 fd       	sbrc	r23, 7
     c5a:	08 d0       	rcall	.+16     	; 0xc6c <__divmodhi4_neg2>
     c5c:	2d d0       	rcall	.+90     	; 0xcb8 <__udivmodhi4>
     c5e:	07 fc       	sbrc	r0, 7
     c60:	05 d0       	rcall	.+10     	; 0xc6c <__divmodhi4_neg2>
     c62:	3e f4       	brtc	.+14     	; 0xc72 <__divmodhi4_exit>

00000c64 <__divmodhi4_neg1>:
     c64:	90 95       	com	r25
     c66:	81 95       	neg	r24
     c68:	9f 4f       	sbci	r25, 0xFF	; 255
     c6a:	08 95       	ret

00000c6c <__divmodhi4_neg2>:
     c6c:	70 95       	com	r23
     c6e:	61 95       	neg	r22
     c70:	7f 4f       	sbci	r23, 0xFF	; 255

00000c72 <__divmodhi4_exit>:
     c72:	08 95       	ret

00000c74 <__udivmodsi4>:
     c74:	a1 e2       	ldi	r26, 0x21	; 33
     c76:	1a 2e       	mov	r1, r26
     c78:	aa 1b       	sub	r26, r26
     c7a:	bb 1b       	sub	r27, r27
     c7c:	fd 01       	movw	r30, r26
     c7e:	0d c0       	rjmp	.+26     	; 0xc9a <__udivmodsi4_ep>

00000c80 <__udivmodsi4_loop>:
     c80:	aa 1f       	adc	r26, r26
     c82:	bb 1f       	adc	r27, r27
     c84:	ee 1f       	adc	r30, r30
     c86:	ff 1f       	adc	r31, r31
     c88:	a2 17       	cp	r26, r18
     c8a:	b3 07       	cpc	r27, r19
     c8c:	e4 07       	cpc	r30, r20
     c8e:	f5 07       	cpc	r31, r21
     c90:	20 f0       	brcs	.+8      	; 0xc9a <__udivmodsi4_ep>
     c92:	a2 1b       	sub	r26, r18
     c94:	b3 0b       	sbc	r27, r19
     c96:	e4 0b       	sbc	r30, r20
     c98:	f5 0b       	sbc	r31, r21

00000c9a <__udivmodsi4_ep>:
     c9a:	66 1f       	adc	r22, r22
     c9c:	77 1f       	adc	r23, r23
     c9e:	88 1f       	adc	r24, r24
     ca0:	99 1f       	adc	r25, r25
     ca2:	1a 94       	dec	r1
     ca4:	69 f7       	brne	.-38     	; 0xc80 <__udivmodsi4_loop>
     ca6:	60 95       	com	r22
     ca8:	70 95       	com	r23
     caa:	80 95       	com	r24
     cac:	90 95       	com	r25
     cae:	9b 01       	movw	r18, r22
     cb0:	ac 01       	movw	r20, r24
     cb2:	bd 01       	movw	r22, r26
     cb4:	cf 01       	movw	r24, r30
     cb6:	08 95       	ret

00000cb8 <__udivmodhi4>:
     cb8:	aa 1b       	sub	r26, r26
     cba:	bb 1b       	sub	r27, r27
     cbc:	51 e1       	ldi	r21, 0x11	; 17
     cbe:	07 c0       	rjmp	.+14     	; 0xcce <__udivmodhi4_ep>

00000cc0 <__udivmodhi4_loop>:
     cc0:	aa 1f       	adc	r26, r26
     cc2:	bb 1f       	adc	r27, r27
     cc4:	a6 17       	cp	r26, r22
     cc6:	b7 07       	cpc	r27, r23
     cc8:	10 f0       	brcs	.+4      	; 0xcce <__udivmodhi4_ep>
     cca:	a6 1b       	sub	r26, r22
     ccc:	b7 0b       	sbc	r27, r23

00000cce <__udivmodhi4_ep>:
     cce:	88 1f       	adc	r24, r24
     cd0:	99 1f       	adc	r25, r25
     cd2:	5a 95       	dec	r21
     cd4:	a9 f7       	brne	.-22     	; 0xcc0 <__udivmodhi4_loop>
     cd6:	80 95       	com	r24
     cd8:	90 95       	com	r25
     cda:	bc 01       	movw	r22, r24
     cdc:	cd 01       	movw	r24, r26
     cde:	08 95       	ret

00000ce0 <sprintf>:
     ce0:	0f 93       	push	r16
     ce2:	1f 93       	push	r17
     ce4:	cf 93       	push	r28
     ce6:	df 93       	push	r29
     ce8:	cd b7       	in	r28, 0x3d	; 61
     cea:	de b7       	in	r29, 0x3e	; 62
     cec:	2e 97       	sbiw	r28, 0x0e	; 14
     cee:	0f b6       	in	r0, 0x3f	; 63
     cf0:	f8 94       	cli
     cf2:	de bf       	out	0x3e, r29	; 62
     cf4:	0f be       	out	0x3f, r0	; 63
     cf6:	cd bf       	out	0x3d, r28	; 61
     cf8:	0e 89       	ldd	r16, Y+22	; 0x16
     cfa:	1f 89       	ldd	r17, Y+23	; 0x17
     cfc:	86 e0       	ldi	r24, 0x06	; 6
     cfe:	8c 83       	std	Y+4, r24	; 0x04
     d00:	1a 83       	std	Y+2, r17	; 0x02
     d02:	09 83       	std	Y+1, r16	; 0x01
     d04:	8f ef       	ldi	r24, 0xFF	; 255
     d06:	9f e7       	ldi	r25, 0x7F	; 127
     d08:	9e 83       	std	Y+6, r25	; 0x06
     d0a:	8d 83       	std	Y+5, r24	; 0x05
     d0c:	ae 01       	movw	r20, r28
     d0e:	46 5e       	subi	r20, 0xE6	; 230
     d10:	5f 4f       	sbci	r21, 0xFF	; 255
     d12:	68 8d       	ldd	r22, Y+24	; 0x18
     d14:	79 8d       	ldd	r23, Y+25	; 0x19
     d16:	ce 01       	movw	r24, r28
     d18:	01 96       	adiw	r24, 0x01	; 1
     d1a:	10 d0       	rcall	.+32     	; 0xd3c <vfprintf>
     d1c:	ef 81       	ldd	r30, Y+7	; 0x07
     d1e:	f8 85       	ldd	r31, Y+8	; 0x08
     d20:	e0 0f       	add	r30, r16
     d22:	f1 1f       	adc	r31, r17
     d24:	10 82       	st	Z, r1
     d26:	2e 96       	adiw	r28, 0x0e	; 14
     d28:	0f b6       	in	r0, 0x3f	; 63
     d2a:	f8 94       	cli
     d2c:	de bf       	out	0x3e, r29	; 62
     d2e:	0f be       	out	0x3f, r0	; 63
     d30:	cd bf       	out	0x3d, r28	; 61
     d32:	df 91       	pop	r29
     d34:	cf 91       	pop	r28
     d36:	1f 91       	pop	r17
     d38:	0f 91       	pop	r16
     d3a:	08 95       	ret

00000d3c <vfprintf>:
     d3c:	2f 92       	push	r2
     d3e:	3f 92       	push	r3
     d40:	4f 92       	push	r4
     d42:	5f 92       	push	r5
     d44:	6f 92       	push	r6
     d46:	7f 92       	push	r7
     d48:	8f 92       	push	r8
     d4a:	9f 92       	push	r9
     d4c:	af 92       	push	r10
     d4e:	bf 92       	push	r11
     d50:	cf 92       	push	r12
     d52:	df 92       	push	r13
     d54:	ef 92       	push	r14
     d56:	ff 92       	push	r15
     d58:	0f 93       	push	r16
     d5a:	1f 93       	push	r17
     d5c:	cf 93       	push	r28
     d5e:	df 93       	push	r29
     d60:	cd b7       	in	r28, 0x3d	; 61
     d62:	de b7       	in	r29, 0x3e	; 62
     d64:	2b 97       	sbiw	r28, 0x0b	; 11
     d66:	0f b6       	in	r0, 0x3f	; 63
     d68:	f8 94       	cli
     d6a:	de bf       	out	0x3e, r29	; 62
     d6c:	0f be       	out	0x3f, r0	; 63
     d6e:	cd bf       	out	0x3d, r28	; 61
     d70:	6c 01       	movw	r12, r24
     d72:	7b 01       	movw	r14, r22
     d74:	8a 01       	movw	r16, r20
     d76:	fc 01       	movw	r30, r24
     d78:	17 82       	std	Z+7, r1	; 0x07
     d7a:	16 82       	std	Z+6, r1	; 0x06
     d7c:	83 81       	ldd	r24, Z+3	; 0x03
     d7e:	81 ff       	sbrs	r24, 1
     d80:	bf c1       	rjmp	.+894    	; 0x1100 <vfprintf+0x3c4>
     d82:	ce 01       	movw	r24, r28
     d84:	01 96       	adiw	r24, 0x01	; 1
     d86:	3c 01       	movw	r6, r24
     d88:	f6 01       	movw	r30, r12
     d8a:	93 81       	ldd	r25, Z+3	; 0x03
     d8c:	f7 01       	movw	r30, r14
     d8e:	93 fd       	sbrc	r25, 3
     d90:	85 91       	lpm	r24, Z+
     d92:	93 ff       	sbrs	r25, 3
     d94:	81 91       	ld	r24, Z+
     d96:	7f 01       	movw	r14, r30
     d98:	88 23       	and	r24, r24
     d9a:	09 f4       	brne	.+2      	; 0xd9e <vfprintf+0x62>
     d9c:	ad c1       	rjmp	.+858    	; 0x10f8 <vfprintf+0x3bc>
     d9e:	85 32       	cpi	r24, 0x25	; 37
     da0:	39 f4       	brne	.+14     	; 0xdb0 <vfprintf+0x74>
     da2:	93 fd       	sbrc	r25, 3
     da4:	85 91       	lpm	r24, Z+
     da6:	93 ff       	sbrs	r25, 3
     da8:	81 91       	ld	r24, Z+
     daa:	7f 01       	movw	r14, r30
     dac:	85 32       	cpi	r24, 0x25	; 37
     dae:	21 f4       	brne	.+8      	; 0xdb8 <vfprintf+0x7c>
     db0:	b6 01       	movw	r22, r12
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	d6 d1       	rcall	.+940    	; 0x1162 <fputc>
     db6:	e8 cf       	rjmp	.-48     	; 0xd88 <vfprintf+0x4c>
     db8:	91 2c       	mov	r9, r1
     dba:	21 2c       	mov	r2, r1
     dbc:	31 2c       	mov	r3, r1
     dbe:	ff e1       	ldi	r31, 0x1F	; 31
     dc0:	f3 15       	cp	r31, r3
     dc2:	d8 f0       	brcs	.+54     	; 0xdfa <vfprintf+0xbe>
     dc4:	8b 32       	cpi	r24, 0x2B	; 43
     dc6:	79 f0       	breq	.+30     	; 0xde6 <vfprintf+0xaa>
     dc8:	38 f4       	brcc	.+14     	; 0xdd8 <vfprintf+0x9c>
     dca:	80 32       	cpi	r24, 0x20	; 32
     dcc:	79 f0       	breq	.+30     	; 0xdec <vfprintf+0xb0>
     dce:	83 32       	cpi	r24, 0x23	; 35
     dd0:	a1 f4       	brne	.+40     	; 0xdfa <vfprintf+0xbe>
     dd2:	23 2d       	mov	r18, r3
     dd4:	20 61       	ori	r18, 0x10	; 16
     dd6:	1d c0       	rjmp	.+58     	; 0xe12 <vfprintf+0xd6>
     dd8:	8d 32       	cpi	r24, 0x2D	; 45
     dda:	61 f0       	breq	.+24     	; 0xdf4 <vfprintf+0xb8>
     ddc:	80 33       	cpi	r24, 0x30	; 48
     dde:	69 f4       	brne	.+26     	; 0xdfa <vfprintf+0xbe>
     de0:	23 2d       	mov	r18, r3
     de2:	21 60       	ori	r18, 0x01	; 1
     de4:	16 c0       	rjmp	.+44     	; 0xe12 <vfprintf+0xd6>
     de6:	83 2d       	mov	r24, r3
     de8:	82 60       	ori	r24, 0x02	; 2
     dea:	38 2e       	mov	r3, r24
     dec:	e3 2d       	mov	r30, r3
     dee:	e4 60       	ori	r30, 0x04	; 4
     df0:	3e 2e       	mov	r3, r30
     df2:	2a c0       	rjmp	.+84     	; 0xe48 <vfprintf+0x10c>
     df4:	f3 2d       	mov	r31, r3
     df6:	f8 60       	ori	r31, 0x08	; 8
     df8:	1d c0       	rjmp	.+58     	; 0xe34 <vfprintf+0xf8>
     dfa:	37 fc       	sbrc	r3, 7
     dfc:	2d c0       	rjmp	.+90     	; 0xe58 <vfprintf+0x11c>
     dfe:	20 ed       	ldi	r18, 0xD0	; 208
     e00:	28 0f       	add	r18, r24
     e02:	2a 30       	cpi	r18, 0x0A	; 10
     e04:	40 f0       	brcs	.+16     	; 0xe16 <vfprintf+0xda>
     e06:	8e 32       	cpi	r24, 0x2E	; 46
     e08:	b9 f4       	brne	.+46     	; 0xe38 <vfprintf+0xfc>
     e0a:	36 fc       	sbrc	r3, 6
     e0c:	75 c1       	rjmp	.+746    	; 0x10f8 <vfprintf+0x3bc>
     e0e:	23 2d       	mov	r18, r3
     e10:	20 64       	ori	r18, 0x40	; 64
     e12:	32 2e       	mov	r3, r18
     e14:	19 c0       	rjmp	.+50     	; 0xe48 <vfprintf+0x10c>
     e16:	36 fe       	sbrs	r3, 6
     e18:	06 c0       	rjmp	.+12     	; 0xe26 <vfprintf+0xea>
     e1a:	8a e0       	ldi	r24, 0x0A	; 10
     e1c:	98 9e       	mul	r9, r24
     e1e:	20 0d       	add	r18, r0
     e20:	11 24       	eor	r1, r1
     e22:	92 2e       	mov	r9, r18
     e24:	11 c0       	rjmp	.+34     	; 0xe48 <vfprintf+0x10c>
     e26:	ea e0       	ldi	r30, 0x0A	; 10
     e28:	2e 9e       	mul	r2, r30
     e2a:	20 0d       	add	r18, r0
     e2c:	11 24       	eor	r1, r1
     e2e:	22 2e       	mov	r2, r18
     e30:	f3 2d       	mov	r31, r3
     e32:	f0 62       	ori	r31, 0x20	; 32
     e34:	3f 2e       	mov	r3, r31
     e36:	08 c0       	rjmp	.+16     	; 0xe48 <vfprintf+0x10c>
     e38:	8c 36       	cpi	r24, 0x6C	; 108
     e3a:	21 f4       	brne	.+8      	; 0xe44 <vfprintf+0x108>
     e3c:	83 2d       	mov	r24, r3
     e3e:	80 68       	ori	r24, 0x80	; 128
     e40:	38 2e       	mov	r3, r24
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <vfprintf+0x10c>
     e44:	88 36       	cpi	r24, 0x68	; 104
     e46:	41 f4       	brne	.+16     	; 0xe58 <vfprintf+0x11c>
     e48:	f7 01       	movw	r30, r14
     e4a:	93 fd       	sbrc	r25, 3
     e4c:	85 91       	lpm	r24, Z+
     e4e:	93 ff       	sbrs	r25, 3
     e50:	81 91       	ld	r24, Z+
     e52:	7f 01       	movw	r14, r30
     e54:	81 11       	cpse	r24, r1
     e56:	b3 cf       	rjmp	.-154    	; 0xdbe <vfprintf+0x82>
     e58:	98 2f       	mov	r25, r24
     e5a:	9f 7d       	andi	r25, 0xDF	; 223
     e5c:	95 54       	subi	r25, 0x45	; 69
     e5e:	93 30       	cpi	r25, 0x03	; 3
     e60:	28 f4       	brcc	.+10     	; 0xe6c <vfprintf+0x130>
     e62:	0c 5f       	subi	r16, 0xFC	; 252
     e64:	1f 4f       	sbci	r17, 0xFF	; 255
     e66:	9f e3       	ldi	r25, 0x3F	; 63
     e68:	99 83       	std	Y+1, r25	; 0x01
     e6a:	0d c0       	rjmp	.+26     	; 0xe86 <vfprintf+0x14a>
     e6c:	83 36       	cpi	r24, 0x63	; 99
     e6e:	31 f0       	breq	.+12     	; 0xe7c <vfprintf+0x140>
     e70:	83 37       	cpi	r24, 0x73	; 115
     e72:	71 f0       	breq	.+28     	; 0xe90 <vfprintf+0x154>
     e74:	83 35       	cpi	r24, 0x53	; 83
     e76:	09 f0       	breq	.+2      	; 0xe7a <vfprintf+0x13e>
     e78:	55 c0       	rjmp	.+170    	; 0xf24 <vfprintf+0x1e8>
     e7a:	20 c0       	rjmp	.+64     	; 0xebc <vfprintf+0x180>
     e7c:	f8 01       	movw	r30, r16
     e7e:	80 81       	ld	r24, Z
     e80:	89 83       	std	Y+1, r24	; 0x01
     e82:	0e 5f       	subi	r16, 0xFE	; 254
     e84:	1f 4f       	sbci	r17, 0xFF	; 255
     e86:	88 24       	eor	r8, r8
     e88:	83 94       	inc	r8
     e8a:	91 2c       	mov	r9, r1
     e8c:	53 01       	movw	r10, r6
     e8e:	12 c0       	rjmp	.+36     	; 0xeb4 <vfprintf+0x178>
     e90:	28 01       	movw	r4, r16
     e92:	f2 e0       	ldi	r31, 0x02	; 2
     e94:	4f 0e       	add	r4, r31
     e96:	51 1c       	adc	r5, r1
     e98:	f8 01       	movw	r30, r16
     e9a:	a0 80       	ld	r10, Z
     e9c:	b1 80       	ldd	r11, Z+1	; 0x01
     e9e:	36 fe       	sbrs	r3, 6
     ea0:	03 c0       	rjmp	.+6      	; 0xea8 <vfprintf+0x16c>
     ea2:	69 2d       	mov	r22, r9
     ea4:	70 e0       	ldi	r23, 0x00	; 0
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <vfprintf+0x170>
     ea8:	6f ef       	ldi	r22, 0xFF	; 255
     eaa:	7f ef       	ldi	r23, 0xFF	; 255
     eac:	c5 01       	movw	r24, r10
     eae:	4e d1       	rcall	.+668    	; 0x114c <strnlen>
     eb0:	4c 01       	movw	r8, r24
     eb2:	82 01       	movw	r16, r4
     eb4:	f3 2d       	mov	r31, r3
     eb6:	ff 77       	andi	r31, 0x7F	; 127
     eb8:	3f 2e       	mov	r3, r31
     eba:	15 c0       	rjmp	.+42     	; 0xee6 <vfprintf+0x1aa>
     ebc:	28 01       	movw	r4, r16
     ebe:	22 e0       	ldi	r18, 0x02	; 2
     ec0:	42 0e       	add	r4, r18
     ec2:	51 1c       	adc	r5, r1
     ec4:	f8 01       	movw	r30, r16
     ec6:	a0 80       	ld	r10, Z
     ec8:	b1 80       	ldd	r11, Z+1	; 0x01
     eca:	36 fe       	sbrs	r3, 6
     ecc:	03 c0       	rjmp	.+6      	; 0xed4 <vfprintf+0x198>
     ece:	69 2d       	mov	r22, r9
     ed0:	70 e0       	ldi	r23, 0x00	; 0
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <vfprintf+0x19c>
     ed4:	6f ef       	ldi	r22, 0xFF	; 255
     ed6:	7f ef       	ldi	r23, 0xFF	; 255
     ed8:	c5 01       	movw	r24, r10
     eda:	2d d1       	rcall	.+602    	; 0x1136 <strnlen_P>
     edc:	4c 01       	movw	r8, r24
     ede:	f3 2d       	mov	r31, r3
     ee0:	f0 68       	ori	r31, 0x80	; 128
     ee2:	3f 2e       	mov	r3, r31
     ee4:	82 01       	movw	r16, r4
     ee6:	33 fc       	sbrc	r3, 3
     ee8:	19 c0       	rjmp	.+50     	; 0xf1c <vfprintf+0x1e0>
     eea:	82 2d       	mov	r24, r2
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	88 16       	cp	r8, r24
     ef0:	99 06       	cpc	r9, r25
     ef2:	a0 f4       	brcc	.+40     	; 0xf1c <vfprintf+0x1e0>
     ef4:	b6 01       	movw	r22, r12
     ef6:	80 e2       	ldi	r24, 0x20	; 32
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	33 d1       	rcall	.+614    	; 0x1162 <fputc>
     efc:	2a 94       	dec	r2
     efe:	f5 cf       	rjmp	.-22     	; 0xeea <vfprintf+0x1ae>
     f00:	f5 01       	movw	r30, r10
     f02:	37 fc       	sbrc	r3, 7
     f04:	85 91       	lpm	r24, Z+
     f06:	37 fe       	sbrs	r3, 7
     f08:	81 91       	ld	r24, Z+
     f0a:	5f 01       	movw	r10, r30
     f0c:	b6 01       	movw	r22, r12
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	28 d1       	rcall	.+592    	; 0x1162 <fputc>
     f12:	21 10       	cpse	r2, r1
     f14:	2a 94       	dec	r2
     f16:	21 e0       	ldi	r18, 0x01	; 1
     f18:	82 1a       	sub	r8, r18
     f1a:	91 08       	sbc	r9, r1
     f1c:	81 14       	cp	r8, r1
     f1e:	91 04       	cpc	r9, r1
     f20:	79 f7       	brne	.-34     	; 0xf00 <vfprintf+0x1c4>
     f22:	e1 c0       	rjmp	.+450    	; 0x10e6 <vfprintf+0x3aa>
     f24:	84 36       	cpi	r24, 0x64	; 100
     f26:	11 f0       	breq	.+4      	; 0xf2c <vfprintf+0x1f0>
     f28:	89 36       	cpi	r24, 0x69	; 105
     f2a:	39 f5       	brne	.+78     	; 0xf7a <vfprintf+0x23e>
     f2c:	f8 01       	movw	r30, r16
     f2e:	37 fe       	sbrs	r3, 7
     f30:	07 c0       	rjmp	.+14     	; 0xf40 <vfprintf+0x204>
     f32:	60 81       	ld	r22, Z
     f34:	71 81       	ldd	r23, Z+1	; 0x01
     f36:	82 81       	ldd	r24, Z+2	; 0x02
     f38:	93 81       	ldd	r25, Z+3	; 0x03
     f3a:	0c 5f       	subi	r16, 0xFC	; 252
     f3c:	1f 4f       	sbci	r17, 0xFF	; 255
     f3e:	08 c0       	rjmp	.+16     	; 0xf50 <vfprintf+0x214>
     f40:	60 81       	ld	r22, Z
     f42:	71 81       	ldd	r23, Z+1	; 0x01
     f44:	07 2e       	mov	r0, r23
     f46:	00 0c       	add	r0, r0
     f48:	88 0b       	sbc	r24, r24
     f4a:	99 0b       	sbc	r25, r25
     f4c:	0e 5f       	subi	r16, 0xFE	; 254
     f4e:	1f 4f       	sbci	r17, 0xFF	; 255
     f50:	f3 2d       	mov	r31, r3
     f52:	ff 76       	andi	r31, 0x6F	; 111
     f54:	3f 2e       	mov	r3, r31
     f56:	97 ff       	sbrs	r25, 7
     f58:	09 c0       	rjmp	.+18     	; 0xf6c <vfprintf+0x230>
     f5a:	90 95       	com	r25
     f5c:	80 95       	com	r24
     f5e:	70 95       	com	r23
     f60:	61 95       	neg	r22
     f62:	7f 4f       	sbci	r23, 0xFF	; 255
     f64:	8f 4f       	sbci	r24, 0xFF	; 255
     f66:	9f 4f       	sbci	r25, 0xFF	; 255
     f68:	f0 68       	ori	r31, 0x80	; 128
     f6a:	3f 2e       	mov	r3, r31
     f6c:	2a e0       	ldi	r18, 0x0A	; 10
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	a3 01       	movw	r20, r6
     f72:	33 d1       	rcall	.+614    	; 0x11da <__ultoa_invert>
     f74:	88 2e       	mov	r8, r24
     f76:	86 18       	sub	r8, r6
     f78:	44 c0       	rjmp	.+136    	; 0x1002 <vfprintf+0x2c6>
     f7a:	85 37       	cpi	r24, 0x75	; 117
     f7c:	31 f4       	brne	.+12     	; 0xf8a <vfprintf+0x24e>
     f7e:	23 2d       	mov	r18, r3
     f80:	2f 7e       	andi	r18, 0xEF	; 239
     f82:	b2 2e       	mov	r11, r18
     f84:	2a e0       	ldi	r18, 0x0A	; 10
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	25 c0       	rjmp	.+74     	; 0xfd4 <vfprintf+0x298>
     f8a:	93 2d       	mov	r25, r3
     f8c:	99 7f       	andi	r25, 0xF9	; 249
     f8e:	b9 2e       	mov	r11, r25
     f90:	8f 36       	cpi	r24, 0x6F	; 111
     f92:	c1 f0       	breq	.+48     	; 0xfc4 <vfprintf+0x288>
     f94:	18 f4       	brcc	.+6      	; 0xf9c <vfprintf+0x260>
     f96:	88 35       	cpi	r24, 0x58	; 88
     f98:	79 f0       	breq	.+30     	; 0xfb8 <vfprintf+0x27c>
     f9a:	ae c0       	rjmp	.+348    	; 0x10f8 <vfprintf+0x3bc>
     f9c:	80 37       	cpi	r24, 0x70	; 112
     f9e:	19 f0       	breq	.+6      	; 0xfa6 <vfprintf+0x26a>
     fa0:	88 37       	cpi	r24, 0x78	; 120
     fa2:	21 f0       	breq	.+8      	; 0xfac <vfprintf+0x270>
     fa4:	a9 c0       	rjmp	.+338    	; 0x10f8 <vfprintf+0x3bc>
     fa6:	e9 2f       	mov	r30, r25
     fa8:	e0 61       	ori	r30, 0x10	; 16
     faa:	be 2e       	mov	r11, r30
     fac:	b4 fe       	sbrs	r11, 4
     fae:	0d c0       	rjmp	.+26     	; 0xfca <vfprintf+0x28e>
     fb0:	fb 2d       	mov	r31, r11
     fb2:	f4 60       	ori	r31, 0x04	; 4
     fb4:	bf 2e       	mov	r11, r31
     fb6:	09 c0       	rjmp	.+18     	; 0xfca <vfprintf+0x28e>
     fb8:	34 fe       	sbrs	r3, 4
     fba:	0a c0       	rjmp	.+20     	; 0xfd0 <vfprintf+0x294>
     fbc:	29 2f       	mov	r18, r25
     fbe:	26 60       	ori	r18, 0x06	; 6
     fc0:	b2 2e       	mov	r11, r18
     fc2:	06 c0       	rjmp	.+12     	; 0xfd0 <vfprintf+0x294>
     fc4:	28 e0       	ldi	r18, 0x08	; 8
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	05 c0       	rjmp	.+10     	; 0xfd4 <vfprintf+0x298>
     fca:	20 e1       	ldi	r18, 0x10	; 16
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	02 c0       	rjmp	.+4      	; 0xfd4 <vfprintf+0x298>
     fd0:	20 e1       	ldi	r18, 0x10	; 16
     fd2:	32 e0       	ldi	r19, 0x02	; 2
     fd4:	f8 01       	movw	r30, r16
     fd6:	b7 fe       	sbrs	r11, 7
     fd8:	07 c0       	rjmp	.+14     	; 0xfe8 <vfprintf+0x2ac>
     fda:	60 81       	ld	r22, Z
     fdc:	71 81       	ldd	r23, Z+1	; 0x01
     fde:	82 81       	ldd	r24, Z+2	; 0x02
     fe0:	93 81       	ldd	r25, Z+3	; 0x03
     fe2:	0c 5f       	subi	r16, 0xFC	; 252
     fe4:	1f 4f       	sbci	r17, 0xFF	; 255
     fe6:	06 c0       	rjmp	.+12     	; 0xff4 <vfprintf+0x2b8>
     fe8:	60 81       	ld	r22, Z
     fea:	71 81       	ldd	r23, Z+1	; 0x01
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	0e 5f       	subi	r16, 0xFE	; 254
     ff2:	1f 4f       	sbci	r17, 0xFF	; 255
     ff4:	a3 01       	movw	r20, r6
     ff6:	f1 d0       	rcall	.+482    	; 0x11da <__ultoa_invert>
     ff8:	88 2e       	mov	r8, r24
     ffa:	86 18       	sub	r8, r6
     ffc:	fb 2d       	mov	r31, r11
     ffe:	ff 77       	andi	r31, 0x7F	; 127
    1000:	3f 2e       	mov	r3, r31
    1002:	36 fe       	sbrs	r3, 6
    1004:	0d c0       	rjmp	.+26     	; 0x1020 <vfprintf+0x2e4>
    1006:	23 2d       	mov	r18, r3
    1008:	2e 7f       	andi	r18, 0xFE	; 254
    100a:	a2 2e       	mov	r10, r18
    100c:	89 14       	cp	r8, r9
    100e:	58 f4       	brcc	.+22     	; 0x1026 <vfprintf+0x2ea>
    1010:	34 fe       	sbrs	r3, 4
    1012:	0b c0       	rjmp	.+22     	; 0x102a <vfprintf+0x2ee>
    1014:	32 fc       	sbrc	r3, 2
    1016:	09 c0       	rjmp	.+18     	; 0x102a <vfprintf+0x2ee>
    1018:	83 2d       	mov	r24, r3
    101a:	8e 7e       	andi	r24, 0xEE	; 238
    101c:	a8 2e       	mov	r10, r24
    101e:	05 c0       	rjmp	.+10     	; 0x102a <vfprintf+0x2ee>
    1020:	b8 2c       	mov	r11, r8
    1022:	a3 2c       	mov	r10, r3
    1024:	03 c0       	rjmp	.+6      	; 0x102c <vfprintf+0x2f0>
    1026:	b8 2c       	mov	r11, r8
    1028:	01 c0       	rjmp	.+2      	; 0x102c <vfprintf+0x2f0>
    102a:	b9 2c       	mov	r11, r9
    102c:	a4 fe       	sbrs	r10, 4
    102e:	0f c0       	rjmp	.+30     	; 0x104e <vfprintf+0x312>
    1030:	fe 01       	movw	r30, r28
    1032:	e8 0d       	add	r30, r8
    1034:	f1 1d       	adc	r31, r1
    1036:	80 81       	ld	r24, Z
    1038:	80 33       	cpi	r24, 0x30	; 48
    103a:	21 f4       	brne	.+8      	; 0x1044 <vfprintf+0x308>
    103c:	9a 2d       	mov	r25, r10
    103e:	99 7e       	andi	r25, 0xE9	; 233
    1040:	a9 2e       	mov	r10, r25
    1042:	09 c0       	rjmp	.+18     	; 0x1056 <vfprintf+0x31a>
    1044:	a2 fe       	sbrs	r10, 2
    1046:	06 c0       	rjmp	.+12     	; 0x1054 <vfprintf+0x318>
    1048:	b3 94       	inc	r11
    104a:	b3 94       	inc	r11
    104c:	04 c0       	rjmp	.+8      	; 0x1056 <vfprintf+0x31a>
    104e:	8a 2d       	mov	r24, r10
    1050:	86 78       	andi	r24, 0x86	; 134
    1052:	09 f0       	breq	.+2      	; 0x1056 <vfprintf+0x31a>
    1054:	b3 94       	inc	r11
    1056:	a3 fc       	sbrc	r10, 3
    1058:	10 c0       	rjmp	.+32     	; 0x107a <vfprintf+0x33e>
    105a:	a0 fe       	sbrs	r10, 0
    105c:	06 c0       	rjmp	.+12     	; 0x106a <vfprintf+0x32e>
    105e:	b2 14       	cp	r11, r2
    1060:	80 f4       	brcc	.+32     	; 0x1082 <vfprintf+0x346>
    1062:	28 0c       	add	r2, r8
    1064:	92 2c       	mov	r9, r2
    1066:	9b 18       	sub	r9, r11
    1068:	0d c0       	rjmp	.+26     	; 0x1084 <vfprintf+0x348>
    106a:	b2 14       	cp	r11, r2
    106c:	58 f4       	brcc	.+22     	; 0x1084 <vfprintf+0x348>
    106e:	b6 01       	movw	r22, r12
    1070:	80 e2       	ldi	r24, 0x20	; 32
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	76 d0       	rcall	.+236    	; 0x1162 <fputc>
    1076:	b3 94       	inc	r11
    1078:	f8 cf       	rjmp	.-16     	; 0x106a <vfprintf+0x32e>
    107a:	b2 14       	cp	r11, r2
    107c:	18 f4       	brcc	.+6      	; 0x1084 <vfprintf+0x348>
    107e:	2b 18       	sub	r2, r11
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <vfprintf+0x34a>
    1082:	98 2c       	mov	r9, r8
    1084:	21 2c       	mov	r2, r1
    1086:	a4 fe       	sbrs	r10, 4
    1088:	0f c0       	rjmp	.+30     	; 0x10a8 <vfprintf+0x36c>
    108a:	b6 01       	movw	r22, r12
    108c:	80 e3       	ldi	r24, 0x30	; 48
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	68 d0       	rcall	.+208    	; 0x1162 <fputc>
    1092:	a2 fe       	sbrs	r10, 2
    1094:	16 c0       	rjmp	.+44     	; 0x10c2 <vfprintf+0x386>
    1096:	a1 fc       	sbrc	r10, 1
    1098:	03 c0       	rjmp	.+6      	; 0x10a0 <vfprintf+0x364>
    109a:	88 e7       	ldi	r24, 0x78	; 120
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <vfprintf+0x368>
    10a0:	88 e5       	ldi	r24, 0x58	; 88
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	b6 01       	movw	r22, r12
    10a6:	0c c0       	rjmp	.+24     	; 0x10c0 <vfprintf+0x384>
    10a8:	8a 2d       	mov	r24, r10
    10aa:	86 78       	andi	r24, 0x86	; 134
    10ac:	51 f0       	breq	.+20     	; 0x10c2 <vfprintf+0x386>
    10ae:	a1 fe       	sbrs	r10, 1
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <vfprintf+0x37a>
    10b2:	8b e2       	ldi	r24, 0x2B	; 43
    10b4:	01 c0       	rjmp	.+2      	; 0x10b8 <vfprintf+0x37c>
    10b6:	80 e2       	ldi	r24, 0x20	; 32
    10b8:	a7 fc       	sbrc	r10, 7
    10ba:	8d e2       	ldi	r24, 0x2D	; 45
    10bc:	b6 01       	movw	r22, r12
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	50 d0       	rcall	.+160    	; 0x1162 <fputc>
    10c2:	89 14       	cp	r8, r9
    10c4:	30 f4       	brcc	.+12     	; 0x10d2 <vfprintf+0x396>
    10c6:	b6 01       	movw	r22, r12
    10c8:	80 e3       	ldi	r24, 0x30	; 48
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	4a d0       	rcall	.+148    	; 0x1162 <fputc>
    10ce:	9a 94       	dec	r9
    10d0:	f8 cf       	rjmp	.-16     	; 0x10c2 <vfprintf+0x386>
    10d2:	8a 94       	dec	r8
    10d4:	f3 01       	movw	r30, r6
    10d6:	e8 0d       	add	r30, r8
    10d8:	f1 1d       	adc	r31, r1
    10da:	80 81       	ld	r24, Z
    10dc:	b6 01       	movw	r22, r12
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	40 d0       	rcall	.+128    	; 0x1162 <fputc>
    10e2:	81 10       	cpse	r8, r1
    10e4:	f6 cf       	rjmp	.-20     	; 0x10d2 <vfprintf+0x396>
    10e6:	22 20       	and	r2, r2
    10e8:	09 f4       	brne	.+2      	; 0x10ec <vfprintf+0x3b0>
    10ea:	4e ce       	rjmp	.-868    	; 0xd88 <vfprintf+0x4c>
    10ec:	b6 01       	movw	r22, r12
    10ee:	80 e2       	ldi	r24, 0x20	; 32
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	37 d0       	rcall	.+110    	; 0x1162 <fputc>
    10f4:	2a 94       	dec	r2
    10f6:	f7 cf       	rjmp	.-18     	; 0x10e6 <vfprintf+0x3aa>
    10f8:	f6 01       	movw	r30, r12
    10fa:	86 81       	ldd	r24, Z+6	; 0x06
    10fc:	97 81       	ldd	r25, Z+7	; 0x07
    10fe:	02 c0       	rjmp	.+4      	; 0x1104 <vfprintf+0x3c8>
    1100:	8f ef       	ldi	r24, 0xFF	; 255
    1102:	9f ef       	ldi	r25, 0xFF	; 255
    1104:	2b 96       	adiw	r28, 0x0b	; 11
    1106:	0f b6       	in	r0, 0x3f	; 63
    1108:	f8 94       	cli
    110a:	de bf       	out	0x3e, r29	; 62
    110c:	0f be       	out	0x3f, r0	; 63
    110e:	cd bf       	out	0x3d, r28	; 61
    1110:	df 91       	pop	r29
    1112:	cf 91       	pop	r28
    1114:	1f 91       	pop	r17
    1116:	0f 91       	pop	r16
    1118:	ff 90       	pop	r15
    111a:	ef 90       	pop	r14
    111c:	df 90       	pop	r13
    111e:	cf 90       	pop	r12
    1120:	bf 90       	pop	r11
    1122:	af 90       	pop	r10
    1124:	9f 90       	pop	r9
    1126:	8f 90       	pop	r8
    1128:	7f 90       	pop	r7
    112a:	6f 90       	pop	r6
    112c:	5f 90       	pop	r5
    112e:	4f 90       	pop	r4
    1130:	3f 90       	pop	r3
    1132:	2f 90       	pop	r2
    1134:	08 95       	ret

00001136 <strnlen_P>:
    1136:	fc 01       	movw	r30, r24
    1138:	05 90       	lpm	r0, Z+
    113a:	61 50       	subi	r22, 0x01	; 1
    113c:	70 40       	sbci	r23, 0x00	; 0
    113e:	01 10       	cpse	r0, r1
    1140:	d8 f7       	brcc	.-10     	; 0x1138 <strnlen_P+0x2>
    1142:	80 95       	com	r24
    1144:	90 95       	com	r25
    1146:	8e 0f       	add	r24, r30
    1148:	9f 1f       	adc	r25, r31
    114a:	08 95       	ret

0000114c <strnlen>:
    114c:	fc 01       	movw	r30, r24
    114e:	61 50       	subi	r22, 0x01	; 1
    1150:	70 40       	sbci	r23, 0x00	; 0
    1152:	01 90       	ld	r0, Z+
    1154:	01 10       	cpse	r0, r1
    1156:	d8 f7       	brcc	.-10     	; 0x114e <strnlen+0x2>
    1158:	80 95       	com	r24
    115a:	90 95       	com	r25
    115c:	8e 0f       	add	r24, r30
    115e:	9f 1f       	adc	r25, r31
    1160:	08 95       	ret

00001162 <fputc>:
    1162:	0f 93       	push	r16
    1164:	1f 93       	push	r17
    1166:	cf 93       	push	r28
    1168:	df 93       	push	r29
    116a:	fb 01       	movw	r30, r22
    116c:	23 81       	ldd	r18, Z+3	; 0x03
    116e:	21 fd       	sbrc	r18, 1
    1170:	03 c0       	rjmp	.+6      	; 0x1178 <fputc+0x16>
    1172:	8f ef       	ldi	r24, 0xFF	; 255
    1174:	9f ef       	ldi	r25, 0xFF	; 255
    1176:	2c c0       	rjmp	.+88     	; 0x11d0 <fputc+0x6e>
    1178:	22 ff       	sbrs	r18, 2
    117a:	16 c0       	rjmp	.+44     	; 0x11a8 <fputc+0x46>
    117c:	46 81       	ldd	r20, Z+6	; 0x06
    117e:	57 81       	ldd	r21, Z+7	; 0x07
    1180:	24 81       	ldd	r18, Z+4	; 0x04
    1182:	35 81       	ldd	r19, Z+5	; 0x05
    1184:	42 17       	cp	r20, r18
    1186:	53 07       	cpc	r21, r19
    1188:	44 f4       	brge	.+16     	; 0x119a <fputc+0x38>
    118a:	a0 81       	ld	r26, Z
    118c:	b1 81       	ldd	r27, Z+1	; 0x01
    118e:	9d 01       	movw	r18, r26
    1190:	2f 5f       	subi	r18, 0xFF	; 255
    1192:	3f 4f       	sbci	r19, 0xFF	; 255
    1194:	31 83       	std	Z+1, r19	; 0x01
    1196:	20 83       	st	Z, r18
    1198:	8c 93       	st	X, r24
    119a:	26 81       	ldd	r18, Z+6	; 0x06
    119c:	37 81       	ldd	r19, Z+7	; 0x07
    119e:	2f 5f       	subi	r18, 0xFF	; 255
    11a0:	3f 4f       	sbci	r19, 0xFF	; 255
    11a2:	37 83       	std	Z+7, r19	; 0x07
    11a4:	26 83       	std	Z+6, r18	; 0x06
    11a6:	14 c0       	rjmp	.+40     	; 0x11d0 <fputc+0x6e>
    11a8:	8b 01       	movw	r16, r22
    11aa:	ec 01       	movw	r28, r24
    11ac:	fb 01       	movw	r30, r22
    11ae:	00 84       	ldd	r0, Z+8	; 0x08
    11b0:	f1 85       	ldd	r31, Z+9	; 0x09
    11b2:	e0 2d       	mov	r30, r0
    11b4:	19 95       	eicall
    11b6:	89 2b       	or	r24, r25
    11b8:	e1 f6       	brne	.-72     	; 0x1172 <fputc+0x10>
    11ba:	d8 01       	movw	r26, r16
    11bc:	16 96       	adiw	r26, 0x06	; 6
    11be:	8d 91       	ld	r24, X+
    11c0:	9c 91       	ld	r25, X
    11c2:	17 97       	sbiw	r26, 0x07	; 7
    11c4:	01 96       	adiw	r24, 0x01	; 1
    11c6:	17 96       	adiw	r26, 0x07	; 7
    11c8:	9c 93       	st	X, r25
    11ca:	8e 93       	st	-X, r24
    11cc:	16 97       	sbiw	r26, 0x06	; 6
    11ce:	ce 01       	movw	r24, r28
    11d0:	df 91       	pop	r29
    11d2:	cf 91       	pop	r28
    11d4:	1f 91       	pop	r17
    11d6:	0f 91       	pop	r16
    11d8:	08 95       	ret

000011da <__ultoa_invert>:
    11da:	fa 01       	movw	r30, r20
    11dc:	aa 27       	eor	r26, r26
    11de:	28 30       	cpi	r18, 0x08	; 8
    11e0:	51 f1       	breq	.+84     	; 0x1236 <__ultoa_invert+0x5c>
    11e2:	20 31       	cpi	r18, 0x10	; 16
    11e4:	81 f1       	breq	.+96     	; 0x1246 <__ultoa_invert+0x6c>
    11e6:	e8 94       	clt
    11e8:	6f 93       	push	r22
    11ea:	6e 7f       	andi	r22, 0xFE	; 254
    11ec:	6e 5f       	subi	r22, 0xFE	; 254
    11ee:	7f 4f       	sbci	r23, 0xFF	; 255
    11f0:	8f 4f       	sbci	r24, 0xFF	; 255
    11f2:	9f 4f       	sbci	r25, 0xFF	; 255
    11f4:	af 4f       	sbci	r26, 0xFF	; 255
    11f6:	b1 e0       	ldi	r27, 0x01	; 1
    11f8:	3e d0       	rcall	.+124    	; 0x1276 <__ultoa_invert+0x9c>
    11fa:	b4 e0       	ldi	r27, 0x04	; 4
    11fc:	3c d0       	rcall	.+120    	; 0x1276 <__ultoa_invert+0x9c>
    11fe:	67 0f       	add	r22, r23
    1200:	78 1f       	adc	r23, r24
    1202:	89 1f       	adc	r24, r25
    1204:	9a 1f       	adc	r25, r26
    1206:	a1 1d       	adc	r26, r1
    1208:	68 0f       	add	r22, r24
    120a:	79 1f       	adc	r23, r25
    120c:	8a 1f       	adc	r24, r26
    120e:	91 1d       	adc	r25, r1
    1210:	a1 1d       	adc	r26, r1
    1212:	6a 0f       	add	r22, r26
    1214:	71 1d       	adc	r23, r1
    1216:	81 1d       	adc	r24, r1
    1218:	91 1d       	adc	r25, r1
    121a:	a1 1d       	adc	r26, r1
    121c:	20 d0       	rcall	.+64     	; 0x125e <__ultoa_invert+0x84>
    121e:	09 f4       	brne	.+2      	; 0x1222 <__ultoa_invert+0x48>
    1220:	68 94       	set
    1222:	3f 91       	pop	r19
    1224:	2a e0       	ldi	r18, 0x0A	; 10
    1226:	26 9f       	mul	r18, r22
    1228:	11 24       	eor	r1, r1
    122a:	30 19       	sub	r19, r0
    122c:	30 5d       	subi	r19, 0xD0	; 208
    122e:	31 93       	st	Z+, r19
    1230:	de f6       	brtc	.-74     	; 0x11e8 <__ultoa_invert+0xe>
    1232:	cf 01       	movw	r24, r30
    1234:	08 95       	ret
    1236:	46 2f       	mov	r20, r22
    1238:	47 70       	andi	r20, 0x07	; 7
    123a:	40 5d       	subi	r20, 0xD0	; 208
    123c:	41 93       	st	Z+, r20
    123e:	b3 e0       	ldi	r27, 0x03	; 3
    1240:	0f d0       	rcall	.+30     	; 0x1260 <__ultoa_invert+0x86>
    1242:	c9 f7       	brne	.-14     	; 0x1236 <__ultoa_invert+0x5c>
    1244:	f6 cf       	rjmp	.-20     	; 0x1232 <__ultoa_invert+0x58>
    1246:	46 2f       	mov	r20, r22
    1248:	4f 70       	andi	r20, 0x0F	; 15
    124a:	40 5d       	subi	r20, 0xD0	; 208
    124c:	4a 33       	cpi	r20, 0x3A	; 58
    124e:	18 f0       	brcs	.+6      	; 0x1256 <__ultoa_invert+0x7c>
    1250:	49 5d       	subi	r20, 0xD9	; 217
    1252:	31 fd       	sbrc	r19, 1
    1254:	40 52       	subi	r20, 0x20	; 32
    1256:	41 93       	st	Z+, r20
    1258:	02 d0       	rcall	.+4      	; 0x125e <__ultoa_invert+0x84>
    125a:	a9 f7       	brne	.-22     	; 0x1246 <__ultoa_invert+0x6c>
    125c:	ea cf       	rjmp	.-44     	; 0x1232 <__ultoa_invert+0x58>
    125e:	b4 e0       	ldi	r27, 0x04	; 4
    1260:	a6 95       	lsr	r26
    1262:	97 95       	ror	r25
    1264:	87 95       	ror	r24
    1266:	77 95       	ror	r23
    1268:	67 95       	ror	r22
    126a:	ba 95       	dec	r27
    126c:	c9 f7       	brne	.-14     	; 0x1260 <__ultoa_invert+0x86>
    126e:	00 97       	sbiw	r24, 0x00	; 0
    1270:	61 05       	cpc	r22, r1
    1272:	71 05       	cpc	r23, r1
    1274:	08 95       	ret
    1276:	9b 01       	movw	r18, r22
    1278:	ac 01       	movw	r20, r24
    127a:	0a 2e       	mov	r0, r26
    127c:	06 94       	lsr	r0
    127e:	57 95       	ror	r21
    1280:	47 95       	ror	r20
    1282:	37 95       	ror	r19
    1284:	27 95       	ror	r18
    1286:	ba 95       	dec	r27
    1288:	c9 f7       	brne	.-14     	; 0x127c <__ultoa_invert+0xa2>
    128a:	62 0f       	add	r22, r18
    128c:	73 1f       	adc	r23, r19
    128e:	84 1f       	adc	r24, r20
    1290:	95 1f       	adc	r25, r21
    1292:	a0 1d       	adc	r26, r0
    1294:	08 95       	ret

00001296 <_exit>:
    1296:	f8 94       	cli

00001298 <__stop_program>:
    1298:	ff cf       	rjmp	.-2      	; 0x1298 <__stop_program>
