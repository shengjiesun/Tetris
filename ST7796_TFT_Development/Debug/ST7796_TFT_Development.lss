
ST7796_TFT_Development.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000069a  00800200  00001cf4  00001d88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001cf4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000029b  0080089a  0080089a  00002422  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002422  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002480  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a0  00000000  00000000  000024c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004864  00000000  00000000  00002760  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000193d  00000000  00000000  00006fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001c86  00000000  00000000  00008901  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ba0  00000000  00000000  0000a588  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001140  00000000  00000000  0000b128  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003b46  00000000  00000000  0000c268  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000378  00000000  00000000  0000fdae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	84 c0       	rjmp	.+264    	; 0x166 <__vector_23>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	86 c5       	rjmp	.+2828   	; 0xb72 <__vector_25>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	18 e0       	ldi	r17, 0x08	; 8
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e4 ef       	ldi	r30, 0xF4	; 244
      fc:	fc e1       	ldi	r31, 0x1C	; 28
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	aa 39       	cpi	r26, 0x9A	; 154
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	2b e0       	ldi	r18, 0x0B	; 11
     110:	aa e9       	ldi	r26, 0x9A	; 154
     112:	b8 e0       	ldi	r27, 0x08	; 8
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a5 33       	cpi	r26, 0x35	; 53
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	6b d5       	rcall	.+2774   	; 0xbf6 <main>
     120:	0c 94 78 0e 	jmp	0x1cf0	; 0x1cf0 <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <timer0_init>:
	bit 2 = 0
	
	WGM01 = 0     "Normal" timer/counter mode
	WGM00 = 0
	*/
	TCCR0A = 0b00000000;
     126:	14 bc       	out	0x24, r1	; 36
	
	CS02 = 0
	CS01 = 1      clock / 64 = 250kHz -> /256 -> 1024us per overflow
	CS00 = 1
	*/
	TCCR0B = 0b00000011;
     128:	83 e0       	ldi	r24, 0x03	; 3
     12a:	85 bd       	out	0x25, r24	; 37
	bit 3 = 0
	OCIE0B = 0    don't enable Timer/Counter 0 Output Compare Match B Interrupt
	OCIE0A = 0    don't enable Timer/Counter 0 Output Compare Match A Interrupt Enable
	TOIE0 = 1     enable Timer/Counter 0 Overflow Interrupt
	*/
	TIMSK0 = 0b00000001;
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
	TCNT0 = 0;
     132:	16 bc       	out	0x26, r1	; 38
     134:	08 95       	ret

00000136 <Backlight_Init>:
	
}

void Backlight_Init(void)
{
  timer0_init();
     136:	f7 cf       	rjmp	.-18     	; 0x126 <timer0_init>
     138:	08 95       	ret

0000013a <SetBackLightDuty>:
}

void SetBackLightDuty(uint8_t dutyCycle)
{
  DDRB |= (1<<PB7);  //set pin as output
     13a:	27 9a       	sbi	0x04, 7	; 4
  TCCR0A |= (1<<COM0A1); //enable output compare on PD6, clear OC0A on compare, set OC0A at BOTTOM
     13c:	94 b5       	in	r25, 0x24	; 36
     13e:	90 68       	ori	r25, 0x80	; 128
     140:	94 bd       	out	0x24, r25	; 36
  TCCR0A |= (1<<WGM01) | (1<<WGM00); //Fast PWM mode
     142:	94 b5       	in	r25, 0x24	; 36
     144:	93 60       	ori	r25, 0x03	; 3
     146:	94 bd       	out	0x24, r25	; 36
  
  if (dutyCycle > 100) OCR0A = 0xff;    //upper 8bit PWM boundary
     148:	85 36       	cpi	r24, 0x65	; 101
     14a:	18 f0       	brcs	.+6      	; 0x152 <SetBackLightDuty+0x18>
     14c:	8f ef       	ldi	r24, 0xFF	; 255
     14e:	87 bd       	out	0x27, r24	; 39
     150:	08 95       	ret
  else if(dutyCycle < 0) OCR0A = 0x00;  //lower PWM boundary
  else if ((dutyCycle <= 100) && (dutyCycle >= 0)) OCR0A = dutyCycle * 255 / 100; //duty cycle percentage converted to 8 bit
     152:	2f ef       	ldi	r18, 0xFF	; 255
     154:	82 9f       	mul	r24, r18
     156:	c0 01       	movw	r24, r0
     158:	11 24       	eor	r1, r1
     15a:	64 e6       	ldi	r22, 0x64	; 100
     15c:	70 e0       	ldi	r23, 0x00	; 0
     15e:	0e 94 c4 0a 	call	0x1588	; 0x1588 <__divmodhi4>
     162:	67 bd       	out	0x27, r22	; 39
     164:	08 95       	ret

00000166 <__vector_23>:

/************************************************************************/
/* Private function definitions                                         */
/************************************************************************/
ISR (TIMER0_OVF_vect)
{
     166:	1f 92       	push	r1
     168:	0f 92       	push	r0
     16a:	0f b6       	in	r0, 0x3f	; 63
     16c:	0f 92       	push	r0
     16e:	11 24       	eor	r1, r1
     170:	2f 93       	push	r18
     172:	3f 93       	push	r19
     174:	8f 93       	push	r24
     176:	9f 93       	push	r25
     178:	af 93       	push	r26
     17a:	bf 93       	push	r27
  unsigned long m = milli_second;
     17c:	80 91 d4 0a 	lds	r24, 0x0AD4	; 0x800ad4 <milli_second>
     180:	90 91 d5 0a 	lds	r25, 0x0AD5	; 0x800ad5 <milli_second+0x1>
     184:	a0 91 d6 0a 	lds	r26, 0x0AD6	; 0x800ad6 <milli_second+0x2>
     188:	b0 91 d7 0a 	lds	r27, 0x0AD7	; 0x800ad7 <milli_second+0x3>
  unsigned char f = milli_fraction;
     18c:	30 91 d3 0a 	lds	r19, 0x0AD3	; 0x800ad3 <milli_fraction>
  m += MILLIS_INC;
  f += FRACT_INC;
     190:	23 e0       	ldi	r18, 0x03	; 3
     192:	23 0f       	add	r18, r19
  if (f >= FRACT_MAX) {
     194:	2d 37       	cpi	r18, 0x7D	; 125
     196:	20 f4       	brcc	.+8      	; 0x1a0 <__vector_23+0x3a>
/************************************************************************/
ISR (TIMER0_OVF_vect)
{
  unsigned long m = milli_second;
  unsigned char f = milli_fraction;
  m += MILLIS_INC;
     198:	01 96       	adiw	r24, 0x01	; 1
     19a:	a1 1d       	adc	r26, r1
     19c:	b1 1d       	adc	r27, r1
     19e:	05 c0       	rjmp	.+10     	; 0x1aa <__vector_23+0x44>
  f += FRACT_INC;
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
     1a0:	26 e8       	ldi	r18, 0x86	; 134
     1a2:	23 0f       	add	r18, r19
    m +=1;
     1a4:	02 96       	adiw	r24, 0x02	; 2
     1a6:	a1 1d       	adc	r26, r1
     1a8:	b1 1d       	adc	r27, r1
  }
  milli_second = m;
     1aa:	80 93 d4 0a 	sts	0x0AD4, r24	; 0x800ad4 <milli_second>
     1ae:	90 93 d5 0a 	sts	0x0AD5, r25	; 0x800ad5 <milli_second+0x1>
     1b2:	a0 93 d6 0a 	sts	0x0AD6, r26	; 0x800ad6 <milli_second+0x2>
     1b6:	b0 93 d7 0a 	sts	0x0AD7, r27	; 0x800ad7 <milli_second+0x3>
  milli_fraction = f;
     1ba:	20 93 d3 0a 	sts	0x0AD3, r18	; 0x800ad3 <milli_fraction>
  timer0_counts++;
     1be:	80 91 cf 0a 	lds	r24, 0x0ACF	; 0x800acf <timer0_counts>
     1c2:	90 91 d0 0a 	lds	r25, 0x0AD0	; 0x800ad0 <timer0_counts+0x1>
     1c6:	a0 91 d1 0a 	lds	r26, 0x0AD1	; 0x800ad1 <timer0_counts+0x2>
     1ca:	b0 91 d2 0a 	lds	r27, 0x0AD2	; 0x800ad2 <timer0_counts+0x3>
     1ce:	01 96       	adiw	r24, 0x01	; 1
     1d0:	a1 1d       	adc	r26, r1
     1d2:	b1 1d       	adc	r27, r1
     1d4:	80 93 cf 0a 	sts	0x0ACF, r24	; 0x800acf <timer0_counts>
     1d8:	90 93 d0 0a 	sts	0x0AD0, r25	; 0x800ad0 <timer0_counts+0x1>
     1dc:	a0 93 d1 0a 	sts	0x0AD1, r26	; 0x800ad1 <timer0_counts+0x2>
     1e0:	b0 93 d2 0a 	sts	0x0AD2, r27	; 0x800ad2 <timer0_counts+0x3>
     1e4:	bf 91       	pop	r27
     1e6:	af 91       	pop	r26
     1e8:	9f 91       	pop	r25
     1ea:	8f 91       	pop	r24
     1ec:	3f 91       	pop	r19
     1ee:	2f 91       	pop	r18
     1f0:	0f 90       	pop	r0
     1f2:	0f be       	out	0x3f, r0	; 63
     1f4:	0f 90       	pop	r0
     1f6:	1f 90       	pop	r1
     1f8:	18 95       	reti

000001fa <pDDRV_Button_init>:
static __Button_Status button;

void pDDRV_Button_init(void)
{

  DDRF &= ~((1<<PF0) | (1<<PF1) | (1<<PF2) | (1<<PF3) | (1<<PF4));
     1fa:	80 b3       	in	r24, 0x10	; 16
     1fc:	80 7e       	andi	r24, 0xE0	; 224
     1fe:	80 bb       	out	0x10, r24	; 16
  PORTF |= ((1<<PF0) | (1<<PF1) | (1<<PF2) | (1<<PF3) | (1<<PF4));
     200:	81 b3       	in	r24, 0x11	; 17
     202:	8f 61       	ori	r24, 0x1F	; 31
     204:	81 bb       	out	0x11, r24	; 17
  mButtonStatusNew = BUTTON_UNPRESSED;
     206:	81 e0       	ldi	r24, 0x01	; 1
     208:	80 93 9b 08 	sts	0x089B, r24	; 0x80089b <mButtonStatusNew>
  mButtonStatusOld = BUTTON_UNPRESSED;
     20c:	80 93 9a 08 	sts	0x089A, r24	; 0x80089a <__data_end>
     210:	08 95       	ret

00000212 <pDDRV_Button_readButton>:
}

uint8_t pDDRV_Button_readButton(__ButtonTypeDef buttonNum)
{
  switch (buttonNum)
     212:	82 30       	cpi	r24, 0x02	; 2
     214:	91 f0       	breq	.+36     	; 0x23a <pDDRV_Button_readButton+0x28>
     216:	28 f4       	brcc	.+10     	; 0x222 <pDDRV_Button_readButton+0x10>
     218:	88 23       	and	r24, r24
     21a:	41 f0       	breq	.+16     	; 0x22c <pDDRV_Button_readButton+0x1a>
     21c:	81 30       	cpi	r24, 0x01	; 1
     21e:	49 f0       	breq	.+18     	; 0x232 <pDDRV_Button_readButton+0x20>
     220:	1a c0       	rjmp	.+52     	; 0x256 <pDDRV_Button_readButton+0x44>
     222:	83 30       	cpi	r24, 0x03	; 3
     224:	79 f0       	breq	.+30     	; 0x244 <pDDRV_Button_readButton+0x32>
     226:	84 30       	cpi	r24, 0x04	; 4
     228:	91 f0       	breq	.+36     	; 0x24e <pDDRV_Button_readButton+0x3c>
     22a:	15 c0       	rjmp	.+42     	; 0x256 <pDDRV_Button_readButton+0x44>
  {
    case BUTTON_UP:
      if (PINF & (1<<PF0)) return 1;
     22c:	8f b1       	in	r24, 0x0f	; 15
     22e:	81 70       	andi	r24, 0x01	; 1
     230:	08 95       	ret
      else return 0;
      break;
    case BUTTON_LEFT:
      if (PINF & (1<<PF1)) return 1;
     232:	8f b1       	in	r24, 0x0f	; 15
uint8_t pDDRV_Button_readButton(__ButtonTypeDef buttonNum)
{
  switch (buttonNum)
  {
    case BUTTON_UP:
      if (PINF & (1<<PF0)) return 1;
     234:	86 95       	lsr	r24
     236:	81 70       	andi	r24, 0x01	; 1
     238:	08 95       	ret
    case BUTTON_LEFT:
      if (PINF & (1<<PF1)) return 1;
      else return 0;
      break;
    case BUTTON_DOWN:
      if (PINF & (1<<PF2)) return 1;
     23a:	8f b1       	in	r24, 0x0f	; 15
uint8_t pDDRV_Button_readButton(__ButtonTypeDef buttonNum)
{
  switch (buttonNum)
  {
    case BUTTON_UP:
      if (PINF & (1<<PF0)) return 1;
     23c:	82 fb       	bst	r24, 2
     23e:	88 27       	eor	r24, r24
     240:	80 f9       	bld	r24, 0
     242:	08 95       	ret
    case BUTTON_DOWN:
      if (PINF & (1<<PF2)) return 1;
      else return 0;
      break;
    case BUTTON_RIGHT:
      if (PINF & (1<<PF3)) return 1;
     244:	8f b1       	in	r24, 0x0f	; 15
uint8_t pDDRV_Button_readButton(__ButtonTypeDef buttonNum)
{
  switch (buttonNum)
  {
    case BUTTON_UP:
      if (PINF & (1<<PF0)) return 1;
     246:	83 fb       	bst	r24, 3
     248:	88 27       	eor	r24, r24
     24a:	80 f9       	bld	r24, 0
     24c:	08 95       	ret
    case BUTTON_RIGHT:
      if (PINF & (1<<PF3)) return 1;
      else return 0;
      break;
    case BUTTON_ROTATE:
      if (PINF & (1<<PF4)) return 1;
     24e:	8f b1       	in	r24, 0x0f	; 15
uint8_t pDDRV_Button_readButton(__ButtonTypeDef buttonNum)
{
  switch (buttonNum)
  {
    case BUTTON_UP:
      if (PINF & (1<<PF0)) return 1;
     250:	82 95       	swap	r24
     252:	81 70       	andi	r24, 0x01	; 1
     254:	08 95       	ret
      else return 0;
      break;
    default:
      break;
  }
  return 2;
     256:	82 e0       	ldi	r24, 0x02	; 2
}
     258:	08 95       	ret

0000025a <pDDRV_Button_GetStatus>:

__Button_Status pDDRV_Button_GetStatus(void)
{
     25a:	7f 92       	push	r7
     25c:	8f 92       	push	r8
     25e:	9f 92       	push	r9
     260:	af 92       	push	r10
     262:	bf 92       	push	r11
     264:	cf 92       	push	r12
     266:	df 92       	push	r13
     268:	ef 92       	push	r14
     26a:	ff 92       	push	r15
     26c:	0f 93       	push	r16
     26e:	1f 93       	push	r17
     270:	cf 93       	push	r28
     272:	df 93       	push	r29
     274:	00 d0       	rcall	.+0      	; 0x276 <pDDRV_Button_GetStatus+0x1c>
     276:	1f 92       	push	r1
     278:	1f 92       	push	r1
     27a:	cd b7       	in	r28, 0x3d	; 61
     27c:	de b7       	in	r29, 0x3e	; 62
      outputButtonStatus = BUTTON_PRESSED;
      mButtonStatusOld = mButtonStatusNew;
    } 
    else
    {
      outputButtonStatus = BUTTON_UNPRESSED;
     27e:	dd 24       	eor	r13, r13
     280:	d3 94       	inc	r13
    {
      mButtonStatusNew = BUTTON_PRESSED;
    }
    else
    {
      mButtonStatusNew = BUTTON_UNPRESSED;
     282:	cc 24       	eor	r12, r12
     284:	c3 94       	inc	r12
     286:	3c c0       	rjmp	.+120    	; 0x300 <pDDRV_Button_GetStatus+0xa6>
  {
    uint8_t mButtonStatusCount = 0;
    //Check button status several times in a roll
    for (int i = 0; i < BUTTON_READ_NUM; i++)
    {
      if (pDDRV_Button_readButton(NumBut) == 0)
     288:	8f 2d       	mov	r24, r15
     28a:	c3 df       	rcall	.-122    	; 0x212 <pDDRV_Button_readButton>
     28c:	81 11       	cpse	r24, r1
     28e:	01 c0       	rjmp	.+2      	; 0x292 <pDDRV_Button_GetStatus+0x38>
      {
        mButtonStatusCount++;
     290:	e3 94       	inc	r14
     292:	01 50       	subi	r16, 0x01	; 1
     294:	11 09       	sbc	r17, r1
    
  for (uint8_t NumBut = 0; NumBut < BUTTON_NUM; NumBut++)
  {
    uint8_t mButtonStatusCount = 0;
    //Check button status several times in a roll
    for (int i = 0; i < BUTTON_READ_NUM; i++)
     296:	c1 f7       	brne	.-16     	; 0x288 <pDDRV_Button_GetStatus+0x2e>
        mButtonStatusCount++;
      }
    }

    //If button is low for all attempted reads, then it is pressed
    if (mButtonStatusCount >= BUTTON_READ_NUM)
     298:	84 e0       	ldi	r24, 0x04	; 4
     29a:	8e 15       	cp	r24, r14
     29c:	40 f4       	brcc	.+16     	; 0x2ae <pDDRV_Button_GetStatus+0x54>
    {
      mButtonStatusNew = BUTTON_PRESSED;
     29e:	10 92 9b 08 	sts	0x089B, r1	; 0x80089b <mButtonStatusNew>
      mButtonStatusNew = BUTTON_UNPRESSED;
      mButtonStatusOld = BUTTON_UNPRESSED;
    }

    //If the new button status is pressed then output status is pressed
    if ((mButtonStatusNew == BUTTON_PRESSED) && (mButtonStatusNew != mButtonStatusOld ))
     2a2:	80 91 9a 08 	lds	r24, 0x089A	; 0x80089a <__data_end>
     2a6:	81 11       	cpse	r24, r1
     2a8:	08 c0       	rjmp	.+16     	; 0x2ba <pDDRV_Button_GetStatus+0x60>
      outputButtonStatus = BUTTON_PRESSED;
      mButtonStatusOld = mButtonStatusNew;
    } 
    else
    {
      outputButtonStatus = BUTTON_UNPRESSED;
     2aa:	8c 2d       	mov	r24, r12
     2ac:	09 c0       	rjmp	.+18     	; 0x2c0 <pDDRV_Button_GetStatus+0x66>
    {
      mButtonStatusNew = BUTTON_PRESSED;
    }
    else
    {
      mButtonStatusNew = BUTTON_UNPRESSED;
     2ae:	c0 92 9b 08 	sts	0x089B, r12	; 0x80089b <mButtonStatusNew>
      mButtonStatusOld = BUTTON_UNPRESSED;
     2b2:	c0 92 9a 08 	sts	0x089A, r12	; 0x80089a <__data_end>
      outputButtonStatus = BUTTON_PRESSED;
      mButtonStatusOld = mButtonStatusNew;
    } 
    else
    {
      outputButtonStatus = BUTTON_UNPRESSED;
     2b6:	8c 2d       	mov	r24, r12
     2b8:	03 c0       	rjmp	.+6      	; 0x2c0 <pDDRV_Button_GetStatus+0x66>

    //If the new button status is pressed then output status is pressed
    if ((mButtonStatusNew == BUTTON_PRESSED) && (mButtonStatusNew != mButtonStatusOld ))
    {
      outputButtonStatus = BUTTON_PRESSED;
      mButtonStatusOld = mButtonStatusNew;
     2ba:	10 92 9a 08 	sts	0x089A, r1	; 0x80089a <__data_end>
    }

    //If the new button status is pressed then output status is pressed
    if ((mButtonStatusNew == BUTTON_PRESSED) && (mButtonStatusNew != mButtonStatusOld ))
    {
      outputButtonStatus = BUTTON_PRESSED;
     2be:	80 e0       	ldi	r24, 0x00	; 0
    else
    {
      outputButtonStatus = BUTTON_UNPRESSED;
    }

    switch (NumBut)
     2c0:	92 e0       	ldi	r25, 0x02	; 2
     2c2:	f9 16       	cp	r15, r25
     2c4:	99 f0       	breq	.+38     	; 0x2ec <pDDRV_Button_GetStatus+0x92>
     2c6:	9f 15       	cp	r25, r15
     2c8:	30 f0       	brcs	.+12     	; 0x2d6 <pDDRV_Button_GetStatus+0x7c>
     2ca:	ff 20       	and	r15, r15
     2cc:	59 f0       	breq	.+22     	; 0x2e4 <pDDRV_Button_GetStatus+0x8a>
     2ce:	91 e0       	ldi	r25, 0x01	; 1
     2d0:	f9 16       	cp	r15, r25
     2d2:	51 f0       	breq	.+20     	; 0x2e8 <pDDRV_Button_GetStatus+0x8e>
     2d4:	11 c0       	rjmp	.+34     	; 0x2f8 <pDDRV_Button_GetStatus+0x9e>
     2d6:	93 e0       	ldi	r25, 0x03	; 3
     2d8:	f9 16       	cp	r15, r25
     2da:	51 f0       	breq	.+20     	; 0x2f0 <pDDRV_Button_GetStatus+0x96>
     2dc:	94 e0       	ldi	r25, 0x04	; 4
     2de:	f9 16       	cp	r15, r25
     2e0:	49 f0       	breq	.+18     	; 0x2f4 <pDDRV_Button_GetStatus+0x9a>
     2e2:	0a c0       	rjmp	.+20     	; 0x2f8 <pDDRV_Button_GetStatus+0x9e>
    {
      case BUTTON_UP:
        ButtonStatus.up = outputButtonStatus;
     2e4:	78 2e       	mov	r7, r24
        break;
     2e6:	0b c0       	rjmp	.+22     	; 0x2fe <pDDRV_Button_GetStatus+0xa4>
      case BUTTON_LEFT:
        ButtonStatus.left = outputButtonStatus;
     2e8:	88 2e       	mov	r8, r24
        break;
     2ea:	09 c0       	rjmp	.+18     	; 0x2fe <pDDRV_Button_GetStatus+0xa4>
      case BUTTON_DOWN:
        ButtonStatus.down = outputButtonStatus;
     2ec:	98 2e       	mov	r9, r24
        break;
     2ee:	07 c0       	rjmp	.+14     	; 0x2fe <pDDRV_Button_GetStatus+0xa4>
      case BUTTON_RIGHT:
        ButtonStatus.right = outputButtonStatus;
     2f0:	a8 2e       	mov	r10, r24
        break;
     2f2:	05 c0       	rjmp	.+10     	; 0x2fe <pDDRV_Button_GetStatus+0xa4>
      case BUTTON_ROTATE:
        ButtonStatus.rotate = outputButtonStatus;
     2f4:	b8 2e       	mov	r11, r24
     2f6:	0b c0       	rjmp	.+22     	; 0x30e <pDDRV_Button_GetStatus+0xb4>
{
  __Button_Status ButtonStatus;

    bool outputButtonStatus = 2;
    
  for (uint8_t NumBut = 0; NumBut < BUTTON_NUM; NumBut++)
     2f8:	84 e0       	ldi	r24, 0x04	; 4
     2fa:	8d 15       	cp	r24, r13
     2fc:	40 f0       	brcs	.+16     	; 0x30e <pDDRV_Button_GetStatus+0xb4>
     2fe:	d3 94       	inc	r13
     300:	ff 24       	eor	r15, r15
     302:	fa 94       	dec	r15
     304:	fd 0c       	add	r15, r13
  }
  return 2;
}

__Button_Status pDDRV_Button_GetStatus(void)
{
     306:	05 e0       	ldi	r16, 0x05	; 5
     308:	10 e0       	ldi	r17, 0x00	; 0
     30a:	e1 2c       	mov	r14, r1
     30c:	bd cf       	rjmp	.-134    	; 0x288 <pDDRV_Button_GetStatus+0x2e>
        break;
    }
  }

  return ButtonStatus;
     30e:	27 2d       	mov	r18, r7
     310:	38 2d       	mov	r19, r8
     312:	49 2d       	mov	r20, r9
     314:	5a 2d       	mov	r21, r10
     316:	6b 2d       	mov	r22, r11
     318:	70 e0       	ldi	r23, 0x00	; 0
     31a:	80 e0       	ldi	r24, 0x00	; 0
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	0f 90       	pop	r0
     320:	0f 90       	pop	r0
     322:	0f 90       	pop	r0
     324:	0f 90       	pop	r0
     326:	0f 90       	pop	r0
     328:	df 91       	pop	r29
     32a:	cf 91       	pop	r28
     32c:	1f 91       	pop	r17
     32e:	0f 91       	pop	r16
     330:	ff 90       	pop	r15
     332:	ef 90       	pop	r14
     334:	df 90       	pop	r13
     336:	cf 90       	pop	r12
     338:	bf 90       	pop	r11
     33a:	af 90       	pop	r10
     33c:	9f 90       	pop	r9
     33e:	8f 90       	pop	r8
     340:	7f 90       	pop	r7
     342:	08 95       	ret

00000344 <LCD_WR_DATA>:
  LCD_CS_SET;
}

static void LCD_WR_DATA(uint8_t data)
{
  LCD_CS_CLR;
     344:	28 98       	cbi	0x05, 0	; 5
  LCD_RS_SET;
     346:	75 9a       	sbi	0x0e, 5	; 14
  SPI_Master_transmit(data);
     348:	f8 d3       	rcall	.+2032   	; 0xb3a <SPI_Master_transmit>
  LCD_CS_SET;
     34a:	28 9a       	sbi	0x05, 0	; 5
     34c:	08 95       	ret

0000034e <LCD_WR_REG>:
/************************************************************************/
/* Private function definitions                                         */
/************************************************************************/
static void LCD_WR_REG(uint8_t data)
{
  LCD_CS_CLR;
     34e:	28 98       	cbi	0x05, 0	; 5
  LCD_RS_CLR;
     350:	75 98       	cbi	0x0e, 5	; 14
  SPI_Master_transmit(data);
     352:	f3 d3       	rcall	.+2022   	; 0xb3a <SPI_Master_transmit>
  LCD_CS_SET;
     354:	28 9a       	sbi	0x05, 0	; 5
     356:	08 95       	ret

00000358 <LCD_RESET>:
  LCD_CS_SET;
}

void LCD_RESET(void)
{
  LCD_RST_CLR;
     358:	74 98       	cbi	0x0e, 4	; 14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     35a:	2f ef       	ldi	r18, 0xFF	; 255
     35c:	81 ee       	ldi	r24, 0xE1	; 225
     35e:	94 e0       	ldi	r25, 0x04	; 4
     360:	21 50       	subi	r18, 0x01	; 1
     362:	80 40       	sbci	r24, 0x00	; 0
     364:	90 40       	sbci	r25, 0x00	; 0
     366:	e1 f7       	brne	.-8      	; 0x360 <LCD_RESET+0x8>
     368:	00 c0       	rjmp	.+0      	; 0x36a <LCD_RESET+0x12>
     36a:	00 00       	nop
  _delay_ms(100);
  LCD_RST_SET;
     36c:	74 9a       	sbi	0x0e, 4	; 14
     36e:	2f ef       	ldi	r18, 0xFF	; 255
     370:	80 e7       	ldi	r24, 0x70	; 112
     372:	92 e0       	ldi	r25, 0x02	; 2
     374:	21 50       	subi	r18, 0x01	; 1
     376:	80 40       	sbci	r24, 0x00	; 0
     378:	90 40       	sbci	r25, 0x00	; 0
     37a:	e1 f7       	brne	.-8      	; 0x374 <LCD_RESET+0x1c>
     37c:	00 c0       	rjmp	.+0      	; 0x37e <LCD_RESET+0x26>
     37e:	00 00       	nop
     380:	08 95       	ret

00000382 <LCD_SetWindows>:
  _delay_ms(50);
}

void LCD_SetWindows(uint16_t xStar, uint16_t yStar, uint16_t xEnd, uint16_t yEnd)
{
     382:	af 92       	push	r10
     384:	bf 92       	push	r11
     386:	cf 92       	push	r12
     388:	df 92       	push	r13
     38a:	ef 92       	push	r14
     38c:	ff 92       	push	r15
     38e:	0f 93       	push	r16
     390:	1f 93       	push	r17
     392:	cf 93       	push	r28
     394:	df 93       	push	r29
     396:	b8 2e       	mov	r11, r24
     398:	a9 2e       	mov	r10, r25
     39a:	f6 2e       	mov	r15, r22
     39c:	e7 2e       	mov	r14, r23
     39e:	d4 2e       	mov	r13, r20
     3a0:	c5 2e       	mov	r12, r21
     3a2:	12 2f       	mov	r17, r18
     3a4:	03 2f       	mov	r16, r19
  LCD_WR_REG(lcddev.setxcmd);
     3a6:	c8 ed       	ldi	r28, 0xD8	; 216
     3a8:	da e0       	ldi	r29, 0x0A	; 10
     3aa:	89 85       	ldd	r24, Y+9	; 0x09
     3ac:	d0 df       	rcall	.-96     	; 0x34e <LCD_WR_REG>
  LCD_WR_DATA(xStar >> 8);
     3ae:	8a 2d       	mov	r24, r10
     3b0:	c9 df       	rcall	.-110    	; 0x344 <LCD_WR_DATA>
  LCD_WR_DATA(0x00FF & xStar);
     3b2:	8b 2d       	mov	r24, r11
     3b4:	c7 df       	rcall	.-114    	; 0x344 <LCD_WR_DATA>
  LCD_WR_DATA(xEnd >> 8);
     3b6:	8c 2d       	mov	r24, r12
     3b8:	c5 df       	rcall	.-118    	; 0x344 <LCD_WR_DATA>
  LCD_WR_DATA(0x00FF & xEnd);
     3ba:	8d 2d       	mov	r24, r13
     3bc:	c3 df       	rcall	.-122    	; 0x344 <LCD_WR_DATA>

  LCD_WR_REG(lcddev.setycmd);
     3be:	8b 85       	ldd	r24, Y+11	; 0x0b
     3c0:	c6 df       	rcall	.-116    	; 0x34e <LCD_WR_REG>
  LCD_WR_DATA(yStar >> 8);
     3c2:	8e 2d       	mov	r24, r14
     3c4:	bf df       	rcall	.-130    	; 0x344 <LCD_WR_DATA>
  LCD_WR_DATA(0x00FF & yStar);
     3c6:	8f 2d       	mov	r24, r15
     3c8:	bd df       	rcall	.-134    	; 0x344 <LCD_WR_DATA>
  LCD_WR_DATA(yEnd >> 8);
     3ca:	80 2f       	mov	r24, r16
     3cc:	bb df       	rcall	.-138    	; 0x344 <LCD_WR_DATA>
     3ce:	81 2f       	mov	r24, r17
  LCD_WR_DATA(0x00FF & yEnd);
     3d0:	b9 df       	rcall	.-142    	; 0x344 <LCD_WR_DATA>
     3d2:	8f 81       	ldd	r24, Y+7	; 0x07
     3d4:	bc df       	rcall	.-136    	; 0x34e <LCD_WR_REG>
  LCD_WR_DATA(LCD_RegValue);
}

static void LCD_WriteRAM_Prepare(void)
{
  LCD_WR_REG(lcddev.wramcmd);
     3d6:	df 91       	pop	r29
     3d8:	cf 91       	pop	r28
     3da:	1f 91       	pop	r17
  LCD_WR_DATA(0x00FF & yStar);
  LCD_WR_DATA(yEnd >> 8);
  LCD_WR_DATA(0x00FF & yEnd);

  LCD_WriteRAM_Prepare();
}
     3dc:	0f 91       	pop	r16
     3de:	ff 90       	pop	r15
     3e0:	ef 90       	pop	r14
     3e2:	df 90       	pop	r13
     3e4:	cf 90       	pop	r12
     3e6:	bf 90       	pop	r11
     3e8:	af 90       	pop	r10
     3ea:	08 95       	ret

000003ec <LCD_SetCursor>:
     3ec:	9b 01       	movw	r18, r22
     3ee:	ac 01       	movw	r20, r24
     3f0:	c8 cf       	rjmp	.-112    	; 0x382 <LCD_SetWindows>

void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
  LCD_SetWindows(Xpos,Ypos,Xpos,Ypos);
     3f2:	08 95       	ret

000003f4 <LCD_direction>:
}

void LCD_direction(LCD_Rotation_t direction)
{
  lcddev.setxcmd=0x2A;
     3f4:	e8 ed       	ldi	r30, 0xD8	; 216
     3f6:	fa e0       	ldi	r31, 0x0A	; 10
     3f8:	2a e2       	ldi	r18, 0x2A	; 42
     3fa:	30 e0       	ldi	r19, 0x00	; 0
     3fc:	32 87       	std	Z+10, r19	; 0x0a
     3fe:	21 87       	std	Z+9, r18	; 0x09
  lcddev.setycmd=0x2B;
     400:	2b e2       	ldi	r18, 0x2B	; 43
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	34 87       	std	Z+12, r19	; 0x0c
     406:	23 87       	std	Z+11, r18	; 0x0b
  lcddev.wramcmd=0x2C;
     408:	2c e2       	ldi	r18, 0x2C	; 44
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	30 87       	std	Z+8, r19	; 0x08
     40e:	27 83       	std	Z+7, r18	; 0x07
  switch(direction)
     410:	81 30       	cpi	r24, 0x01	; 1
     412:	a9 f0       	breq	.+42     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     414:	28 f0       	brcs	.+10     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     416:	82 30       	cpi	r24, 0x02	; 2
     418:	09 f1       	breq	.+66     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     41a:	83 30       	cpi	r24, 0x03	; 3
     41c:	71 f1       	breq	.+92     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
     41e:	08 95       	ret
  {
    case LCD_ROTATE_0:
      lcddev.width=LCD_W;
     420:	e8 ed       	ldi	r30, 0xD8	; 216
     422:	fa e0       	ldi	r31, 0x0A	; 10
     424:	80 e4       	ldi	r24, 0x40	; 64
     426:	91 e0       	ldi	r25, 0x01	; 1
     428:	91 83       	std	Z+1, r25	; 0x01
     42a:	80 83       	st	Z, r24
      lcddev.height=LCD_H;
     42c:	80 ee       	ldi	r24, 0xE0	; 224
     42e:	91 e0       	ldi	r25, 0x01	; 1
     430:	93 83       	std	Z+3, r25	; 0x03
     432:	82 83       	std	Z+2, r24	; 0x02
  LCD_CS_SET;
}

static void LCD_WriteReg(uint8_t LCD_Reg, uint8_t LCD_RegValue)
{
  LCD_WR_REG(LCD_Reg);
     434:	86 e3       	ldi	r24, 0x36	; 54
     436:	8b df       	rcall	.-234    	; 0x34e <LCD_WR_REG>
  LCD_WR_DATA(LCD_RegValue);
     438:	88 e4       	ldi	r24, 0x48	; 72
     43a:	84 cf       	rjmp	.-248    	; 0x344 <LCD_WR_DATA>
     43c:	08 95       	ret
      lcddev.width=LCD_W;
      lcddev.height=LCD_H;
      LCD_WriteReg(0x36,(1<<3)|(1<<6));
      break;
    case LCD_ROTATE_90:
      lcddev.width=LCD_H;
     43e:	e8 ed       	ldi	r30, 0xD8	; 216
     440:	fa e0       	ldi	r31, 0x0A	; 10
     442:	80 ee       	ldi	r24, 0xE0	; 224
     444:	91 e0       	ldi	r25, 0x01	; 1
     446:	91 83       	std	Z+1, r25	; 0x01
     448:	80 83       	st	Z, r24
      lcddev.height=LCD_W;
     44a:	80 e4       	ldi	r24, 0x40	; 64
     44c:	91 e0       	ldi	r25, 0x01	; 1
     44e:	93 83       	std	Z+3, r25	; 0x03
  LCD_CS_SET;
}

static void LCD_WriteReg(uint8_t LCD_Reg, uint8_t LCD_RegValue)
{
  LCD_WR_REG(LCD_Reg);
     450:	82 83       	std	Z+2, r24	; 0x02
     452:	86 e3       	ldi	r24, 0x36	; 54
  LCD_WR_DATA(LCD_RegValue);
     454:	7c df       	rcall	.-264    	; 0x34e <LCD_WR_REG>
     456:	88 e2       	ldi	r24, 0x28	; 40
     458:	75 cf       	rjmp	.-278    	; 0x344 <LCD_WR_DATA>
     45a:	08 95       	ret
      lcddev.width=LCD_H;
      lcddev.height=LCD_W;
      LCD_WriteReg(0x36,(1<<3)|(1<<5));
      break;
    case LCD_ROTATE_180:
      lcddev.width=LCD_W;
     45c:	e8 ed       	ldi	r30, 0xD8	; 216
     45e:	fa e0       	ldi	r31, 0x0A	; 10
     460:	80 e4       	ldi	r24, 0x40	; 64
     462:	91 e0       	ldi	r25, 0x01	; 1
     464:	91 83       	std	Z+1, r25	; 0x01
     466:	80 83       	st	Z, r24
      lcddev.height=LCD_H;
     468:	80 ee       	ldi	r24, 0xE0	; 224
     46a:	91 e0       	ldi	r25, 0x01	; 1
     46c:	93 83       	std	Z+3, r25	; 0x03
  LCD_CS_SET;
}

static void LCD_WriteReg(uint8_t LCD_Reg, uint8_t LCD_RegValue)
{
  LCD_WR_REG(LCD_Reg);
     46e:	82 83       	std	Z+2, r24	; 0x02
     470:	86 e3       	ldi	r24, 0x36	; 54
     472:	6d df       	rcall	.-294    	; 0x34e <LCD_WR_REG>
  LCD_WR_DATA(LCD_RegValue);
     474:	88 e8       	ldi	r24, 0x88	; 136
     476:	66 cf       	rjmp	.-308    	; 0x344 <LCD_WR_DATA>
     478:	08 95       	ret
     47a:	e8 ed       	ldi	r30, 0xD8	; 216
      lcddev.width=LCD_W;
      lcddev.height=LCD_H;
      LCD_WriteReg(0x36,(1<<3)|(1<<7));
      break;
    case LCD_ROTATE_270:
      lcddev.width=LCD_H;
     47c:	fa e0       	ldi	r31, 0x0A	; 10
     47e:	80 ee       	ldi	r24, 0xE0	; 224
     480:	91 e0       	ldi	r25, 0x01	; 1
     482:	91 83       	std	Z+1, r25	; 0x01
     484:	80 83       	st	Z, r24
      lcddev.height=LCD_W;
     486:	80 e4       	ldi	r24, 0x40	; 64
     488:	91 e0       	ldi	r25, 0x01	; 1
     48a:	93 83       	std	Z+3, r25	; 0x03
  LCD_CS_SET;
}

static void LCD_WriteReg(uint8_t LCD_Reg, uint8_t LCD_RegValue)
{
  LCD_WR_REG(LCD_Reg);
     48c:	82 83       	std	Z+2, r24	; 0x02
     48e:	86 e3       	ldi	r24, 0x36	; 54
     490:	5e df       	rcall	.-324    	; 0x34e <LCD_WR_REG>
  LCD_WR_DATA(LCD_RegValue);
     492:	88 ee       	ldi	r24, 0xE8	; 232
     494:	57 cf       	rjmp	.-338    	; 0x344 <LCD_WR_DATA>
     496:	08 95       	ret

00000498 <LCD_SetBackLight>:
     498:	50 ce       	rjmp	.-864    	; 0x13a <SetBackLightDuty>
  LCD_WriteData_16Bit(colour);
}

void LCD_SetBackLight(uint8_t duty)
{
  SetBackLightDuty(duty);
     49a:	08 95       	ret

0000049c <LCD_WriteData_16Bit>:
}

void LCD_WriteData_16Bit(uint16_t Data)
{
     49c:	cf 93       	push	r28
     49e:	c8 2f       	mov	r28, r24
  LCD_CS_CLR;
     4a0:	28 98       	cbi	0x05, 0	; 5
  LCD_RS_SET;
     4a2:	75 9a       	sbi	0x0e, 5	; 14
  SPI_Master_transmit(Data>>8);
     4a4:	89 2f       	mov	r24, r25
     4a6:	49 d3       	rcall	.+1682   	; 0xb3a <SPI_Master_transmit>
  SPI_Master_transmit(Data);
     4a8:	8c 2f       	mov	r24, r28
     4aa:	47 d3       	rcall	.+1678   	; 0xb3a <SPI_Master_transmit>
  LCD_CS_SET;
     4ac:	28 9a       	sbi	0x05, 0	; 5
}
     4ae:	cf 91       	pop	r28
     4b0:	08 95       	ret

000004b2 <LCD_Clear>:
  SetBackLightDuty(100);
  LCD_Clear(BLACK);
}

void LCD_Clear(uint16_t Color)
{
     4b2:	cf 92       	push	r12
     4b4:	df 92       	push	r13
     4b6:	ef 92       	push	r14
     4b8:	ff 92       	push	r15
     4ba:	0f 93       	push	r16
     4bc:	1f 93       	push	r17
     4be:	cf 93       	push	r28
     4c0:	df 93       	push	r29
     4c2:	7c 01       	movw	r14, r24
  unsigned int i,m;
  LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);
     4c4:	c8 ed       	ldi	r28, 0xD8	; 216
     4c6:	da e0       	ldi	r29, 0x0A	; 10
     4c8:	2a 81       	ldd	r18, Y+2	; 0x02
     4ca:	3b 81       	ldd	r19, Y+3	; 0x03
     4cc:	21 50       	subi	r18, 0x01	; 1
     4ce:	31 09       	sbc	r19, r1
     4d0:	48 81       	ld	r20, Y
     4d2:	59 81       	ldd	r21, Y+1	; 0x01
     4d4:	41 50       	subi	r20, 0x01	; 1
     4d6:	51 09       	sbc	r21, r1
     4d8:	60 e0       	ldi	r22, 0x00	; 0
     4da:	70 e0       	ldi	r23, 0x00	; 0
     4dc:	80 e0       	ldi	r24, 0x00	; 0
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	50 df       	rcall	.-352    	; 0x382 <LCD_SetWindows>
  LCD_CS_CLR;
     4e2:	28 98       	cbi	0x05, 0	; 5
  LCD_RS_SET;
     4e4:	75 9a       	sbi	0x0e, 5	; 14
  for(i=0;i<lcddev.height;i++)
     4e6:	8a 81       	ldd	r24, Y+2	; 0x02
     4e8:	9b 81       	ldd	r25, Y+3	; 0x03
     4ea:	89 2b       	or	r24, r25
     4ec:	b1 f4       	brne	.+44     	; 0x51a <LCD_Clear+0x68>
     4ee:	1f c0       	rjmp	.+62     	; 0x52e <LCD_Clear+0x7c>
  {
    for(m=0;m<lcddev.width;m++)
     4f0:	c0 e0       	ldi	r28, 0x00	; 0
     4f2:	d0 e0       	ldi	r29, 0x00	; 0
    {
      LCD_WriteData_16Bit(Color);
     4f4:	c7 01       	movw	r24, r14
     4f6:	d2 df       	rcall	.-92     	; 0x49c <LCD_WriteData_16Bit>
  LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);
  LCD_CS_CLR;
  LCD_RS_SET;
  for(i=0;i<lcddev.height;i++)
  {
    for(m=0;m<lcddev.width;m++)
     4f8:	21 96       	adiw	r28, 0x01	; 1
     4fa:	f8 01       	movw	r30, r16
     4fc:	80 81       	ld	r24, Z
     4fe:	91 81       	ldd	r25, Z+1	; 0x01
     500:	c8 17       	cp	r28, r24
     502:	d9 07       	cpc	r29, r25
     504:	b8 f3       	brcs	.-18     	; 0x4f4 <LCD_Clear+0x42>
{
  unsigned int i,m;
  LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);
  LCD_CS_CLR;
  LCD_RS_SET;
  for(i=0;i<lcddev.height;i++)
     506:	ff ef       	ldi	r31, 0xFF	; 255
     508:	cf 1a       	sub	r12, r31
     50a:	df 0a       	sbc	r13, r31
     50c:	f8 01       	movw	r30, r16
     50e:	82 81       	ldd	r24, Z+2	; 0x02
     510:	93 81       	ldd	r25, Z+3	; 0x03
     512:	c8 16       	cp	r12, r24
     514:	d9 06       	cpc	r13, r25
     516:	28 f0       	brcs	.+10     	; 0x522 <LCD_Clear+0x70>
     518:	0a c0       	rjmp	.+20     	; 0x52e <LCD_Clear+0x7c>
     51a:	c1 2c       	mov	r12, r1
     51c:	d1 2c       	mov	r13, r1
  {
    for(m=0;m<lcddev.width;m++)
     51e:	08 ed       	ldi	r16, 0xD8	; 216
     520:	1a e0       	ldi	r17, 0x0A	; 10
     522:	f8 01       	movw	r30, r16
     524:	80 81       	ld	r24, Z
     526:	91 81       	ldd	r25, Z+1	; 0x01
     528:	89 2b       	or	r24, r25
     52a:	11 f7       	brne	.-60     	; 0x4f0 <LCD_Clear+0x3e>
     52c:	ec cf       	rjmp	.-40     	; 0x506 <LCD_Clear+0x54>
    {
      LCD_WriteData_16Bit(Color);
    }
  }
  LCD_CS_SET;
     52e:	28 9a       	sbi	0x05, 0	; 5
}
     530:	df 91       	pop	r29
     532:	cf 91       	pop	r28
     534:	1f 91       	pop	r17
     536:	0f 91       	pop	r16
     538:	ff 90       	pop	r15
     53a:	ef 90       	pop	r14
     53c:	df 90       	pop	r13
     53e:	cf 90       	pop	r12
     540:	08 95       	ret

00000542 <LCD_Init>:
/************************************************************************/
/* Public function definitions                                          */
/************************************************************************/
void LCD_Init(void)
{
  SPI_Master_init();
     542:	d3 d2       	rcall	.+1446   	; 0xaea <SPI_Master_init>
  LCD_WR_REG(lcddev.wramcmd);
}

void LCD_GPIOInit(void)
{
  DDR_LCD_CTRL |= ((1 << LCD_RST) | (1 << LCD_RS));
     544:	8d b1       	in	r24, 0x0d	; 13
     546:	80 63       	ori	r24, 0x30	; 48
/************************************************************************/
void LCD_Init(void)
{
  SPI_Master_init();
  LCD_GPIOInit();
  Backlight_Init();
     548:	8d b9       	out	0x0d, r24	; 13
  LCD_RESET();
     54a:	f5 dd       	rcall	.-1046   	; 0x136 <Backlight_Init>

  LCD_WR_REG(0xF0);
     54c:	05 df       	rcall	.-502    	; 0x358 <LCD_RESET>
     54e:	80 ef       	ldi	r24, 0xF0	; 240
  LCD_WR_DATA(0xC3);
     550:	fe de       	rcall	.-516    	; 0x34e <LCD_WR_REG>
     552:	83 ec       	ldi	r24, 0xC3	; 195
  LCD_WR_REG(0xF0);
     554:	f7 de       	rcall	.-530    	; 0x344 <LCD_WR_DATA>
     556:	80 ef       	ldi	r24, 0xF0	; 240
  LCD_WR_DATA(0x96);
     558:	fa de       	rcall	.-524    	; 0x34e <LCD_WR_REG>
     55a:	86 e9       	ldi	r24, 0x96	; 150
  LCD_WR_REG(0x36);
     55c:	f3 de       	rcall	.-538    	; 0x344 <LCD_WR_DATA>
     55e:	86 e3       	ldi	r24, 0x36	; 54
  LCD_WR_DATA(0x68);
     560:	f6 de       	rcall	.-532    	; 0x34e <LCD_WR_REG>
     562:	88 e6       	ldi	r24, 0x68	; 104
  LCD_WR_REG(0x3A);
     564:	ef de       	rcall	.-546    	; 0x344 <LCD_WR_DATA>
     566:	8a e3       	ldi	r24, 0x3A	; 58
  LCD_WR_DATA(0x05);
     568:	f2 de       	rcall	.-540    	; 0x34e <LCD_WR_REG>
     56a:	85 e0       	ldi	r24, 0x05	; 5
  LCD_WR_REG(0xB0);
     56c:	eb de       	rcall	.-554    	; 0x344 <LCD_WR_DATA>
     56e:	80 eb       	ldi	r24, 0xB0	; 176
  LCD_WR_DATA(0x80);
     570:	ee de       	rcall	.-548    	; 0x34e <LCD_WR_REG>
     572:	80 e8       	ldi	r24, 0x80	; 128
  LCD_WR_REG(0xB6);
     574:	e7 de       	rcall	.-562    	; 0x344 <LCD_WR_DATA>
     576:	86 eb       	ldi	r24, 0xB6	; 182
  LCD_WR_DATA(0x00);
     578:	ea de       	rcall	.-556    	; 0x34e <LCD_WR_REG>
     57a:	80 e0       	ldi	r24, 0x00	; 0
  LCD_WR_DATA(0x02);
     57c:	e3 de       	rcall	.-570    	; 0x344 <LCD_WR_DATA>
     57e:	82 e0       	ldi	r24, 0x02	; 2
  LCD_WR_REG(0xB5);
     580:	e1 de       	rcall	.-574    	; 0x344 <LCD_WR_DATA>
     582:	85 eb       	ldi	r24, 0xB5	; 181
  LCD_WR_DATA(0x02);
     584:	e4 de       	rcall	.-568    	; 0x34e <LCD_WR_REG>
     586:	82 e0       	ldi	r24, 0x02	; 2
  LCD_WR_DATA(0x03);
     588:	dd de       	rcall	.-582    	; 0x344 <LCD_WR_DATA>
     58a:	83 e0       	ldi	r24, 0x03	; 3
  LCD_WR_DATA(0x00);
     58c:	db de       	rcall	.-586    	; 0x344 <LCD_WR_DATA>
     58e:	80 e0       	ldi	r24, 0x00	; 0
  LCD_WR_DATA(0x04);
     590:	d9 de       	rcall	.-590    	; 0x344 <LCD_WR_DATA>
     592:	84 e0       	ldi	r24, 0x04	; 4
  LCD_WR_REG(0xB1);
     594:	d7 de       	rcall	.-594    	; 0x344 <LCD_WR_DATA>
     596:	81 eb       	ldi	r24, 0xB1	; 177
  LCD_WR_DATA(0x80);
     598:	da de       	rcall	.-588    	; 0x34e <LCD_WR_REG>
     59a:	80 e8       	ldi	r24, 0x80	; 128
  LCD_WR_DATA(0x10);
     59c:	d3 de       	rcall	.-602    	; 0x344 <LCD_WR_DATA>
     59e:	80 e1       	ldi	r24, 0x10	; 16
  LCD_WR_REG(0xB4);
     5a0:	d1 de       	rcall	.-606    	; 0x344 <LCD_WR_DATA>
     5a2:	84 eb       	ldi	r24, 0xB4	; 180
  LCD_WR_DATA(0x00);
     5a4:	d4 de       	rcall	.-600    	; 0x34e <LCD_WR_REG>
     5a6:	80 e0       	ldi	r24, 0x00	; 0
  LCD_WR_REG(0xB7);
     5a8:	cd de       	rcall	.-614    	; 0x344 <LCD_WR_DATA>
     5aa:	87 eb       	ldi	r24, 0xB7	; 183
  LCD_WR_DATA(0xC6);
     5ac:	d0 de       	rcall	.-608    	; 0x34e <LCD_WR_REG>
     5ae:	86 ec       	ldi	r24, 0xC6	; 198
  LCD_WR_REG(0xC5);
     5b0:	c9 de       	rcall	.-622    	; 0x344 <LCD_WR_DATA>
     5b2:	85 ec       	ldi	r24, 0xC5	; 197
  LCD_WR_DATA(0x24);
     5b4:	cc de       	rcall	.-616    	; 0x34e <LCD_WR_REG>
     5b6:	84 e2       	ldi	r24, 0x24	; 36
  LCD_WR_REG(0xE4);
     5b8:	c5 de       	rcall	.-630    	; 0x344 <LCD_WR_DATA>
     5ba:	84 ee       	ldi	r24, 0xE4	; 228
  LCD_WR_DATA(0x31);
     5bc:	c8 de       	rcall	.-624    	; 0x34e <LCD_WR_REG>
     5be:	81 e3       	ldi	r24, 0x31	; 49
  LCD_WR_REG(0xE8);
     5c0:	c1 de       	rcall	.-638    	; 0x344 <LCD_WR_DATA>
     5c2:	88 ee       	ldi	r24, 0xE8	; 232
  LCD_WR_DATA(0x40);
     5c4:	c4 de       	rcall	.-632    	; 0x34e <LCD_WR_REG>
     5c6:	80 e4       	ldi	r24, 0x40	; 64
  LCD_WR_DATA(0x8A);
     5c8:	bd de       	rcall	.-646    	; 0x344 <LCD_WR_DATA>
     5ca:	8a e8       	ldi	r24, 0x8A	; 138
  LCD_WR_DATA(0x00);
     5cc:	bb de       	rcall	.-650    	; 0x344 <LCD_WR_DATA>
     5ce:	80 e0       	ldi	r24, 0x00	; 0
  LCD_WR_DATA(0x00);
     5d0:	b9 de       	rcall	.-654    	; 0x344 <LCD_WR_DATA>
     5d2:	80 e0       	ldi	r24, 0x00	; 0
  LCD_WR_DATA(0x29);
     5d4:	b7 de       	rcall	.-658    	; 0x344 <LCD_WR_DATA>
     5d6:	89 e2       	ldi	r24, 0x29	; 41
  LCD_WR_DATA(0x19);
     5d8:	b5 de       	rcall	.-662    	; 0x344 <LCD_WR_DATA>
     5da:	89 e1       	ldi	r24, 0x19	; 25
  LCD_WR_DATA(0xA5);
     5dc:	b3 de       	rcall	.-666    	; 0x344 <LCD_WR_DATA>
     5de:	85 ea       	ldi	r24, 0xA5	; 165
  LCD_WR_DATA(0x33);
     5e0:	b1 de       	rcall	.-670    	; 0x344 <LCD_WR_DATA>
     5e2:	83 e3       	ldi	r24, 0x33	; 51
  LCD_WR_REG(0xC2);
     5e4:	af de       	rcall	.-674    	; 0x344 <LCD_WR_DATA>
     5e6:	82 ec       	ldi	r24, 0xC2	; 194
  LCD_WR_REG(0xA7);
     5e8:	b2 de       	rcall	.-668    	; 0x34e <LCD_WR_REG>
     5ea:	87 ea       	ldi	r24, 0xA7	; 167

  LCD_WR_REG(0xE0);
     5ec:	b0 de       	rcall	.-672    	; 0x34e <LCD_WR_REG>
     5ee:	80 ee       	ldi	r24, 0xE0	; 224
  LCD_WR_DATA(0xF0);
     5f0:	ae de       	rcall	.-676    	; 0x34e <LCD_WR_REG>
     5f2:	80 ef       	ldi	r24, 0xF0	; 240
  LCD_WR_DATA(0x09);
     5f4:	a7 de       	rcall	.-690    	; 0x344 <LCD_WR_DATA>
     5f6:	89 e0       	ldi	r24, 0x09	; 9
  LCD_WR_DATA(0x13);
     5f8:	a5 de       	rcall	.-694    	; 0x344 <LCD_WR_DATA>
     5fa:	83 e1       	ldi	r24, 0x13	; 19
  LCD_WR_DATA(0x12);
     5fc:	a3 de       	rcall	.-698    	; 0x344 <LCD_WR_DATA>
     5fe:	82 e1       	ldi	r24, 0x12	; 18
  LCD_WR_DATA(0x12);
     600:	a1 de       	rcall	.-702    	; 0x344 <LCD_WR_DATA>
     602:	82 e1       	ldi	r24, 0x12	; 18
  LCD_WR_DATA(0x2B);
     604:	9f de       	rcall	.-706    	; 0x344 <LCD_WR_DATA>
     606:	8b e2       	ldi	r24, 0x2B	; 43
  LCD_WR_DATA(0x3C);
     608:	9d de       	rcall	.-710    	; 0x344 <LCD_WR_DATA>
     60a:	8c e3       	ldi	r24, 0x3C	; 60
  LCD_WR_DATA(0x44);
     60c:	9b de       	rcall	.-714    	; 0x344 <LCD_WR_DATA>
     60e:	84 e4       	ldi	r24, 0x44	; 68
  LCD_WR_DATA(0x4B);
     610:	99 de       	rcall	.-718    	; 0x344 <LCD_WR_DATA>
     612:	8b e4       	ldi	r24, 0x4B	; 75
  LCD_WR_DATA(0x1B);
     614:	97 de       	rcall	.-722    	; 0x344 <LCD_WR_DATA>
     616:	8b e1       	ldi	r24, 0x1B	; 27
  LCD_WR_DATA(0x18);
     618:	95 de       	rcall	.-726    	; 0x344 <LCD_WR_DATA>
     61a:	88 e1       	ldi	r24, 0x18	; 24
  LCD_WR_DATA(0x17);
     61c:	93 de       	rcall	.-730    	; 0x344 <LCD_WR_DATA>
     61e:	87 e1       	ldi	r24, 0x17	; 23
  LCD_WR_DATA(0x1D);
     620:	91 de       	rcall	.-734    	; 0x344 <LCD_WR_DATA>
     622:	8d e1       	ldi	r24, 0x1D	; 29
  LCD_WR_DATA(0x21);
     624:	8f de       	rcall	.-738    	; 0x344 <LCD_WR_DATA>
     626:	81 e2       	ldi	r24, 0x21	; 33
     628:	8d de       	rcall	.-742    	; 0x344 <LCD_WR_DATA>

  LCD_WR_REG(0XE1);
     62a:	81 ee       	ldi	r24, 0xE1	; 225
     62c:	90 de       	rcall	.-736    	; 0x34e <LCD_WR_REG>
     62e:	80 ef       	ldi	r24, 0xF0	; 240
  LCD_WR_DATA(0xF0);
     630:	89 de       	rcall	.-750    	; 0x344 <LCD_WR_DATA>
     632:	89 e0       	ldi	r24, 0x09	; 9
     634:	87 de       	rcall	.-754    	; 0x344 <LCD_WR_DATA>
  LCD_WR_DATA(0x09);
     636:	83 e1       	ldi	r24, 0x13	; 19
     638:	85 de       	rcall	.-758    	; 0x344 <LCD_WR_DATA>
     63a:	8c e0       	ldi	r24, 0x0C	; 12
  LCD_WR_DATA(0x13);
     63c:	83 de       	rcall	.-762    	; 0x344 <LCD_WR_DATA>
     63e:	8d e0       	ldi	r24, 0x0D	; 13
     640:	81 de       	rcall	.-766    	; 0x344 <LCD_WR_DATA>
  LCD_WR_DATA(0x0C);
     642:	87 e2       	ldi	r24, 0x27	; 39
     644:	7f de       	rcall	.-770    	; 0x344 <LCD_WR_DATA>
     646:	8b e3       	ldi	r24, 0x3B	; 59
  LCD_WR_DATA(0x0D);
     648:	7d de       	rcall	.-774    	; 0x344 <LCD_WR_DATA>
     64a:	84 e4       	ldi	r24, 0x44	; 68
     64c:	7b de       	rcall	.-778    	; 0x344 <LCD_WR_DATA>
  LCD_WR_DATA(0x27);
     64e:	8d e4       	ldi	r24, 0x4D	; 77
     650:	79 de       	rcall	.-782    	; 0x344 <LCD_WR_DATA>
     652:	8b e0       	ldi	r24, 0x0B	; 11
  LCD_WR_DATA(0x3B);
     654:	77 de       	rcall	.-786    	; 0x344 <LCD_WR_DATA>
     656:	87 e1       	ldi	r24, 0x17	; 23
     658:	75 de       	rcall	.-790    	; 0x344 <LCD_WR_DATA>
  LCD_WR_DATA(0x44);
     65a:	87 e1       	ldi	r24, 0x17	; 23
     65c:	73 de       	rcall	.-794    	; 0x344 <LCD_WR_DATA>
     65e:	8d e1       	ldi	r24, 0x1D	; 29
  LCD_WR_DATA(0x4D);
     660:	71 de       	rcall	.-798    	; 0x344 <LCD_WR_DATA>
     662:	81 e2       	ldi	r24, 0x21	; 33
     664:	6f de       	rcall	.-802    	; 0x344 <LCD_WR_DATA>
  LCD_WR_DATA(0x0B);
     666:	86 e3       	ldi	r24, 0x36	; 54
     668:	72 de       	rcall	.-796    	; 0x34e <LCD_WR_REG>
     66a:	8c ee       	ldi	r24, 0xEC	; 236
  LCD_WR_DATA(0x17);
     66c:	6b de       	rcall	.-810    	; 0x344 <LCD_WR_DATA>
     66e:	80 ef       	ldi	r24, 0xF0	; 240
     670:	6e de       	rcall	.-804    	; 0x34e <LCD_WR_REG>
  LCD_WR_DATA(0x17);
     672:	83 ec       	ldi	r24, 0xC3	; 195
     674:	67 de       	rcall	.-818    	; 0x344 <LCD_WR_DATA>
     676:	80 ef       	ldi	r24, 0xF0	; 240
  LCD_WR_DATA(0x1D);
     678:	6a de       	rcall	.-812    	; 0x34e <LCD_WR_REG>
     67a:	89 e6       	ldi	r24, 0x69	; 105
     67c:	63 de       	rcall	.-826    	; 0x344 <LCD_WR_DATA>
  LCD_WR_DATA(0x21);
     67e:	83 e1       	ldi	r24, 0x13	; 19
     680:	66 de       	rcall	.-820    	; 0x34e <LCD_WR_REG>
     682:	81 e1       	ldi	r24, 0x11	; 17

  LCD_WR_REG(0X36);
     684:	64 de       	rcall	.-824    	; 0x34e <LCD_WR_REG>
     686:	89 e2       	ldi	r24, 0x29	; 41
     688:	62 de       	rcall	.-828    	; 0x34e <LCD_WR_REG>
  LCD_WR_DATA(0xEC);
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	b3 de       	rcall	.-666    	; 0x3f4 <LCD_direction>
     68e:	84 e6       	ldi	r24, 0x64	; 100
  LCD_WR_REG(0xF0);
     690:	54 dd       	rcall	.-1368   	; 0x13a <SetBackLightDuty>
     692:	80 e0       	ldi	r24, 0x00	; 0
     694:	90 e0       	ldi	r25, 0x00	; 0
  LCD_WR_DATA(0xC3);
     696:	0d cf       	rjmp	.-486    	; 0x4b2 <LCD_Clear>
     698:	08 95       	ret

0000069a <LCD_GUI_DrawPoint>:
     69a:	cf 93       	push	r28
  LCD_WR_REG(0xF0);
     69c:	df 93       	push	r29
     69e:	ea 01       	movw	r28, r20
     6a0:	a5 de       	rcall	.-694    	; 0x3ec <LCD_SetCursor>
  LCD_WR_DATA(0x69);
     6a2:	ce 01       	movw	r24, r28
     6a4:	fb de       	rcall	.-522    	; 0x49c <LCD_WriteData_16Bit>
     6a6:	df 91       	pop	r29
  LCD_WR_REG(0X13);
     6a8:	cf 91       	pop	r28
     6aa:	08 95       	ret

000006ac <LCD_GUI_Fill>:
     6ac:	af 92       	push	r10
  LCD_WR_REG(0X11);
     6ae:	bf 92       	push	r11
     6b0:	cf 92       	push	r12
     6b2:	df 92       	push	r13
  LCD_WR_REG(0X29);
     6b4:	ef 92       	push	r14
     6b6:	ff 92       	push	r15
     6b8:	0f 93       	push	r16

  LCD_direction(LCD_ROTATE_0);
     6ba:	1f 93       	push	r17
     6bc:	cf 93       	push	r28
     6be:	df 93       	push	r29
  SetBackLightDuty(100);
     6c0:	48 17       	cp	r20, r24
     6c2:	59 07       	cpc	r21, r25
     6c4:	28 f4       	brcc	.+10     	; 0x6d0 <LCD_GUI_Fill+0x24>
  LCD_Clear(BLACK);
     6c6:	f8 2f       	mov	r31, r24
     6c8:	e9 2f       	mov	r30, r25
     6ca:	ca 01       	movw	r24, r20
     6cc:	4f 2f       	mov	r20, r31
     6ce:	5e 2f       	mov	r21, r30
    {
      if(temp & (1<<(7-t)))LCD_WriteData_16Bit(fc);
      else LCD_WriteData_16Bit(bc);
    }
  }
}
     6d0:	26 17       	cp	r18, r22
     6d2:	37 07       	cpc	r19, r23
     6d4:	28 f4       	brcc	.+10     	; 0x6e0 <LCD_GUI_Fill+0x34>
     6d6:	f6 2f       	mov	r31, r22
     6d8:	e7 2f       	mov	r30, r23
     6da:	b9 01       	movw	r22, r18
     6dc:	2f 2f       	mov	r18, r31
     6de:	3e 2f       	mov	r19, r30
     6e0:	7a 01       	movw	r14, r20
     6e2:	ef ef       	ldi	r30, 0xFF	; 255
     6e4:	ee 1a       	sub	r14, r30
     6e6:	fe 0a       	sbc	r15, r30
     6e8:	e8 1a       	sub	r14, r24
     6ea:	f9 0a       	sbc	r15, r25
     6ec:	59 01       	movw	r10, r18
     6ee:	ef ef       	ldi	r30, 0xFF	; 255
     6f0:	ae 1a       	sub	r10, r30
     6f2:	be 0a       	sbc	r11, r30
     6f4:	a6 1a       	sub	r10, r22
     6f6:	b7 0a       	sbc	r11, r23
     6f8:	44 de       	rcall	.-888    	; 0x382 <LCD_SetWindows>
     6fa:	a1 14       	cp	r10, r1
     6fc:	b1 04       	cpc	r11, r1
     6fe:	81 f4       	brne	.+32     	; 0x720 <LCD_GUI_Fill+0x74>
     700:	15 c0       	rjmp	.+42     	; 0x72c <LCD_GUI_Fill+0x80>
     702:	c0 e0       	ldi	r28, 0x00	; 0
     704:	d0 e0       	ldi	r29, 0x00	; 0
     706:	c8 01       	movw	r24, r16
     708:	c9 de       	rcall	.-622    	; 0x49c <LCD_WriteData_16Bit>
     70a:	21 96       	adiw	r28, 0x01	; 1
     70c:	ec 16       	cp	r14, r28
     70e:	fd 06       	cpc	r15, r29
     710:	d1 f7       	brne	.-12     	; 0x706 <LCD_GUI_Fill+0x5a>
     712:	8f ef       	ldi	r24, 0xFF	; 255
     714:	c8 1a       	sub	r12, r24
     716:	d8 0a       	sbc	r13, r24
     718:	ac 14       	cp	r10, r12
     71a:	bd 04       	cpc	r11, r13
     71c:	19 f4       	brne	.+6      	; 0x724 <LCD_GUI_Fill+0x78>
     71e:	06 c0       	rjmp	.+12     	; 0x72c <LCD_GUI_Fill+0x80>
     720:	c1 2c       	mov	r12, r1
     722:	d1 2c       	mov	r13, r1
     724:	e1 14       	cp	r14, r1
     726:	f1 04       	cpc	r15, r1
     728:	61 f7       	brne	.-40     	; 0x702 <LCD_GUI_Fill+0x56>
     72a:	f3 cf       	rjmp	.-26     	; 0x712 <LCD_GUI_Fill+0x66>
     72c:	df 91       	pop	r29
     72e:	cf 91       	pop	r28
     730:	1f 91       	pop	r17
     732:	0f 91       	pop	r16
     734:	ff 90       	pop	r15
     736:	ef 90       	pop	r14
     738:	df 90       	pop	r13
     73a:	cf 90       	pop	r12
     73c:	bf 90       	pop	r11
     73e:	af 90       	pop	r10
     740:	08 95       	ret

00000742 <LCD_GUI_DrawLine>:
     742:	2f 92       	push	r2
     744:	3f 92       	push	r3
     746:	4f 92       	push	r4
     748:	5f 92       	push	r5
     74a:	6f 92       	push	r6
     74c:	7f 92       	push	r7
     74e:	8f 92       	push	r8
     750:	9f 92       	push	r9
     752:	af 92       	push	r10
     754:	bf 92       	push	r11
     756:	cf 92       	push	r12
     758:	df 92       	push	r13
     75a:	ef 92       	push	r14
     75c:	ff 92       	push	r15
     75e:	0f 93       	push	r16
     760:	1f 93       	push	r17
     762:	cf 93       	push	r28
     764:	df 93       	push	r29
     766:	cd b7       	in	r28, 0x3d	; 61
     768:	de b7       	in	r29, 0x3e	; 62
     76a:	28 97       	sbiw	r28, 0x08	; 8
     76c:	0f b6       	in	r0, 0x3f	; 63
     76e:	f8 94       	cli
     770:	de bf       	out	0x3e, r29	; 62
     772:	0f be       	out	0x3f, r0	; 63
     774:	cd bf       	out	0x3d, r28	; 61
     776:	1a 83       	std	Y+2, r17	; 0x02
     778:	09 83       	std	Y+1, r16	; 0x01
     77a:	6a 01       	movw	r12, r20
     77c:	c8 1a       	sub	r12, r24
     77e:	d9 0a       	sbc	r13, r25
     780:	39 01       	movw	r6, r18
     782:	66 1a       	sub	r6, r22
     784:	77 0a       	sbc	r7, r23
     786:	1c 01       	movw	r2, r24
     788:	2b 01       	movw	r4, r22
     78a:	1c 14       	cp	r1, r12
     78c:	1d 04       	cpc	r1, r13
     78e:	5c f0       	brlt	.+22     	; 0x7a6 <LCD_GUI_DrawLine+0x64>
     790:	c1 14       	cp	r12, r1
     792:	d1 04       	cpc	r13, r1
     794:	69 f0       	breq	.+26     	; 0x7b0 <LCD_GUI_DrawLine+0x6e>
     796:	d1 94       	neg	r13
     798:	c1 94       	neg	r12
     79a:	d1 08       	sbc	r13, r1
     79c:	8f ef       	ldi	r24, 0xFF	; 255
     79e:	9f ef       	ldi	r25, 0xFF	; 255
     7a0:	9c 83       	std	Y+4, r25	; 0x04
     7a2:	8b 83       	std	Y+3, r24	; 0x03
     7a4:	07 c0       	rjmp	.+14     	; 0x7b4 <LCD_GUI_DrawLine+0x72>
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	9c 83       	std	Y+4, r25	; 0x04
     7ac:	8b 83       	std	Y+3, r24	; 0x03
     7ae:	02 c0       	rjmp	.+4      	; 0x7b4 <LCD_GUI_DrawLine+0x72>
     7b0:	1c 82       	std	Y+4, r1	; 0x04
     7b2:	1b 82       	std	Y+3, r1	; 0x03
     7b4:	16 14       	cp	r1, r6
     7b6:	17 04       	cpc	r1, r7
     7b8:	5c f0       	brlt	.+22     	; 0x7d0 <LCD_GUI_DrawLine+0x8e>
     7ba:	61 14       	cp	r6, r1
     7bc:	71 04       	cpc	r7, r1
     7be:	69 f0       	breq	.+26     	; 0x7da <LCD_GUI_DrawLine+0x98>
     7c0:	71 94       	neg	r7
     7c2:	61 94       	neg	r6
     7c4:	71 08       	sbc	r7, r1
     7c6:	8f ef       	ldi	r24, 0xFF	; 255
     7c8:	9f ef       	ldi	r25, 0xFF	; 255
     7ca:	9e 83       	std	Y+6, r25	; 0x06
     7cc:	8d 83       	std	Y+5, r24	; 0x05
     7ce:	07 c0       	rjmp	.+14     	; 0x7de <LCD_GUI_DrawLine+0x9c>
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	9e 83       	std	Y+6, r25	; 0x06
     7d6:	8d 83       	std	Y+5, r24	; 0x05
     7d8:	02 c0       	rjmp	.+4      	; 0x7de <LCD_GUI_DrawLine+0x9c>
     7da:	1e 82       	std	Y+6, r1	; 0x06
     7dc:	1d 82       	std	Y+5, r1	; 0x05
     7de:	76 01       	movw	r14, r12
     7e0:	c6 14       	cp	r12, r6
     7e2:	d7 04       	cpc	r13, r7
     7e4:	0c f4       	brge	.+2      	; 0x7e8 <LCD_GUI_DrawLine+0xa6>
     7e6:	73 01       	movw	r14, r6
     7e8:	57 01       	movw	r10, r14
     7ea:	9f ef       	ldi	r25, 0xFF	; 255
     7ec:	a9 1a       	sub	r10, r25
     7ee:	b9 0a       	sbc	r11, r25
     7f0:	00 e0       	ldi	r16, 0x00	; 0
     7f2:	10 e0       	ldi	r17, 0x00	; 0
     7f4:	18 86       	std	Y+8, r1	; 0x08
     7f6:	1f 82       	std	Y+7, r1	; 0x07
     7f8:	81 2c       	mov	r8, r1
     7fa:	91 2c       	mov	r9, r1
     7fc:	49 81       	ldd	r20, Y+1	; 0x01
     7fe:	5a 81       	ldd	r21, Y+2	; 0x02
     800:	b2 01       	movw	r22, r4
     802:	c1 01       	movw	r24, r2
     804:	4a df       	rcall	.-364    	; 0x69a <LCD_GUI_DrawPoint>
     806:	8f 81       	ldd	r24, Y+7	; 0x07
     808:	98 85       	ldd	r25, Y+8	; 0x08
     80a:	8c 0d       	add	r24, r12
     80c:	9d 1d       	adc	r25, r13
     80e:	98 87       	std	Y+8, r25	; 0x08
     810:	8f 83       	std	Y+7, r24	; 0x07
     812:	06 0d       	add	r16, r6
     814:	17 1d       	adc	r17, r7
     816:	e8 16       	cp	r14, r24
     818:	f9 06       	cpc	r15, r25
     81a:	44 f4       	brge	.+16     	; 0x82c <LCD_GUI_DrawLine+0xea>
     81c:	8e 19       	sub	r24, r14
     81e:	9f 09       	sbc	r25, r15
     820:	98 87       	std	Y+8, r25	; 0x08
     822:	8f 83       	std	Y+7, r24	; 0x07
     824:	8b 81       	ldd	r24, Y+3	; 0x03
     826:	9c 81       	ldd	r25, Y+4	; 0x04
     828:	28 0e       	add	r2, r24
     82a:	39 1e       	adc	r3, r25
     82c:	e0 16       	cp	r14, r16
     82e:	f1 06       	cpc	r15, r17
     830:	34 f4       	brge	.+12     	; 0x83e <LCD_GUI_DrawLine+0xfc>
     832:	0e 19       	sub	r16, r14
     834:	1f 09       	sbc	r17, r15
     836:	8d 81       	ldd	r24, Y+5	; 0x05
     838:	9e 81       	ldd	r25, Y+6	; 0x06
     83a:	48 0e       	add	r4, r24
     83c:	59 1e       	adc	r5, r25
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	89 1a       	sub	r8, r25
     842:	99 0a       	sbc	r9, r25
     844:	a8 14       	cp	r10, r8
     846:	b9 04       	cpc	r11, r9
     848:	c8 f6       	brcc	.-78     	; 0x7fc <LCD_GUI_DrawLine+0xba>
     84a:	28 96       	adiw	r28, 0x08	; 8
     84c:	0f b6       	in	r0, 0x3f	; 63
     84e:	f8 94       	cli
     850:	de bf       	out	0x3e, r29	; 62
     852:	0f be       	out	0x3f, r0	; 63
     854:	cd bf       	out	0x3d, r28	; 61
     856:	df 91       	pop	r29
     858:	cf 91       	pop	r28
     85a:	1f 91       	pop	r17
     85c:	0f 91       	pop	r16
     85e:	ff 90       	pop	r15
     860:	ef 90       	pop	r14
     862:	df 90       	pop	r13
     864:	cf 90       	pop	r12
     866:	bf 90       	pop	r11
     868:	af 90       	pop	r10
     86a:	9f 90       	pop	r9
     86c:	8f 90       	pop	r8
     86e:	7f 90       	pop	r7
     870:	6f 90       	pop	r6
     872:	5f 90       	pop	r5
     874:	4f 90       	pop	r4
     876:	3f 90       	pop	r3
     878:	2f 90       	pop	r2
     87a:	08 95       	ret

0000087c <LCD_GUI_DrawRectangle>:
     87c:	8f 92       	push	r8
     87e:	9f 92       	push	r9
     880:	af 92       	push	r10
     882:	bf 92       	push	r11
     884:	cf 92       	push	r12
     886:	df 92       	push	r13
     888:	ef 92       	push	r14
     88a:	ff 92       	push	r15
     88c:	0f 93       	push	r16
     88e:	1f 93       	push	r17
     890:	cf 93       	push	r28
     892:	df 93       	push	r29
     894:	4c 01       	movw	r8, r24
     896:	7b 01       	movw	r14, r22
     898:	ea 01       	movw	r28, r20
     89a:	69 01       	movw	r12, r18
     89c:	9b 01       	movw	r18, r22
     89e:	51 df       	rcall	.-350    	; 0x742 <LCD_GUI_DrawLine>
     8a0:	96 01       	movw	r18, r12
     8a2:	a4 01       	movw	r20, r8
     8a4:	b7 01       	movw	r22, r14
     8a6:	c4 01       	movw	r24, r8
     8a8:	4c df       	rcall	.-360    	; 0x742 <LCD_GUI_DrawLine>
     8aa:	96 01       	movw	r18, r12
     8ac:	ae 01       	movw	r20, r28
     8ae:	b6 01       	movw	r22, r12
     8b0:	c4 01       	movw	r24, r8
     8b2:	47 df       	rcall	.-370    	; 0x742 <LCD_GUI_DrawLine>
     8b4:	96 01       	movw	r18, r12
     8b6:	ae 01       	movw	r20, r28
     8b8:	b7 01       	movw	r22, r14
     8ba:	ce 01       	movw	r24, r28
     8bc:	42 df       	rcall	.-380    	; 0x742 <LCD_GUI_DrawLine>
     8be:	df 91       	pop	r29
     8c0:	cf 91       	pop	r28
     8c2:	1f 91       	pop	r17
     8c4:	0f 91       	pop	r16
     8c6:	ff 90       	pop	r15
     8c8:	ef 90       	pop	r14
     8ca:	df 90       	pop	r13
     8cc:	cf 90       	pop	r12
     8ce:	bf 90       	pop	r11
     8d0:	af 90       	pop	r10
     8d2:	9f 90       	pop	r9
     8d4:	8f 90       	pop	r8
     8d6:	08 95       	ret

000008d8 <LCD_GUI_DrawFillRectangle>:
     8d8:	0f 93       	push	r16
     8da:	1f 93       	push	r17
     8dc:	e7 de       	rcall	.-562    	; 0x6ac <LCD_GUI_Fill>
     8de:	1f 91       	pop	r17
     8e0:	0f 91       	pop	r16
     8e2:	08 95       	ret

000008e4 <LCD_ShowChar>:
     8e4:	3f 92       	push	r3
     8e6:	4f 92       	push	r4
     8e8:	5f 92       	push	r5
     8ea:	6f 92       	push	r6
     8ec:	7f 92       	push	r7
     8ee:	8f 92       	push	r8
     8f0:	9f 92       	push	r9
     8f2:	af 92       	push	r10
     8f4:	bf 92       	push	r11
     8f6:	cf 92       	push	r12
     8f8:	df 92       	push	r13
     8fa:	ef 92       	push	r14
     8fc:	ff 92       	push	r15
     8fe:	0f 93       	push	r16
     900:	1f 93       	push	r17
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	6a 01       	movw	r12, r20
     908:	59 01       	movw	r10, r18
     90a:	00 52       	subi	r16, 0x20	; 32
     90c:	6e 2c       	mov	r6, r14
     90e:	71 2c       	mov	r7, r1
     910:	23 01       	movw	r4, r6
     912:	44 0c       	add	r4, r4
     914:	55 1c       	adc	r5, r5
     916:	44 0c       	add	r4, r4
     918:	55 1c       	adc	r5, r5
     91a:	44 0c       	add	r4, r4
     91c:	55 1c       	adc	r5, r5
     91e:	44 0c       	add	r4, r4
     920:	55 1c       	adc	r5, r5
     922:	66 0c       	add	r6, r6
     924:	77 1c       	adc	r7, r7
     926:	66 0c       	add	r6, r6
     928:	77 1c       	adc	r7, r7
     92a:	66 0c       	add	r6, r6
     92c:	77 1c       	adc	r7, r7
     92e:	9b 01       	movw	r18, r22
     930:	21 50       	subi	r18, 0x01	; 1
     932:	31 09       	sbc	r19, r1
     934:	24 0d       	add	r18, r4
     936:	35 1d       	adc	r19, r5
     938:	ac 01       	movw	r20, r24
     93a:	41 50       	subi	r20, 0x01	; 1
     93c:	51 09       	sbc	r21, r1
     93e:	46 0d       	add	r20, r6
     940:	57 1d       	adc	r21, r7
     942:	1f dd       	rcall	.-1474   	; 0x382 <LCD_SetWindows>
     944:	14 14       	cp	r1, r4
     946:	15 04       	cpc	r1, r5
     948:	bc f5       	brge	.+110    	; 0x9b8 <LCD_ShowChar+0xd4>
     94a:	20 e1       	ldi	r18, 0x10	; 16
     94c:	02 9f       	mul	r16, r18
     94e:	c0 01       	movw	r24, r0
     950:	11 24       	eor	r1, r1
     952:	31 2c       	mov	r3, r1
     954:	9c 01       	movw	r18, r24
     956:	27 5f       	subi	r18, 0xF7	; 247
     958:	3d 4f       	sbci	r19, 0xFD	; 253
     95a:	49 01       	movw	r8, r18
     95c:	07 e0       	ldi	r16, 0x07	; 7
     95e:	10 e0       	ldi	r17, 0x00	; 0
     960:	83 2d       	mov	r24, r3
     962:	6e 2d       	mov	r22, r14
     964:	05 d6       	rcall	.+3082   	; 0x1570 <__udivmodqi4>
     966:	f4 01       	movw	r30, r8
     968:	e8 0f       	add	r30, r24
     96a:	f1 1d       	adc	r31, r1
     96c:	c5 81       	ldd	r28, Z+5	; 0x05
     96e:	16 14       	cp	r1, r6
     970:	17 04       	cpc	r1, r7
     972:	e4 f4       	brge	.+56     	; 0x9ac <LCD_ShowChar+0xc8>
     974:	f1 2c       	mov	r15, r1
     976:	d0 e0       	ldi	r29, 0x00	; 0
     978:	8f 2d       	mov	r24, r15
     97a:	6e 2d       	mov	r22, r14
     97c:	f9 d5       	rcall	.+3058   	; 0x1570 <__udivmodqi4>
     97e:	98 01       	movw	r18, r16
     980:	28 1b       	sub	r18, r24
     982:	31 09       	sbc	r19, r1
     984:	c9 01       	movw	r24, r18
     986:	9e 01       	movw	r18, r28
     988:	02 c0       	rjmp	.+4      	; 0x98e <LCD_ShowChar+0xaa>
     98a:	35 95       	asr	r19
     98c:	27 95       	ror	r18
     98e:	8a 95       	dec	r24
     990:	e2 f7       	brpl	.-8      	; 0x98a <LCD_ShowChar+0xa6>
     992:	20 ff       	sbrs	r18, 0
     994:	03 c0       	rjmp	.+6      	; 0x99c <LCD_ShowChar+0xb8>
     996:	c6 01       	movw	r24, r12
     998:	81 dd       	rcall	.-1278   	; 0x49c <LCD_WriteData_16Bit>
     99a:	02 c0       	rjmp	.+4      	; 0x9a0 <LCD_ShowChar+0xbc>
     99c:	c5 01       	movw	r24, r10
     99e:	7e dd       	rcall	.-1284   	; 0x49c <LCD_WriteData_16Bit>
     9a0:	f3 94       	inc	r15
     9a2:	8f 2d       	mov	r24, r15
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	86 15       	cp	r24, r6
     9a8:	97 05       	cpc	r25, r7
     9aa:	34 f3       	brlt	.-52     	; 0x978 <LCD_ShowChar+0x94>
     9ac:	33 94       	inc	r3
     9ae:	83 2d       	mov	r24, r3
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	84 15       	cp	r24, r4
     9b4:	95 05       	cpc	r25, r5
     9b6:	a4 f2       	brlt	.-88     	; 0x960 <LCD_ShowChar+0x7c>
     9b8:	df 91       	pop	r29
     9ba:	cf 91       	pop	r28
     9bc:	1f 91       	pop	r17
     9be:	0f 91       	pop	r16
     9c0:	ff 90       	pop	r15
     9c2:	ef 90       	pop	r14
     9c4:	df 90       	pop	r13
     9c6:	cf 90       	pop	r12
     9c8:	bf 90       	pop	r11
     9ca:	af 90       	pop	r10
     9cc:	9f 90       	pop	r9
     9ce:	8f 90       	pop	r8
     9d0:	7f 90       	pop	r7
     9d2:	6f 90       	pop	r6
     9d4:	5f 90       	pop	r5
     9d6:	4f 90       	pop	r4
     9d8:	3f 90       	pop	r3
     9da:	08 95       	ret

000009dc <LCD_ShowString>:
// 
//   LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);
// }

void LCD_ShowString(uint16_t x,uint16_t y,uint8_t size, uint8_t *p, uint16_t fc, uint16_t bc, uint8_t mode)
{
     9dc:	2f 92       	push	r2
     9de:	3f 92       	push	r3
     9e0:	4f 92       	push	r4
     9e2:	5f 92       	push	r5
     9e4:	6f 92       	push	r6
     9e6:	7f 92       	push	r7
     9e8:	8f 92       	push	r8
     9ea:	9f 92       	push	r9
     9ec:	af 92       	push	r10
     9ee:	bf 92       	push	r11
     9f0:	cf 92       	push	r12
     9f2:	df 92       	push	r13
     9f4:	ef 92       	push	r14
     9f6:	ff 92       	push	r15
     9f8:	0f 93       	push	r16
     9fa:	1f 93       	push	r17
     9fc:	cf 93       	push	r28
     9fe:	df 93       	push	r29
     a00:	00 d0       	rcall	.+0      	; 0xa02 <LCD_ShowString+0x26>
     a02:	1f 92       	push	r1
     a04:	cd b7       	in	r28, 0x3d	; 61
     a06:	de b7       	in	r29, 0x3e	; 62
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	4b 01       	movw	r8, r22
     a0e:	d4 2e       	mov	r13, r20
     a10:	1a 83       	std	Y+2, r17	; 0x02
     a12:	09 83       	std	Y+1, r16	; 0x01
     a14:	17 01       	movw	r2, r14
     a16:	1c 2d       	mov	r17, r12
  while((*p<='~')&&(*p>=' '))
     a18:	f9 01       	movw	r30, r18
     a1a:	00 81       	ld	r16, Z
     a1c:	80 ee       	ldi	r24, 0xE0	; 224
     a1e:	80 0f       	add	r24, r16
     a20:	8f 35       	cpi	r24, 0x5F	; 95
     a22:	08 f0       	brcs	.+2      	; 0xa26 <LCD_ShowString+0x4a>
     a24:	4b c0       	rjmp	.+150    	; 0xabc <LCD_ShowString+0xe0>
  {
    if(x>(lcddev.width-1)||y>(lcddev.height-1))
     a26:	80 91 d8 0a 	lds	r24, 0x0AD8	; 0x800ad8 <lcddev>
     a2a:	90 91 d9 0a 	lds	r25, 0x0AD9	; 0x800ad9 <lcddev+0x1>
     a2e:	01 97       	sbiw	r24, 0x01	; 1
     a30:	4b 81       	ldd	r20, Y+3	; 0x03
     a32:	5c 81       	ldd	r21, Y+4	; 0x04
     a34:	84 17       	cp	r24, r20
     a36:	95 07       	cpc	r25, r21
     a38:	08 f4       	brcc	.+2      	; 0xa3c <LCD_ShowString+0x60>
     a3a:	40 c0       	rjmp	.+128    	; 0xabc <LCD_ShowString+0xe0>
     a3c:	80 91 da 0a 	lds	r24, 0x0ADA	; 0x800ada <lcddev+0x2>
     a40:	90 91 db 0a 	lds	r25, 0x0ADB	; 0x800adb <lcddev+0x3>
     a44:	01 97       	sbiw	r24, 0x01	; 1
     a46:	86 17       	cp	r24, r22
     a48:	97 07       	cpc	r25, r23
     a4a:	c0 f1       	brcs	.+112    	; 0xabc <LCD_ShowString+0xe0>
    return;
    LCD_ShowChar(x,y,fc,bc,*p,size,mode);
    x+=8*size;
     a4c:	4d 2c       	mov	r4, r13
     a4e:	51 2c       	mov	r5, r1
     a50:	44 0c       	add	r4, r4
     a52:	55 1c       	adc	r5, r5
     a54:	44 0c       	add	r4, r4
     a56:	55 1c       	adc	r5, r5
     a58:	44 0c       	add	r4, r4
     a5a:	55 1c       	adc	r5, r5
     a5c:	59 01       	movw	r10, r18
     a5e:	5f ef       	ldi	r21, 0xFF	; 255
     a60:	a5 1a       	sub	r10, r21
     a62:	b5 0a       	sbc	r11, r21

void LCD_ShowString(uint16_t x,uint16_t y,uint8_t size, uint8_t *p, uint16_t fc, uint16_t bc, uint8_t mode)
{
  while((*p<='~')&&(*p>=' '))
  {
    if(x>(lcddev.width-1)||y>(lcddev.height-1))
     a64:	0f 2e       	mov	r0, r31
     a66:	f8 ed       	ldi	r31, 0xD8	; 216
     a68:	6f 2e       	mov	r6, r31
     a6a:	fa e0       	ldi	r31, 0x0A	; 10
     a6c:	7f 2e       	mov	r7, r31
     a6e:	f0 2d       	mov	r31, r0
     a70:	0f c0       	rjmp	.+30     	; 0xa90 <LCD_ShowString+0xb4>
     a72:	f3 01       	movw	r30, r6
     a74:	80 81       	ld	r24, Z
     a76:	91 81       	ldd	r25, Z+1	; 0x01
     a78:	01 97       	sbiw	r24, 0x01	; 1
     a7a:	2b 81       	ldd	r18, Y+3	; 0x03
     a7c:	3c 81       	ldd	r19, Y+4	; 0x04
     a7e:	82 17       	cp	r24, r18
     a80:	93 07       	cpc	r25, r19
     a82:	e0 f0       	brcs	.+56     	; 0xabc <LCD_ShowString+0xe0>
     a84:	82 81       	ldd	r24, Z+2	; 0x02
     a86:	93 81       	ldd	r25, Z+3	; 0x03
     a88:	01 97       	sbiw	r24, 0x01	; 1
     a8a:	88 15       	cp	r24, r8
     a8c:	99 05       	cpc	r25, r9
     a8e:	b0 f0       	brcs	.+44     	; 0xabc <LCD_ShowString+0xe0>
    return;
    LCD_ShowChar(x,y,fc,bc,*p,size,mode);
     a90:	c1 2e       	mov	r12, r17
     a92:	ed 2c       	mov	r14, r13
     a94:	91 01       	movw	r18, r2
     a96:	49 81       	ldd	r20, Y+1	; 0x01
     a98:	5a 81       	ldd	r21, Y+2	; 0x02
     a9a:	b4 01       	movw	r22, r8
     a9c:	8b 81       	ldd	r24, Y+3	; 0x03
     a9e:	9c 81       	ldd	r25, Y+4	; 0x04
     aa0:	21 df       	rcall	.-446    	; 0x8e4 <LCD_ShowChar>
    x+=8*size;
     aa2:	4b 81       	ldd	r20, Y+3	; 0x03
     aa4:	5c 81       	ldd	r21, Y+4	; 0x04
     aa6:	44 0d       	add	r20, r4
     aa8:	55 1d       	adc	r21, r5
     aaa:	5c 83       	std	Y+4, r21	; 0x04
     aac:	4b 83       	std	Y+3, r20	; 0x03
//   LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);
// }

void LCD_ShowString(uint16_t x,uint16_t y,uint8_t size, uint8_t *p, uint16_t fc, uint16_t bc, uint8_t mode)
{
  while((*p<='~')&&(*p>=' '))
     aae:	f5 01       	movw	r30, r10
     ab0:	01 91       	ld	r16, Z+
     ab2:	5f 01       	movw	r10, r30
     ab4:	80 ee       	ldi	r24, 0xE0	; 224
     ab6:	80 0f       	add	r24, r16
     ab8:	8f 35       	cpi	r24, 0x5F	; 95
     aba:	d8 f2       	brcs	.-74     	; 0xa72 <LCD_ShowString+0x96>
    return;
    LCD_ShowChar(x,y,fc,bc,*p,size,mode);
    x+=8*size;
    p++;
  }
}
     abc:	0f 90       	pop	r0
     abe:	0f 90       	pop	r0
     ac0:	0f 90       	pop	r0
     ac2:	0f 90       	pop	r0
     ac4:	df 91       	pop	r29
     ac6:	cf 91       	pop	r28
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	df 90       	pop	r13
     ad2:	cf 90       	pop	r12
     ad4:	bf 90       	pop	r11
     ad6:	af 90       	pop	r10
     ad8:	9f 90       	pop	r9
     ada:	8f 90       	pop	r8
     adc:	7f 90       	pop	r7
     ade:	6f 90       	pop	r6
     ae0:	5f 90       	pop	r5
     ae2:	4f 90       	pop	r4
     ae4:	3f 90       	pop	r3
     ae6:	2f 90       	pop	r2
     ae8:	08 95       	ret

00000aea <SPI_Master_init>:
  SPI_Clock_Polarity_Select(LEADING_EDGE_RISING);
  SPI_Clock_Phase_Select(LEADING_EDGE_SAMPLE);
  SPI_Clock_Rate(SPI_CLOCK_RATE_8MHz);
  SPI_enable();

  mIsSlaveInitialised = true;
     aea:	80 91 9c 08 	lds	r24, 0x089C	; 0x80089c <mIsMasterInitialised>
     aee:	90 91 9d 08 	lds	r25, 0x089D	; 0x80089d <mIsMasterInitialised+0x1>
     af2:	89 2b       	or	r24, r25
     af4:	09 f5       	brne	.+66     	; 0xb38 <SPI_Master_init+0x4e>
     af6:	84 b1       	in	r24, 0x04	; 4
     af8:	87 60       	ori	r24, 0x07	; 7
     afa:	84 b9       	out	0x04, r24	; 4
     afc:	8c b5       	in	r24, 0x2c	; 44
     afe:	80 61       	ori	r24, 0x10	; 16
     b00:	8c bd       	out	0x2c, r24	; 44
     b02:	8c b5       	in	r24, 0x2c	; 44
     b04:	8f 7d       	andi	r24, 0xDF	; 223
     b06:	8c bd       	out	0x2c, r24	; 44
     b08:	8c b5       	in	r24, 0x2c	; 44
     b0a:	87 7f       	andi	r24, 0xF7	; 247
     b0c:	8c bd       	out	0x2c, r24	; 44
     b0e:	8c b5       	in	r24, 0x2c	; 44
     b10:	8b 7f       	andi	r24, 0xFB	; 251
     b12:	8c bd       	out	0x2c, r24	; 44
     b14:	8c b5       	in	r24, 0x2c	; 44
     b16:	8d 7f       	andi	r24, 0xFD	; 253
     b18:	8c bd       	out	0x2c, r24	; 44
     b1a:	8c b5       	in	r24, 0x2c	; 44
     b1c:	8e 7f       	andi	r24, 0xFE	; 254
     b1e:	8c bd       	out	0x2c, r24	; 44
     b20:	8d b5       	in	r24, 0x2d	; 45
     b22:	81 60       	ori	r24, 0x01	; 1
     b24:	8d bd       	out	0x2d, r24	; 45
     b26:	8c b5       	in	r24, 0x2c	; 44
     b28:	80 64       	ori	r24, 0x40	; 64
     b2a:	8c bd       	out	0x2c, r24	; 44
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	90 93 9d 08 	sts	0x089D, r25	; 0x80089d <mIsMasterInitialised+0x1>
     b34:	80 93 9c 08 	sts	0x089C, r24	; 0x80089c <mIsMasterInitialised>
     b38:	08 95       	ret

00000b3a <SPI_Master_transmit>:
}

//Need to select slave before sending the data
char SPI_Master_transmit(char data)
{
  SPDR = data;
     b3a:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & (1<<SPIF))) {};
     b3c:	0d b4       	in	r0, 0x2d	; 45
     b3e:	07 fe       	sbrs	r0, 7
     b40:	fd cf       	rjmp	.-6      	; 0xb3c <SPI_Master_transmit+0x2>
  return SPDR;
     b42:	8e b5       	in	r24, 0x2e	; 46
}
     b44:	08 95       	ret

00000b46 <USART_putstring>:
long USART_received_Int(void)
{
	long number;
	number = atol(Rx_buffer);
	return number;
}
     b46:	cf 93       	push	r28
     b48:	df 93       	push	r29
     b4a:	fc 01       	movw	r30, r24
     b4c:	20 81       	ld	r18, Z
     b4e:	22 23       	and	r18, r18
     b50:	69 f0       	breq	.+26     	; 0xb6c <USART_putstring+0x26>
     b52:	dc 01       	movw	r26, r24
     b54:	11 96       	adiw	r26, 0x01	; 1
     b56:	e0 ec       	ldi	r30, 0xC0	; 192
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	c6 ec       	ldi	r28, 0xC6	; 198
     b5c:	d0 e0       	ldi	r29, 0x00	; 0
     b5e:	90 81       	ld	r25, Z
     b60:	95 ff       	sbrs	r25, 5
     b62:	fd cf       	rjmp	.-6      	; 0xb5e <USART_putstring+0x18>
     b64:	28 83       	st	Y, r18
     b66:	2d 91       	ld	r18, X+
     b68:	21 11       	cpse	r18, r1
     b6a:	f9 cf       	rjmp	.-14     	; 0xb5e <USART_putstring+0x18>
     b6c:	df 91       	pop	r29
     b6e:	cf 91       	pop	r28
     b70:	08 95       	ret

00000b72 <__vector_25>:
  while (!(UCSR0A & (1 << UDRE0)));  //wait until UDRE0 is set
  UDR0 = data;
}

ISR(USART0_RX_vect)
{
     b72:	1f 92       	push	r1
     b74:	0f 92       	push	r0
     b76:	0f b6       	in	r0, 0x3f	; 63
     b78:	0f 92       	push	r0
     b7a:	11 24       	eor	r1, r1
     b7c:	0b b6       	in	r0, 0x3b	; 59
     b7e:	0f 92       	push	r0
     b80:	2f 93       	push	r18
     b82:	3f 93       	push	r19
     b84:	4f 93       	push	r20
     b86:	5f 93       	push	r21
     b88:	6f 93       	push	r22
     b8a:	7f 93       	push	r23
     b8c:	8f 93       	push	r24
     b8e:	9f 93       	push	r25
     b90:	af 93       	push	r26
     b92:	bf 93       	push	r27
     b94:	ef 93       	push	r30
     b96:	ff 93       	push	r31
	char ReceivedByte;
	ReceivedByte = UDR0; // Fetch the received byte value into the variable "ByteReceived"
     b98:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	//UDR0 = ReceivedByte; // Echo back the received byte back to the computer
	Rx_buffer[Rx_buffer_index++] = ReceivedByte;
     b9c:	e0 91 9e 08 	lds	r30, 0x089E	; 0x80089e <Rx_buffer_index>
     ba0:	91 e0       	ldi	r25, 0x01	; 1
     ba2:	9e 0f       	add	r25, r30
     ba4:	90 93 9e 08 	sts	0x089E, r25	; 0x80089e <Rx_buffer_index>
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	e3 5f       	subi	r30, 0xF3	; 243
     bac:	f4 4f       	sbci	r31, 0xF4	; 244
     bae:	80 83       	st	Z, r24
	if (ReceivedByte == '\n') 
     bb0:	8a 30       	cpi	r24, 0x0A	; 10
     bb2:	71 f4       	brne	.+28     	; 0xbd0 <__vector_25+0x5e>
	{
		Rx_buffer[Rx_buffer_index] = 0; //put zero to terminate the string array
     bb4:	e0 91 9e 08 	lds	r30, 0x089E	; 0x80089e <Rx_buffer_index>
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	e3 5f       	subi	r30, 0xF3	; 243
     bbc:	f4 4f       	sbci	r31, 0xF4	; 244
     bbe:	10 82       	st	Z, r1
		USART_putstring("[Rx echo]: ");
     bc0:	85 e0       	ldi	r24, 0x05	; 5
     bc2:	98 e0       	ldi	r25, 0x08	; 8
     bc4:	c0 df       	rcall	.-128    	; 0xb46 <USART_putstring>
		USART_putstring(Rx_buffer);
     bc6:	8d e0       	ldi	r24, 0x0D	; 13
     bc8:	9b e0       	ldi	r25, 0x0B	; 11
     bca:	bd df       	rcall	.-134    	; 0xb46 <USART_putstring>
		Rx_buffer_index = 0;
     bcc:	10 92 9e 08 	sts	0x089E, r1	; 0x80089e <Rx_buffer_index>
		ReceivedByte = 0x00;
	}
}
     bd0:	ff 91       	pop	r31
     bd2:	ef 91       	pop	r30
     bd4:	bf 91       	pop	r27
     bd6:	af 91       	pop	r26
     bd8:	9f 91       	pop	r25
     bda:	8f 91       	pop	r24
     bdc:	7f 91       	pop	r23
     bde:	6f 91       	pop	r22
     be0:	5f 91       	pop	r21
     be2:	4f 91       	pop	r20
     be4:	3f 91       	pop	r19
     be6:	2f 91       	pop	r18
     be8:	0f 90       	pop	r0
     bea:	0b be       	out	0x3b, r0	; 59
     bec:	0f 90       	pop	r0
     bee:	0f be       	out	0x3f, r0	; 63
     bf0:	0f 90       	pop	r0
     bf2:	1f 90       	pop	r1
     bf4:	18 95       	reti

00000bf6 <main>:
  MAGENTA,
  BROWN
};

int main(void)
{
     bf6:	cf 93       	push	r28
     bf8:	df 93       	push	r29
     bfa:	cd b7       	in	r28, 0x3d	; 61
     bfc:	de b7       	in	r29, 0x3e	; 62
     bfe:	65 97       	sbiw	r28, 0x15	; 21
     c00:	0f b6       	in	r0, 0x3f	; 63
     c02:	f8 94       	cli
     c04:	de bf       	out	0x3e, r29	; 62
     c06:	0f be       	out	0x3f, r0	; 63
     c08:	cd bf       	out	0x3d, r28	; 61
  LCD_Init();
     c0a:	9b dc       	rcall	.-1738   	; 0x542 <LCD_Init>
  LCD_SetBackLight(20);
     c0c:	84 e1       	ldi	r24, 0x14	; 20
     c0e:	44 dc       	rcall	.-1912   	; 0x498 <LCD_SetBackLight>
  LCD_direction(LCD_ROTATE_90);
     c10:	81 e0       	ldi	r24, 0x01	; 1
  pDDRV_Button_init();
     c12:	f0 db       	rcall	.-2080   	; 0x3f4 <LCD_direction>
     c14:	f2 da       	rcall	.-2588   	; 0x1fa <pDDRV_Button_init>
  
  aTRS_ENG_drawBoundary();
     c16:	f7 d0       	rcall	.+494    	; 0xe06 <aTRS_ENG_drawBoundary>
     c18:	c1 2c       	mov	r12, r1
  LCD_ShowString(320, 20, 2, "TETRIS", YELLOW, BLACK, 0);
     c1a:	d1 2c       	mov	r13, r1
     c1c:	e1 2c       	mov	r14, r1
     c1e:	f1 2c       	mov	r15, r1
     c20:	00 ee       	ldi	r16, 0xE0	; 224
     c22:	1f ef       	ldi	r17, 0xFF	; 255
     c24:	21 e1       	ldi	r18, 0x11	; 17
     c26:	38 e0       	ldi	r19, 0x08	; 8
     c28:	42 e0       	ldi	r20, 0x02	; 2
     c2a:	50 e0       	ldi	r21, 0x00	; 0
     c2c:	64 e1       	ldi	r22, 0x14	; 20
     c2e:	70 e0       	ldi	r23, 0x00	; 0
     c30:	80 e4       	ldi	r24, 0x40	; 64
     c32:	91 e0       	ldi	r25, 0x01	; 1
     c34:	d3 de       	rcall	.-602    	; 0x9dc <LCD_ShowString>
     c36:	0f 2e       	mov	r0, r31
    char B_left[2];
    char B_down[2];
    char B_right[2];
    char B_rotate[2];

    sprintf(B_up, "%d", button.up);
     c38:	f8 e1       	ldi	r31, 0x18	; 24
     c3a:	af 2e       	mov	r10, r31
     c3c:	f8 e0       	ldi	r31, 0x08	; 8
     c3e:	bf 2e       	mov	r11, r31
     c40:	f0 2d       	mov	r31, r0
     c42:	2e 01       	movw	r4, r28
     c44:	8e e0       	ldi	r24, 0x0E	; 14
     c46:	48 0e       	add	r4, r24
     c48:	51 1c       	adc	r5, r1
     c4a:	3e 01       	movw	r6, r28
    sprintf(B_left, "%d", button.left);
     c4c:	9c e0       	ldi	r25, 0x0C	; 12
     c4e:	69 0e       	add	r6, r25
     c50:	71 1c       	adc	r7, r1
     c52:	ce 01       	movw	r24, r28
    sprintf(B_down, "%d", button.down);
     c54:	0a 96       	adiw	r24, 0x0a	; 10
     c56:	99 8b       	std	Y+17, r25	; 0x11
     c58:	88 8b       	std	Y+16, r24	; 0x10
     c5a:	02 97       	sbiw	r24, 0x02	; 2
    sprintf(B_right, "%d", button.right);
     c5c:	9b 8b       	std	Y+19, r25	; 0x13
     c5e:	8a 8b       	std	Y+18, r24	; 0x12
    sprintf(B_rotate, "%d", button.right);
     c60:	02 97       	sbiw	r24, 0x02	; 2
     c62:	9d 8b       	std	Y+21, r25	; 0x15
     c64:	8c 8b       	std	Y+20, r24	; 0x14
  aTRS_ENG_drawBoundary();
  LCD_ShowString(320, 20, 2, "TETRIS", YELLOW, BLACK, 0);
  
  while (1)
  {
    __Button_Status button = pDDRV_Button_GetStatus();
     c66:	f9 da       	rcall	.-2574   	; 0x25a <pDDRV_Button_GetStatus>
     c68:	92 2e       	mov	r9, r18
     c6a:	f3 2e       	mov	r15, r19
     c6c:	04 2f       	mov	r16, r20
     c6e:	15 2f       	mov	r17, r21
     c70:	29 83       	std	Y+1, r18	; 0x01
     c72:	3a 83       	std	Y+2, r19	; 0x02
     c74:	4b 83       	std	Y+3, r20	; 0x03
     c76:	5c 83       	std	Y+4, r21	; 0x04
     c78:	6d 83       	std	Y+5, r22	; 0x05
     c7a:	83 2e       	mov	r8, r19
     c7c:	24 2e       	mov	r2, r20
     c7e:	35 2e       	mov	r3, r21
    char B_left[2];
    char B_down[2];
    char B_right[2];
    char B_rotate[2];

    sprintf(B_up, "%d", button.up);
     c80:	1f 92       	push	r1
     c82:	2f 93       	push	r18
     c84:	bf 92       	push	r11
     c86:	af 92       	push	r10
     c88:	5f 92       	push	r5
     c8a:	4f 92       	push	r4
     c8c:	1b d5       	rcall	.+2614   	; 0x16c4 <sprintf>
    sprintf(B_left, "%d", button.left);
     c8e:	1f 92       	push	r1
     c90:	ff 92       	push	r15
     c92:	bf 92       	push	r11
     c94:	af 92       	push	r10
     c96:	7f 92       	push	r7
     c98:	6f 92       	push	r6
     c9a:	14 d5       	rcall	.+2600   	; 0x16c4 <sprintf>
    sprintf(B_down, "%d", button.down);
     c9c:	1f 92       	push	r1
     c9e:	0f 93       	push	r16
     ca0:	bf 92       	push	r11
     ca2:	af 92       	push	r10
     ca4:	99 89       	ldd	r25, Y+17	; 0x11
     ca6:	9f 93       	push	r25
     ca8:	88 89       	ldd	r24, Y+16	; 0x10
     caa:	8f 93       	push	r24
     cac:	0b d5       	rcall	.+2582   	; 0x16c4 <sprintf>
    sprintf(B_right, "%d", button.right);
     cae:	1f 92       	push	r1
     cb0:	1f 93       	push	r17
     cb2:	bf 92       	push	r11
     cb4:	af 92       	push	r10
     cb6:	9b 89       	ldd	r25, Y+19	; 0x13
     cb8:	9f 93       	push	r25
     cba:	8a 89       	ldd	r24, Y+18	; 0x12
     cbc:	8f 93       	push	r24
     cbe:	02 d5       	rcall	.+2564   	; 0x16c4 <sprintf>
    sprintf(B_rotate, "%d", button.right);
     cc0:	1f 92       	push	r1
     cc2:	1f 93       	push	r17
     cc4:	bf 92       	push	r11
     cc6:	af 92       	push	r10
     cc8:	9d 89       	ldd	r25, Y+21	; 0x15
     cca:	9f 93       	push	r25
     ccc:	8c 89       	ldd	r24, Y+20	; 0x14
     cce:	8f 93       	push	r24
     cd0:	f9 d4       	rcall	.+2546   	; 0x16c4 <sprintf>
     cd2:	c1 2c       	mov	r12, r1

    LCD_ShowString(320, 100, 1, B_up, WHITE, BLACK, 0);
     cd4:	d1 2c       	mov	r13, r1
     cd6:	e1 2c       	mov	r14, r1
     cd8:	f1 2c       	mov	r15, r1
     cda:	0f ef       	ldi	r16, 0xFF	; 255
     cdc:	1f ef       	ldi	r17, 0xFF	; 255
     cde:	92 01       	movw	r18, r4
     ce0:	41 e0       	ldi	r20, 0x01	; 1
     ce2:	50 e0       	ldi	r21, 0x00	; 0
     ce4:	64 e6       	ldi	r22, 0x64	; 100
     ce6:	70 e0       	ldi	r23, 0x00	; 0
     ce8:	80 e4       	ldi	r24, 0x40	; 64
     cea:	91 e0       	ldi	r25, 0x01	; 1
     cec:	77 de       	rcall	.-786    	; 0x9dc <LCD_ShowString>
    LCD_ShowString(320, 120, 1, B_left, WHITE, BLACK, 0);
     cee:	93 01       	movw	r18, r6
     cf0:	41 e0       	ldi	r20, 0x01	; 1
     cf2:	50 e0       	ldi	r21, 0x00	; 0
     cf4:	68 e7       	ldi	r22, 0x78	; 120
     cf6:	70 e0       	ldi	r23, 0x00	; 0
     cf8:	80 e4       	ldi	r24, 0x40	; 64
     cfa:	91 e0       	ldi	r25, 0x01	; 1
     cfc:	6f de       	rcall	.-802    	; 0x9dc <LCD_ShowString>
    LCD_ShowString(320, 140, 1, B_down, WHITE, BLACK, 0);
     cfe:	9e 01       	movw	r18, r28
     d00:	26 5f       	subi	r18, 0xF6	; 246
     d02:	3f 4f       	sbci	r19, 0xFF	; 255
     d04:	41 e0       	ldi	r20, 0x01	; 1
     d06:	50 e0       	ldi	r21, 0x00	; 0
     d08:	6c e8       	ldi	r22, 0x8C	; 140
     d0a:	70 e0       	ldi	r23, 0x00	; 0
     d0c:	80 e4       	ldi	r24, 0x40	; 64
     d0e:	91 e0       	ldi	r25, 0x01	; 1
     d10:	65 de       	rcall	.-822    	; 0x9dc <LCD_ShowString>
    LCD_ShowString(320, 160, 1, B_right, WHITE, BLACK, 0);
     d12:	9e 01       	movw	r18, r28
     d14:	28 5f       	subi	r18, 0xF8	; 248
     d16:	3f 4f       	sbci	r19, 0xFF	; 255
     d18:	41 e0       	ldi	r20, 0x01	; 1
     d1a:	50 e0       	ldi	r21, 0x00	; 0
     d1c:	60 ea       	ldi	r22, 0xA0	; 160
     d1e:	70 e0       	ldi	r23, 0x00	; 0
     d20:	80 e4       	ldi	r24, 0x40	; 64
     d22:	91 e0       	ldi	r25, 0x01	; 1
     d24:	5b de       	rcall	.-842    	; 0x9dc <LCD_ShowString>
    LCD_ShowString(320, 180, 1, B_rotate, WHITE, BLACK, 0);
     d26:	9e 01       	movw	r18, r28
     d28:	2a 5f       	subi	r18, 0xFA	; 250
     d2a:	3f 4f       	sbci	r19, 0xFF	; 255
     d2c:	41 e0       	ldi	r20, 0x01	; 1
     d2e:	50 e0       	ldi	r21, 0x00	; 0
     d30:	64 eb       	ldi	r22, 0xB4	; 180
     d32:	70 e0       	ldi	r23, 0x00	; 0
     d34:	80 e4       	ldi	r24, 0x40	; 64

    

    if (button.up == BUTTON_PRESSED) 
     d36:	91 e0       	ldi	r25, 0x01	; 1
     d38:	51 de       	rcall	.-862    	; 0x9dc <LCD_ShowString>
     d3a:	0f b6       	in	r0, 0x3f	; 63
     d3c:	f8 94       	cli
     d3e:	de bf       	out	0x3e, r29	; 62
    {
      aTRS_ENG_drawCurrentShape(BLACK);
     d40:	0f be       	out	0x3f, r0	; 63
     d42:	cd bf       	out	0x3d, r28	; 61
     d44:	91 10       	cpse	r9, r1
      aTRS_ENG_ShapeShiftUp();
     d46:	04 c0       	rjmp	.+8      	; 0xd50 <main+0x15a>
     d48:	80 e0       	ldi	r24, 0x00	; 0
    }
    
    if (button.down == BUTTON_PRESSED)
     d4a:	90 e0       	ldi	r25, 0x00	; 0
    {
      if (aTRS_ENG_BoundaryCheck_Translate(2))
     d4c:	04 d1       	rcall	.+520    	; 0xf56 <aTRS_ENG_drawCurrentShape>
     d4e:	e0 d0       	rcall	.+448    	; 0xf10 <aTRS_ENG_ShapeShiftUp>
     d50:	21 10       	cpse	r2, r1
     d52:	14 c0       	rjmp	.+40     	; 0xd7c <main+0x186>
      {
        aTRS_ENG_drawCurrentShape(BLACK);
     d54:	82 e0       	ldi	r24, 0x02	; 2
     d56:	27 d2       	rcall	.+1102   	; 0x11a6 <aTRS_ENG_BoundaryCheck_Translate>
     d58:	88 23       	and	r24, r24
     d5a:	29 f0       	breq	.+10     	; 0xd66 <main+0x170>
        aTRS_ENG_ShapeShiftDown();
     d5c:	80 e0       	ldi	r24, 0x00	; 0
      }
      else
      {
        aTRS_ENG_AttachToField();
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	fa d0       	rcall	.+500    	; 0xf56 <aTRS_ENG_drawCurrentShape>
        aTRS_ENG_CheckClearedRows();
     d62:	dc d0       	rcall	.+440    	; 0xf1c <aTRS_ENG_ShapeShiftDown>
        
        if (aTRS_ENG_GenerateNewShape() == NULL) 
     d64:	0b c0       	rjmp	.+22     	; 0xd7c <main+0x186>
     d66:	8f d1       	rcall	.+798    	; 0x1086 <aTRS_ENG_AttachToField>
     d68:	05 d3       	rcall	.+1546   	; 0x1374 <aTRS_ENG_CheckClearedRows>
        {
          aTRS_ENG_ClearField();
     d6a:	6c d0       	rcall	.+216    	; 0xe44 <aTRS_ENG_GenerateNewShape>
          aTRS_ENG_refreshAllBlocks(BLACK);
     d6c:	89 2b       	or	r24, r25
     d6e:	31 f4       	brne	.+12     	; 0xd7c <main+0x186>
     d70:	b6 d3       	rcall	.+1900   	; 0x14de <aTRS_ENG_ClearField>
          aTRS_ENG_returnShapeCursorHome();
     d72:	80 e0       	ldi	r24, 0x00	; 0
          aTRS_ENG_GenerateNewShape();
     d74:	90 e0       	ldi	r25, 0x00	; 0
        }
      }
    } 

    if (button.right == BUTTON_PRESSED)
     d76:	c5 d3       	rcall	.+1930   	; 0x1502 <aTRS_ENG_refreshAllBlocks>
     d78:	5f d0       	rcall	.+190    	; 0xe38 <aTRS_ENG_returnShapeCursorHome>
    {
      if (aTRS_ENG_BoundaryCheck_Translate(1))
     d7a:	64 d0       	rcall	.+200    	; 0xe44 <aTRS_ENG_GenerateNewShape>
     d7c:	31 10       	cpse	r3, r1
     d7e:	08 c0       	rjmp	.+16     	; 0xd90 <main+0x19a>
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	11 d2       	rcall	.+1058   	; 0x11a6 <aTRS_ENG_BoundaryCheck_Translate>
      {
        aTRS_ENG_drawCurrentShape(BLACK);
     d84:	88 23       	and	r24, r24
     d86:	21 f0       	breq	.+8      	; 0xd90 <main+0x19a>
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	90 e0       	ldi	r25, 0x00	; 0
        aTRS_ENG_ShapeShiftRight();   
     d8c:	e4 d0       	rcall	.+456    	; 0xf56 <aTRS_ENG_drawCurrentShape>
     d8e:	cc d0       	rcall	.+408    	; 0xf28 <aTRS_ENG_ShapeShiftRight>
           
      }     
    }

    if (button.left == BUTTON_PRESSED)
     d90:	81 10       	cpse	r8, r1
     d92:	08 c0       	rjmp	.+16     	; 0xda4 <main+0x1ae>
    {
      if (aTRS_ENG_BoundaryCheck_Translate(3))
     d94:	83 e0       	ldi	r24, 0x03	; 3
     d96:	07 d2       	rcall	.+1038   	; 0x11a6 <aTRS_ENG_BoundaryCheck_Translate>
     d98:	88 23       	and	r24, r24
     d9a:	21 f0       	breq	.+8      	; 0xda4 <main+0x1ae>
     d9c:	80 e0       	ldi	r24, 0x00	; 0
      {
        aTRS_ENG_drawCurrentShape(BLACK);
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	da d0       	rcall	.+436    	; 0xf56 <aTRS_ENG_drawCurrentShape>
     da2:	c8 d0       	rcall	.+400    	; 0xf34 <aTRS_ENG_ShapeShiftLeft>
     da4:	8d 81       	ldd	r24, Y+5	; 0x05
        aTRS_ENG_ShapeShiftLeft();
     da6:	81 11       	cpse	r24, r1
     da8:	03 c0       	rjmp	.+6      	; 0xdb0 <main+0x1ba>
      }
    }

    if (button.rotate == BUTTON_PRESSED) 
     daa:	83 d2       	rcall	.+1286   	; 0x12b2 <aTRS_ENG_BoundaryCheck_Rotate>
     dac:	81 11       	cpse	r24, r1
     dae:	c8 d0       	rcall	.+400    	; 0xf40 <aTRS_ENG_ShapeRotate>
    {
      if(aTRS_ENG_BoundaryCheck_Rotate())
     db0:	80 ee       	ldi	r24, 0xE0	; 224
     db2:	9f ef       	ldi	r25, 0xFF	; 255
     db4:	d0 d0       	rcall	.+416    	; 0xf56 <aTRS_ENG_drawCurrentShape>
      {
        aTRS_ENG_ShapeRotate();
     db6:	8f e3       	ldi	r24, 0x3F	; 63
     db8:	9c e9       	ldi	r25, 0x9C	; 156
      }
    }

    aTRS_ENG_drawCurrentShape(YELLOW);
     dba:	01 97       	sbiw	r24, 0x01	; 1
     dbc:	f1 f7       	brne	.-4      	; 0xdba <main+0x1c4>
     dbe:	00 c0       	rjmp	.+0      	; 0xdc0 <main+0x1ca>
     dc0:	00 00       	nop
     dc2:	51 cf       	rjmp	.-350    	; 0xc66 <main+0x70>

00000dc4 <Rotate>:
     dc4:	43 70       	andi	r20, 0x03	; 3
     dc6:	41 30       	cpi	r20, 0x01	; 1
     dc8:	59 f0       	breq	.+22     	; 0xde0 <Rotate+0x1c>
     dca:	28 f0       	brcs	.+10     	; 0xdd6 <Rotate+0x12>
     dcc:	42 30       	cpi	r20, 0x02	; 2
    _delay_ms(10);


  }
     dce:	71 f0       	breq	.+28     	; 0xdec <Rotate+0x28>
}

void aTRS_ENG_moveShapeCursor(uint8_t row, uint8_t col)
{
  mShapeCursor.row = row;
  mShapeCursor.col = col;
     dd0:	43 30       	cpi	r20, 0x03	; 3
     dd2:	91 f0       	breq	.+36     	; 0xdf8 <Rotate+0x34>
     dd4:	16 c0       	rjmp	.+44     	; 0xe02 <Rotate+0x3e>
     dd6:	66 0f       	add	r22, r22
     dd8:	66 0f       	add	r22, r22
     dda:	96 2f       	mov	r25, r22
     ddc:	98 0f       	add	r25, r24
     dde:	11 c0       	rjmp	.+34     	; 0xe02 <Rotate+0x3e>
     de0:	64 5f       	subi	r22, 0xF4	; 244
     de2:	88 0f       	add	r24, r24
     de4:	88 0f       	add	r24, r24
     de6:	96 2f       	mov	r25, r22
     de8:	98 1b       	sub	r25, r24
     dea:	0b c0       	rjmp	.+22     	; 0xe02 <Rotate+0x3e>
     dec:	9f e0       	ldi	r25, 0x0F	; 15
     dee:	98 1b       	sub	r25, r24
     df0:	66 0f       	add	r22, r22
     df2:	66 0f       	add	r22, r22
     df4:	96 1b       	sub	r25, r22
     df6:	05 c0       	rjmp	.+10     	; 0xe02 <Rotate+0x3e>
     df8:	88 0f       	add	r24, r24
     dfa:	88 0f       	add	r24, r24
     dfc:	8d 5f       	subi	r24, 0xFD	; 253
     dfe:	98 2f       	mov	r25, r24
     e00:	96 1b       	sub	r25, r22
     e02:	89 2f       	mov	r24, r25
     e04:	08 95       	ret

00000e06 <aTRS_ENG_drawBoundary>:
     e06:	0f 93       	push	r16
     e08:	1f 93       	push	r17
     e0a:	0f ef       	ldi	r16, 0xFF	; 255
     e0c:	1f ef       	ldi	r17, 0xFF	; 255
     e0e:	26 e3       	ldi	r18, 0x36	; 54
     e10:	31 e0       	ldi	r19, 0x01	; 1
     e12:	4e ed       	ldi	r20, 0xDE	; 222
     e14:	50 e0       	ldi	r21, 0x00	; 0
     e16:	68 e0       	ldi	r22, 0x08	; 8
     e18:	70 e0       	ldi	r23, 0x00	; 0
     e1a:	8a e0       	ldi	r24, 0x0A	; 10
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	2e dd       	rcall	.-1444   	; 0x87c <LCD_GUI_DrawRectangle>
     e20:	28 e3       	ldi	r18, 0x38	; 56
     e22:	31 e0       	ldi	r19, 0x01	; 1
     e24:	40 ee       	ldi	r20, 0xE0	; 224
     e26:	50 e0       	ldi	r21, 0x00	; 0
     e28:	66 e0       	ldi	r22, 0x06	; 6
     e2a:	70 e0       	ldi	r23, 0x00	; 0
     e2c:	88 e0       	ldi	r24, 0x08	; 8
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	25 dd       	rcall	.-1462   	; 0x87c <LCD_GUI_DrawRectangle>
     e32:	1f 91       	pop	r17
     e34:	0f 91       	pop	r16
     e36:	08 95       	ret

00000e38 <aTRS_ENG_returnShapeCursorHome>:
  return mCurrentShape;
}

void aTRS_ENG_moveShapeCursor(uint8_t row, uint8_t col)
{
  mShapeCursor.row = row;
     e38:	e4 e0       	ldi	r30, 0x04	; 4
     e3a:	f2 e0       	ldi	r31, 0x02	; 2
     e3c:	10 82       	st	Z, r1
  mShapeCursor.col = col;
     e3e:	85 e0       	ldi	r24, 0x05	; 5
     e40:	81 83       	std	Z+1, r24	; 0x01
     e42:	08 95       	ret

00000e44 <aTRS_ENG_GenerateNewShape>:
                        TetrisFrame.frame_y2 + TetrisFrame.frame_thickness,
                        TetrisFrame.frame_colour);
}

uint8_t* aTRS_ENG_GenerateNewShape(void)
{
     e44:	9f 92       	push	r9
     e46:	af 92       	push	r10
     e48:	bf 92       	push	r11
     e4a:	cf 92       	push	r12
     e4c:	df 92       	push	r13
     e4e:	ef 92       	push	r14
     e50:	ff 92       	push	r15
     e52:	0f 93       	push	r16
     e54:	1f 93       	push	r17
     e56:	cf 93       	push	r28
     e58:	df 93       	push	r29
  uint8_t newShape = rand() % 7;
     e5a:	26 d4       	rcall	.+2124   	; 0x16a8 <rand>
  mCurrentShape = mShapeArray[newShape];
     e5c:	67 e0       	ldi	r22, 0x07	; 7
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	93 d3       	rcall	.+1830   	; 0x1588 <__divmodhi4>
     e62:	fc 01       	movw	r30, r24
     e64:	ff 27       	eor	r31, r31
     e66:	ee 0f       	add	r30, r30
     e68:	ff 1f       	adc	r31, r31
     e6a:	e5 5e       	subi	r30, 0xE5	; 229
     e6c:	f7 4f       	sbci	r31, 0xF7	; 247
     e6e:	d0 81       	ld	r29, Z
     e70:	c1 81       	ldd	r28, Z+1	; 0x01
     e72:	d0 93 07 02 	sts	0x0207, r29	; 0x800207 <mCurrentShape>
     e76:	c0 93 08 02 	sts	0x0208, r28	; 0x800208 <mCurrentShape+0x1>
  aTRS_ENG_returnShapeCursorHome();
     e7a:	de df       	rcall	.-68     	; 0xe38 <aTRS_ENG_returnShapeCursorHome>

  for (uint8_t nRow = 0; nRow < 4; nRow++)
  {
    for (uint8_t nCol = 0; nCol < 4; nCol++)
    {
      if ((mCurrentShape[Rotate(nCol, nRow, mShapeCursor.rot)] != 0) && (field[(mShapeCursor.row + nRow)  * SCREEN_WIDTH + mShapeCursor.col + nCol] !=0))
     e7c:	e4 e0       	ldi	r30, 0x04	; 4
     e7e:	f2 e0       	ldi	r31, 0x02	; 2
     e80:	b2 80       	ldd	r11, Z+2	; 0x02
     e82:	80 81       	ld	r24, Z
     e84:	c1 80       	ldd	r12, Z+1	; 0x01
     e86:	0c 2c       	mov	r0, r12
     e88:	00 0c       	add	r0, r0
     e8a:	dd 08       	sbc	r13, r13
     e8c:	2e e0       	ldi	r18, 0x0E	; 14
     e8e:	82 02       	muls	r24, r18
     e90:	c0 0c       	add	r12, r0
     e92:	d1 1c       	adc	r13, r1
     e94:	11 24       	eor	r1, r1
     e96:	c6 01       	movw	r24, r12
     e98:	88 0f       	add	r24, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	fc 01       	movw	r30, r24
     e9e:	e1 56       	subi	r30, 0x61	; 97
     ea0:	f7 4f       	sbci	r31, 0xF7	; 247
     ea2:	6f 01       	movw	r12, r30
     ea4:	ed 2e       	mov	r14, r29
     ea6:	fc 2e       	mov	r15, r28
{
  uint8_t newShape = rand() % 7;
  mCurrentShape = mShapeArray[newShape];
  aTRS_ENG_returnShapeCursorHome();

  for (uint8_t nRow = 0; nRow < 4; nRow++)
     ea8:	d0 e0       	ldi	r29, 0x00	; 0
  {
    for (uint8_t nCol = 0; nCol < 4; nCol++)
    {
      if ((mCurrentShape[Rotate(nCol, nRow, mShapeCursor.rot)] != 0) && (field[(mShapeCursor.row + nRow)  * SCREEN_WIDTH + mShapeCursor.col + nCol] !=0))
      {
        mCurrentShape = NULL;
     eaa:	91 2c       	mov	r9, r1
     eac:	a1 2c       	mov	r10, r1
     eae:	1c c0       	rjmp	.+56     	; 0xee8 <aTRS_ENG_GenerateNewShape+0xa4>

  for (uint8_t nRow = 0; nRow < 4; nRow++)
  {
    for (uint8_t nCol = 0; nCol < 4; nCol++)
    {
      if ((mCurrentShape[Rotate(nCol, nRow, mShapeCursor.rot)] != 0) && (field[(mShapeCursor.row + nRow)  * SCREEN_WIDTH + mShapeCursor.col + nCol] !=0))
     eb0:	4b 2d       	mov	r20, r11
     eb2:	6d 2f       	mov	r22, r29
     eb4:	8c 2f       	mov	r24, r28
     eb6:	86 df       	rcall	.-244    	; 0xdc4 <Rotate>
     eb8:	f7 01       	movw	r30, r14
     eba:	e8 0f       	add	r30, r24
     ebc:	f1 1d       	adc	r31, r1
     ebe:	80 81       	ld	r24, Z
     ec0:	88 23       	and	r24, r24
     ec2:	39 f0       	breq	.+14     	; 0xed2 <aTRS_ENG_GenerateNewShape+0x8e>
     ec4:	f8 01       	movw	r30, r16
     ec6:	80 81       	ld	r24, Z
     ec8:	91 81       	ldd	r25, Z+1	; 0x01
     eca:	89 2b       	or	r24, r25
     ecc:	11 f0       	breq	.+4      	; 0xed2 <aTRS_ENG_GenerateNewShape+0x8e>
      {
        mCurrentShape = NULL;
     ece:	e9 2c       	mov	r14, r9
     ed0:	fa 2c       	mov	r15, r10
  mCurrentShape = mShapeArray[newShape];
  aTRS_ENG_returnShapeCursorHome();

  for (uint8_t nRow = 0; nRow < 4; nRow++)
  {
    for (uint8_t nCol = 0; nCol < 4; nCol++)
     ed2:	cf 5f       	subi	r28, 0xFF	; 255
     ed4:	0e 5f       	subi	r16, 0xFE	; 254
     ed6:	1f 4f       	sbci	r17, 0xFF	; 255
     ed8:	c4 30       	cpi	r28, 0x04	; 4
     eda:	51 f7       	brne	.-44     	; 0xeb0 <aTRS_ENG_GenerateNewShape+0x6c>
{
  uint8_t newShape = rand() % 7;
  mCurrentShape = mShapeArray[newShape];
  aTRS_ENG_returnShapeCursorHome();

  for (uint8_t nRow = 0; nRow < 4; nRow++)
     edc:	df 5f       	subi	r29, 0xFF	; 255
     ede:	fc e1       	ldi	r31, 0x1C	; 28
     ee0:	cf 0e       	add	r12, r31
     ee2:	d1 1c       	adc	r13, r1
     ee4:	d4 30       	cpi	r29, 0x04	; 4
     ee6:	19 f0       	breq	.+6      	; 0xeee <aTRS_ENG_GenerateNewShape+0xaa>
                        TetrisFrame.frame_y2 + TetrisFrame.frame_thickness,
                        TetrisFrame.frame_colour);
}

uint8_t* aTRS_ENG_GenerateNewShape(void)
{
     ee8:	86 01       	movw	r16, r12
     eea:	c0 e0       	ldi	r28, 0x00	; 0
     eec:	e1 cf       	rjmp	.-62     	; 0xeb0 <aTRS_ENG_GenerateNewShape+0x6c>
     eee:	f0 92 08 02 	sts	0x0208, r15	; 0x800208 <mCurrentShape+0x1>
     ef2:	e0 92 07 02 	sts	0x0207, r14	; 0x800207 <mCurrentShape>
        mCurrentShape = NULL;
      }
    }
  }
  return mCurrentShape;
}
     ef6:	c7 01       	movw	r24, r14
     ef8:	df 91       	pop	r29
     efa:	cf 91       	pop	r28
     efc:	1f 91       	pop	r17
     efe:	0f 91       	pop	r16
     f00:	ff 90       	pop	r15
     f02:	ef 90       	pop	r14
     f04:	df 90       	pop	r13
     f06:	cf 90       	pop	r12
     f08:	bf 90       	pop	r11
     f0a:	af 90       	pop	r10
     f0c:	9f 90       	pop	r9
     f0e:	08 95       	ret

00000f10 <aTRS_ENG_ShapeShiftUp>:
  aTRS_ENG_moveShapeCursor(0, 5);
}

void aTRS_ENG_ShapeShiftUp(void)
{
  mShapeCursor.row--;
     f10:	e4 e0       	ldi	r30, 0x04	; 4
     f12:	f2 e0       	ldi	r31, 0x02	; 2
     f14:	80 81       	ld	r24, Z
     f16:	81 50       	subi	r24, 0x01	; 1
     f18:	80 83       	st	Z, r24
     f1a:	08 95       	ret

00000f1c <aTRS_ENG_ShapeShiftDown>:
}

void aTRS_ENG_ShapeShiftDown(void)
{
  mShapeCursor.row++;
     f1c:	e4 e0       	ldi	r30, 0x04	; 4
     f1e:	f2 e0       	ldi	r31, 0x02	; 2
     f20:	80 81       	ld	r24, Z
     f22:	8f 5f       	subi	r24, 0xFF	; 255
     f24:	80 83       	st	Z, r24
     f26:	08 95       	ret

00000f28 <aTRS_ENG_ShapeShiftRight>:
}

void aTRS_ENG_ShapeShiftRight(void)
{
  mShapeCursor.col++;
     f28:	e4 e0       	ldi	r30, 0x04	; 4
     f2a:	f2 e0       	ldi	r31, 0x02	; 2
     f2c:	81 81       	ldd	r24, Z+1	; 0x01
     f2e:	8f 5f       	subi	r24, 0xFF	; 255
     f30:	81 83       	std	Z+1, r24	; 0x01
     f32:	08 95       	ret

00000f34 <aTRS_ENG_ShapeShiftLeft>:
}

void aTRS_ENG_ShapeShiftLeft(void)
{
  mShapeCursor.col--;
     f34:	e4 e0       	ldi	r30, 0x04	; 4
     f36:	f2 e0       	ldi	r31, 0x02	; 2
     f38:	81 81       	ldd	r24, Z+1	; 0x01
     f3a:	81 50       	subi	r24, 0x01	; 1
     f3c:	81 83       	std	Z+1, r24	; 0x01
     f3e:	08 95       	ret

00000f40 <aTRS_ENG_ShapeRotate>:
}

void aTRS_ENG_ShapeRotate(void)
{
  mShapeCursor.rot++;
     f40:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <mShapeCursor+0x2>
     f44:	8f 5f       	subi	r24, 0xFF	; 255
  if (mShapeCursor.rot >= 4) mShapeCursor.rot = 0;
     f46:	84 30       	cpi	r24, 0x04	; 4
     f48:	18 f4       	brcc	.+6      	; 0xf50 <aTRS_ENG_ShapeRotate+0x10>
  mShapeCursor.col--;
}

void aTRS_ENG_ShapeRotate(void)
{
  mShapeCursor.rot++;
     f4a:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <mShapeCursor+0x2>
     f4e:	08 95       	ret
  if (mShapeCursor.rot >= 4) mShapeCursor.rot = 0;
     f50:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <mShapeCursor+0x2>
     f54:	08 95       	ret

00000f56 <aTRS_ENG_drawCurrentShape>:
}

void aTRS_ENG_drawCurrentShape(uint16_t colour)
{
     f56:	2f 92       	push	r2
     f58:	3f 92       	push	r3
     f5a:	4f 92       	push	r4
     f5c:	5f 92       	push	r5
     f5e:	6f 92       	push	r6
     f60:	7f 92       	push	r7
     f62:	8f 92       	push	r8
     f64:	9f 92       	push	r9
     f66:	af 92       	push	r10
     f68:	bf 92       	push	r11
     f6a:	cf 92       	push	r12
     f6c:	df 92       	push	r13
     f6e:	ef 92       	push	r14
     f70:	ff 92       	push	r15
     f72:	0f 93       	push	r16
     f74:	1f 93       	push	r17
     f76:	cf 93       	push	r28
     f78:	df 93       	push	r29
  
  uint8_t rowPos = mShapeCursor.row;
     f7a:	e4 e0       	ldi	r30, 0x04	; 4
     f7c:	f2 e0       	ldi	r31, 0x02	; 2
     f7e:	50 80       	ld	r5, Z
  uint8_t colPos = mShapeCursor.col;
     f80:	71 80       	ldd	r7, Z+1	; 0x01
     f82:	c1 2c       	mov	r12, r1
     f84:	d1 2c       	mov	r13, r1
  
  for (uint8_t i = 0; i < 4; i++)
  {
    for (uint8_t j = 0; j < 4; j++)
    {
      if (mCurrentShape[Rotate(j, i, mShapeCursor.rot)]) mColour = colour;
     f86:	7f 01       	movw	r14, r30
      else mColour = BLACK;
     f88:	21 2c       	mov	r2, r1
  
  for (uint8_t i = 0; i < 4; i++)
  {
    for (uint8_t j = 0; j < 4; j++)
    {
      if (mCurrentShape[Rotate(j, i, mShapeCursor.rot)]) mColour = colour;
     f8a:	48 2e       	mov	r4, r24
     f8c:	39 2e       	mov	r3, r25
     f8e:	59 c0       	rjmp	.+178    	; 0x1042 <aTRS_ENG_drawCurrentShape+0xec>
     f90:	00 91 07 02 	lds	r16, 0x0207	; 0x800207 <mCurrentShape>
     f94:	10 91 08 02 	lds	r17, 0x0208	; 0x800208 <mCurrentShape+0x1>
     f98:	f7 01       	movw	r30, r14
     f9a:	42 81       	ldd	r20, Z+2	; 0x02
     f9c:	66 2d       	mov	r22, r6
     f9e:	8c 2f       	mov	r24, r28
     fa0:	11 df       	rcall	.-478    	; 0xdc4 <Rotate>
     fa2:	f8 01       	movw	r30, r16
     fa4:	e8 0f       	add	r30, r24
     fa6:	f1 1d       	adc	r31, r1
     fa8:	80 81       	ld	r24, Z
     faa:	88 23       	and	r24, r24
     fac:	19 f0       	breq	.+6      	; 0xfb4 <aTRS_ENG_drawCurrentShape+0x5e>
     fae:	04 2d       	mov	r16, r4
     fb0:	13 2d       	mov	r17, r3
     fb2:	02 c0       	rjmp	.+4      	; 0xfb8 <aTRS_ENG_drawCurrentShape+0x62>
      else mColour = BLACK;
     fb4:	00 e0       	ldi	r16, 0x00	; 0
     fb6:	12 2d       	mov	r17, r2

      if ((mShapeCursor.col + j >= 0) && (mShapeCursor.col + j < SCREEN_WIDTH) && (mShapeCursor.row + i < SCREEN_HEIGHT)) //Check if shape is out of field
     fb8:	f7 01       	movw	r30, r14
     fba:	81 81       	ldd	r24, Z+1	; 0x01
     fbc:	9e 01       	movw	r18, r28
     fbe:	28 0f       	add	r18, r24
     fc0:	31 1d       	adc	r19, r1
     fc2:	87 fd       	sbrc	r24, 7
     fc4:	3a 95       	dec	r19
     fc6:	c9 01       	movw	r24, r18
     fc8:	2e 30       	cpi	r18, 0x0E	; 14
     fca:	31 05       	cpc	r19, r1
     fcc:	50 f5       	brcc	.+84     	; 0x1022 <aTRS_ENG_drawCurrentShape+0xcc>
     fce:	20 81       	ld	r18, Z
     fd0:	a6 01       	movw	r20, r12
     fd2:	42 0f       	add	r20, r18
     fd4:	51 1d       	adc	r21, r1
     fd6:	27 fd       	sbrc	r18, 7
     fd8:	5a 95       	dec	r21
     fda:	9a 01       	movw	r18, r20
     fdc:	44 31       	cpi	r20, 0x14	; 20
     fde:	51 05       	cpc	r21, r1
     fe0:	04 f5       	brge	.+64     	; 0x1022 <aTRS_ENG_drawCurrentShape+0xcc>
      {
        if (field[(mShapeCursor.row + i) * SCREEN_WIDTH + (mShapeCursor.col + j)] == 0) //Check if field pos is blank
     fe2:	22 0f       	add	r18, r18
     fe4:	33 1f       	adc	r19, r19
     fe6:	f9 01       	movw	r30, r18
     fe8:	ee 0f       	add	r30, r30
     fea:	ff 1f       	adc	r31, r31
     fec:	ee 0f       	add	r30, r30
     fee:	ff 1f       	adc	r31, r31
     ff0:	ee 0f       	add	r30, r30
     ff2:	ff 1f       	adc	r31, r31
     ff4:	e2 1b       	sub	r30, r18
     ff6:	f3 0b       	sbc	r31, r19
     ff8:	e8 0f       	add	r30, r24
     ffa:	f9 1f       	adc	r31, r25
     ffc:	ee 0f       	add	r30, r30
     ffe:	ff 1f       	adc	r31, r31
    1000:	e1 56       	subi	r30, 0x61	; 97
    1002:	f7 4f       	sbci	r31, 0xF7	; 247
    1004:	80 81       	ld	r24, Z
    1006:	91 81       	ldd	r25, Z+1	; 0x01
    1008:	89 2b       	or	r24, r25
    100a:	59 f4       	brne	.+22     	; 0x1022 <aTRS_ENG_drawCurrentShape+0xcc>

static __unitBlockPos getUnitBlockPos(uint8_t row, uint8_t col)
{
  __unitBlockPos blockPos =
  {
    .unitBlock_x1 = 11 +(col*UNIT_BLOCK_SIZE + col) + 1,
    100c:	5f e0       	ldi	r21, 0x0F	; 15
    100e:	57 9d       	mul	r21, r7
    1010:	c0 01       	movw	r24, r0
    1012:	11 24       	eor	r1, r1
      {
        if (field[(mShapeCursor.row + i) * SCREEN_WIDTH + (mShapeCursor.col + j)] == 0) //Check if field pos is blank
        {
            blockPos = getUnitBlockPos(rowPos, colPos) ;
            
            LCD_GUI_DrawFillRectangle(blockPos.unitBlock_x1,
    1014:	ac 01       	movw	r20, r24
    1016:	47 5e       	subi	r20, 0xE7	; 231
    1018:	5f 4f       	sbci	r21, 0xFF	; 255
    101a:	94 01       	movw	r18, r8
    101c:	b5 01       	movw	r22, r10
    101e:	0c 96       	adiw	r24, 0x0c	; 12
    1020:	5b dc       	rcall	.-1866   	; 0x8d8 <LCD_GUI_DrawFillRectangle>
                                      blockPos.unitBlock_y2,
                                      mColour);
        }
      }

      colPos++;
    1022:	73 94       	inc	r7
    1024:	21 96       	adiw	r28, 0x01	; 1
  __unitBlockPos blockPos;
  uint16_t mColour;
  
  for (uint8_t i = 0; i < 4; i++)
  {
    for (uint8_t j = 0; j < 4; j++)
    1026:	c4 30       	cpi	r28, 0x04	; 4
    1028:	d1 05       	cpc	r29, r1
    102a:	09 f0       	breq	.+2      	; 0x102e <aTRS_ENG_drawCurrentShape+0xd8>
    102c:	b1 cf       	rjmp	.-158    	; 0xf90 <aTRS_ENG_drawCurrentShape+0x3a>
        }
      }

      colPos++;
    }
    colPos = mShapeCursor.col;
    102e:	f7 01       	movw	r30, r14
    1030:	71 80       	ldd	r7, Z+1	; 0x01
    rowPos++;
    1032:	53 94       	inc	r5
    1034:	ff ef       	ldi	r31, 0xFF	; 255
    1036:	cf 1a       	sub	r12, r31
    1038:	df 0a       	sbc	r13, r31
  uint8_t colPos = mShapeCursor.col;
  
  __unitBlockPos blockPos;
  uint16_t mColour;
  
  for (uint8_t i = 0; i < 4; i++)
    103a:	24 e0       	ldi	r18, 0x04	; 4
    103c:	c2 16       	cp	r12, r18
    103e:	d1 04       	cpc	r13, r1
    1040:	79 f0       	breq	.+30     	; 0x1060 <aTRS_ENG_drawCurrentShape+0x10a>
    1042:	6c 2c       	mov	r6, r12
static __unitBlockPos getUnitBlockPos(uint8_t row, uint8_t col)
{
  __unitBlockPos blockPos =
  {
    .unitBlock_x1 = 11 +(col*UNIT_BLOCK_SIZE + col) + 1,
    .unitBlock_y1 = 9 + (row*UNIT_BLOCK_SIZE + row) + 1,
    1044:	3f e0       	ldi	r19, 0x0F	; 15
    1046:	35 9d       	mul	r19, r5
    1048:	40 01       	movw	r8, r0
    104a:	11 24       	eor	r1, r1
  return tmp;
}

static __unitBlockPos getUnitBlockPos(uint8_t row, uint8_t col)
{
  __unitBlockPos blockPos =
    104c:	54 01       	movw	r10, r8
    104e:	4a e0       	ldi	r20, 0x0A	; 10
    1050:	a4 0e       	add	r10, r20
    1052:	b1 1c       	adc	r11, r1
    1054:	57 e1       	ldi	r21, 0x17	; 23
    1056:	85 0e       	add	r8, r21
    1058:	91 1c       	adc	r9, r1
    105a:	c0 e0       	ldi	r28, 0x00	; 0
    105c:	d0 e0       	ldi	r29, 0x00	; 0
    105e:	98 cf       	rjmp	.-208    	; 0xf90 <aTRS_ENG_drawCurrentShape+0x3a>
    }
    colPos = mShapeCursor.col;
    rowPos++;
  }
  aTRS_ENG_moveShapeCursor(mShapeCursor.row, mShapeCursor.col);
}
    1060:	df 91       	pop	r29
    1062:	cf 91       	pop	r28
    1064:	1f 91       	pop	r17
    1066:	0f 91       	pop	r16
    1068:	ff 90       	pop	r15
    106a:	ef 90       	pop	r14
    106c:	df 90       	pop	r13
    106e:	cf 90       	pop	r12
    1070:	bf 90       	pop	r11
    1072:	af 90       	pop	r10
    1074:	9f 90       	pop	r9
    1076:	8f 90       	pop	r8
    1078:	7f 90       	pop	r7
    107a:	6f 90       	pop	r6
    107c:	5f 90       	pop	r5
    107e:	4f 90       	pop	r4
    1080:	3f 90       	pop	r3
    1082:	2f 90       	pop	r2
    1084:	08 95       	ret

00001086 <aTRS_ENG_AttachToField>:

void aTRS_ENG_AttachToField(void)
{
    1086:	2f 92       	push	r2
    1088:	3f 92       	push	r3
    108a:	4f 92       	push	r4
    108c:	5f 92       	push	r5
    108e:	6f 92       	push	r6
    1090:	7f 92       	push	r7
    1092:	8f 92       	push	r8
    1094:	9f 92       	push	r9
    1096:	af 92       	push	r10
    1098:	bf 92       	push	r11
    109a:	cf 92       	push	r12
    109c:	df 92       	push	r13
    109e:	ef 92       	push	r14
    10a0:	ff 92       	push	r15
    10a2:	0f 93       	push	r16
    10a4:	1f 93       	push	r17
    10a6:	cf 93       	push	r28
    10a8:	df 93       	push	r29
    10aa:	e1 2c       	mov	r14, r1
    10ac:	f1 2c       	mov	r15, r1
  __unitBlockPos blockPos;
  for (uint8_t nRow = 0; nRow < 4; nRow++)
  {
    for (uint8_t nCol= 0; nCol < 4; nCol++)
    {
      if ((mShapeCursor.row + nRow < SCREEN_HEIGHT) && 
    10ae:	0f 2e       	mov	r0, r31
    10b0:	f4 e0       	ldi	r31, 0x04	; 4
    10b2:	cf 2e       	mov	r12, r31
    10b4:	f2 e0       	ldi	r31, 0x02	; 2
    10b6:	df 2e       	mov	r13, r31
    10b8:	f0 2d       	mov	r31, r0
    10ba:	5e c0       	rjmp	.+188    	; 0x1178 <aTRS_ENG_AttachToField+0xf2>
    10bc:	3c 2e       	mov	r3, r28
    10be:	f6 01       	movw	r30, r12
    10c0:	50 80       	ld	r5, Z
    10c2:	87 01       	movw	r16, r14
    10c4:	05 0d       	add	r16, r5
    10c6:	11 1d       	adc	r17, r1
    10c8:	57 fc       	sbrc	r5, 7
    10ca:	1a 95       	dec	r17
    10cc:	04 31       	cpi	r16, 0x14	; 20
    10ce:	11 05       	cpc	r17, r1
    10d0:	0c f0       	brlt	.+2      	; 0x10d4 <aTRS_ENG_AttachToField+0x4e>
    10d2:	46 c0       	rjmp	.+140    	; 0x1160 <aTRS_ENG_AttachToField+0xda>
          (mShapeCursor.col + nCol < SCREEN_WIDTH)  && 
    10d4:	21 80       	ldd	r2, Z+1	; 0x01
    10d6:	82 2c       	mov	r8, r2
    10d8:	02 2c       	mov	r0, r2
    10da:	00 0c       	add	r0, r0
    10dc:	99 08       	sbc	r9, r9
    10de:	3e 01       	movw	r6, r28
  __unitBlockPos blockPos;
  for (uint8_t nRow = 0; nRow < 4; nRow++)
  {
    for (uint8_t nCol= 0; nCol < 4; nCol++)
    {
      if ((mShapeCursor.row + nRow < SCREEN_HEIGHT) && 
    10e0:	c4 01       	movw	r24, r8
    10e2:	8c 0f       	add	r24, r28
    10e4:	9d 1f       	adc	r25, r29
    10e6:	0e 97       	sbiw	r24, 0x0e	; 14
    10e8:	d8 f5       	brcc	.+118    	; 0x1160 <aTRS_ENG_AttachToField+0xda>
          (mShapeCursor.col + nCol < SCREEN_WIDTH)  && 
          (mShapeCursor.col + nCol >= 0) && 
          (mCurrentShape[Rotate(nCol, nRow, mShapeCursor.rot)] != 0))
    10ea:	a0 90 07 02 	lds	r10, 0x0207	; 0x800207 <mCurrentShape>
    10ee:	b0 90 08 02 	lds	r11, 0x0208	; 0x800208 <mCurrentShape+0x1>
    10f2:	42 81       	ldd	r20, Z+2	; 0x02
    10f4:	64 2d       	mov	r22, r4
    10f6:	8c 2f       	mov	r24, r28
    10f8:	65 de       	rcall	.-822    	; 0xdc4 <Rotate>
    10fa:	f5 01       	movw	r30, r10
    10fc:	e8 0f       	add	r30, r24
    10fe:	f1 1d       	adc	r31, r1
  {
    for (uint8_t nCol= 0; nCol < 4; nCol++)
    {
      if ((mShapeCursor.row + nRow < SCREEN_HEIGHT) && 
          (mShapeCursor.col + nCol < SCREEN_WIDTH)  && 
          (mShapeCursor.col + nCol >= 0) && 
    1100:	80 81       	ld	r24, Z
    1102:	88 23       	and	r24, r24
    1104:	69 f1       	breq	.+90     	; 0x1160 <aTRS_ENG_AttachToField+0xda>
          (mCurrentShape[Rotate(nCol, nRow, mShapeCursor.rot)] != 0))
      {
        field[(mShapeCursor.row + nRow)* SCREEN_WIDTH + mShapeCursor.col+ nCol] = 1;
    1106:	00 0f       	add	r16, r16
    1108:	11 1f       	adc	r17, r17
    110a:	c8 01       	movw	r24, r16
    110c:	88 0f       	add	r24, r24
    110e:	99 1f       	adc	r25, r25
    1110:	88 0f       	add	r24, r24
    1112:	99 1f       	adc	r25, r25
    1114:	88 0f       	add	r24, r24
    1116:	99 1f       	adc	r25, r25
    1118:	80 1b       	sub	r24, r16
    111a:	91 0b       	sbc	r25, r17
    111c:	88 0e       	add	r8, r24
    111e:	99 1e       	adc	r9, r25
    1120:	86 0c       	add	r8, r6
    1122:	97 1c       	adc	r9, r7
    1124:	f4 01       	movw	r30, r8
    1126:	ee 0f       	add	r30, r30
    1128:	ff 1f       	adc	r31, r31
    112a:	e1 56       	subi	r30, 0x61	; 97
    112c:	f7 4f       	sbci	r31, 0xF7	; 247
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	91 83       	std	Z+1, r25	; 0x01
    1134:	80 83       	st	Z, r24

static __unitBlockPos getUnitBlockPos(uint8_t row, uint8_t col)
{
  __unitBlockPos blockPos =
  {
    .unitBlock_x1 = 11 +(col*UNIT_BLOCK_SIZE + col) + 1,
    1136:	32 0c       	add	r3, r2
    1138:	ef e0       	ldi	r30, 0x0F	; 15
    113a:	e3 9d       	mul	r30, r3
    113c:	c0 01       	movw	r24, r0
    113e:	11 24       	eor	r1, r1
    .unitBlock_y1 = 9 + (row*UNIT_BLOCK_SIZE + row) + 1,
    1140:	54 0c       	add	r5, r4
    1142:	e5 9d       	mul	r30, r5
    1144:	b0 01       	movw	r22, r0
    1146:	11 24       	eor	r1, r1
          (mShapeCursor.col + nCol >= 0) && 
          (mCurrentShape[Rotate(nCol, nRow, mShapeCursor.rot)] != 0))
      {
        field[(mShapeCursor.row + nRow)* SCREEN_WIDTH + mShapeCursor.col+ nCol] = 1;
        blockPos = getUnitBlockPos(mShapeCursor.row + nRow, mShapeCursor.col+ nCol) ;
        LCD_GUI_DrawFillRectangle(blockPos.unitBlock_x1,
    1148:	9b 01       	movw	r18, r22
    114a:	29 5e       	subi	r18, 0xE9	; 233
    114c:	3f 4f       	sbci	r19, 0xFF	; 255
    114e:	ac 01       	movw	r20, r24
    1150:	47 5e       	subi	r20, 0xE7	; 231
    1152:	5f 4f       	sbci	r21, 0xFF	; 255
    1154:	66 5f       	subi	r22, 0xF6	; 246
    1156:	7f 4f       	sbci	r23, 0xFF	; 255
    1158:	00 e0       	ldi	r16, 0x00	; 0
    115a:	18 ef       	ldi	r17, 0xF8	; 248
    115c:	0c 96       	adiw	r24, 0x0c	; 12
    115e:	bc db       	rcall	.-2184   	; 0x8d8 <LCD_GUI_DrawFillRectangle>
    1160:	21 96       	adiw	r28, 0x01	; 1
void aTRS_ENG_AttachToField(void)
{
  __unitBlockPos blockPos;
  for (uint8_t nRow = 0; nRow < 4; nRow++)
  {
    for (uint8_t nCol= 0; nCol < 4; nCol++)
    1162:	c4 30       	cpi	r28, 0x04	; 4
    1164:	d1 05       	cpc	r29, r1
    1166:	09 f0       	breq	.+2      	; 0x116a <aTRS_ENG_AttachToField+0xe4>
    1168:	a9 cf       	rjmp	.-174    	; 0x10bc <aTRS_ENG_AttachToField+0x36>
    116a:	ff ef       	ldi	r31, 0xFF	; 255
    116c:	ef 1a       	sub	r14, r31
    116e:	ff 0a       	sbc	r15, r31
}

void aTRS_ENG_AttachToField(void)
{
  __unitBlockPos blockPos;
  for (uint8_t nRow = 0; nRow < 4; nRow++)
    1170:	24 e0       	ldi	r18, 0x04	; 4
    1172:	e2 16       	cp	r14, r18
    1174:	f1 04       	cpc	r15, r1
    1176:	21 f0       	breq	.+8      	; 0x1180 <aTRS_ENG_AttachToField+0xfa>
    1178:	4e 2c       	mov	r4, r14
  }
  aTRS_ENG_moveShapeCursor(mShapeCursor.row, mShapeCursor.col);
}

void aTRS_ENG_AttachToField(void)
{
    117a:	c0 e0       	ldi	r28, 0x00	; 0
    117c:	d0 e0       	ldi	r29, 0x00	; 0
    117e:	9e cf       	rjmp	.-196    	; 0x10bc <aTRS_ENG_AttachToField+0x36>
                                  blockPos.unitBlock_y2,
                                  RED);
      }
    }
  }
}
    1180:	df 91       	pop	r29
    1182:	cf 91       	pop	r28
    1184:	1f 91       	pop	r17
    1186:	0f 91       	pop	r16
    1188:	ff 90       	pop	r15
    118a:	ef 90       	pop	r14
    118c:	df 90       	pop	r13
    118e:	cf 90       	pop	r12
    1190:	bf 90       	pop	r11
    1192:	af 90       	pop	r10
    1194:	9f 90       	pop	r9
    1196:	8f 90       	pop	r8
    1198:	7f 90       	pop	r7
    119a:	6f 90       	pop	r6
    119c:	5f 90       	pop	r5
    119e:	4f 90       	pop	r4
    11a0:	3f 90       	pop	r3
    11a2:	2f 90       	pop	r2
    11a4:	08 95       	ret

000011a6 <aTRS_ENG_BoundaryCheck_Translate>:

/*
 * Boundary Checks
 */
bool aTRS_ENG_BoundaryCheck_Translate(uint8_t direction)
{
    11a6:	2f 92       	push	r2
    11a8:	3f 92       	push	r3
    11aa:	4f 92       	push	r4
    11ac:	5f 92       	push	r5
    11ae:	6f 92       	push	r6
    11b0:	7f 92       	push	r7
    11b2:	8f 92       	push	r8
    11b4:	9f 92       	push	r9
    11b6:	af 92       	push	r10
    11b8:	bf 92       	push	r11
    11ba:	cf 92       	push	r12
    11bc:	df 92       	push	r13
    11be:	ef 92       	push	r14
    11c0:	ff 92       	push	r15
    11c2:	0f 93       	push	r16
    11c4:	1f 93       	push	r17
    11c6:	cf 93       	push	r28
    11c8:	df 93       	push	r29
  __shapeCursor tmpShapeCursor = mShapeCursor;
    11ca:	e4 e0       	ldi	r30, 0x04	; 4
    11cc:	f2 e0       	ldi	r31, 0x02	; 2
    11ce:	90 81       	ld	r25, Z
    11d0:	21 80       	ldd	r2, Z+1	; 0x01

  switch (direction)
    11d2:	82 30       	cpi	r24, 0x02	; 2
    11d4:	31 f0       	breq	.+12     	; 0x11e2 <aTRS_ENG_BoundaryCheck_Translate+0x3c>
    11d6:	83 30       	cpi	r24, 0x03	; 3
    11d8:	31 f0       	breq	.+12     	; 0x11e6 <aTRS_ENG_BoundaryCheck_Translate+0x40>
    11da:	81 30       	cpi	r24, 0x01	; 1
    11dc:	29 f4       	brne	.+10     	; 0x11e8 <aTRS_ENG_BoundaryCheck_Translate+0x42>
  {
    case 1:
    tmpShapeCursor.col++;
    11de:	23 94       	inc	r2
    break;
    11e0:	03 c0       	rjmp	.+6      	; 0x11e8 <aTRS_ENG_BoundaryCheck_Translate+0x42>
    case 2:
    tmpShapeCursor.row++;
    11e2:	9f 5f       	subi	r25, 0xFF	; 255
    break;
    11e4:	01 c0       	rjmp	.+2      	; 0x11e8 <aTRS_ENG_BoundaryCheck_Translate+0x42>
    case 3:
    tmpShapeCursor.col--;
    11e6:	2a 94       	dec	r2
  for (uint8_t nRow = 0; nRow < 4; nRow++)
  {
    for (uint8_t nCol = 0; nCol < 4; nCol++)
    {
      //Check if exceed game frame
      if ((mCurrentShape[Rotate(nCol, nRow, mShapeCursor.rot)] != 0)
    11e8:	c0 90 07 02 	lds	r12, 0x0207	; 0x800207 <mCurrentShape>
    11ec:	d0 90 08 02 	lds	r13, 0x0208	; 0x800208 <mCurrentShape+0x1>
    11f0:	30 90 06 02 	lds	r3, 0x0206	; 0x800206 <mShapeCursor+0x2>
    11f4:	02 2d       	mov	r16, r2
    11f6:	02 2c       	mov	r0, r2
    11f8:	00 0c       	add	r0, r0
    11fa:	11 0b       	sbc	r17, r17
    11fc:	8e e0       	ldi	r24, 0x0E	; 14
    11fe:	98 02       	muls	r25, r24
    1200:	00 0d       	add	r16, r0
    1202:	11 1d       	adc	r17, r1
    1204:	11 24       	eor	r1, r1
    1206:	00 0f       	add	r16, r16
    1208:	11 1f       	adc	r17, r17
    120a:	01 56       	subi	r16, 0x61	; 97
    120c:	17 4f       	sbci	r17, 0xF7	; 247
    120e:	e1 2c       	mov	r14, r1
    1210:	f1 2c       	mov	r15, r1
      && ((tmpShapeCursor.col + nCol < 0) || (tmpShapeCursor.col + nCol > SCREEN_WIDTH - 1) || (tmpShapeCursor.row + nRow > SCREEN_HEIGHT -1)))
    1212:	89 2e       	mov	r8, r25
    1214:	99 0f       	add	r25, r25
    1216:	99 08       	sbc	r9, r9
    1218:	27 c0       	rjmp	.+78     	; 0x1268 <aTRS_ENG_BoundaryCheck_Translate+0xc2>
  for (uint8_t nRow = 0; nRow < 4; nRow++)
  {
    for (uint8_t nCol = 0; nCol < 4; nCol++)
    {
      //Check if exceed game frame
      if ((mCurrentShape[Rotate(nCol, nRow, mShapeCursor.rot)] != 0)
    121a:	43 2d       	mov	r20, r3
    121c:	64 2d       	mov	r22, r4
    121e:	85 2d       	mov	r24, r5
    1220:	d1 dd       	rcall	.-1118   	; 0xdc4 <Rotate>
    1222:	f6 01       	movw	r30, r12
    1224:	e8 0f       	add	r30, r24
    1226:	f1 1d       	adc	r31, r1
    1228:	80 81       	ld	r24, Z
    122a:	88 23       	and	r24, r24
    122c:	61 f0       	breq	.+24     	; 0x1246 <aTRS_ENG_BoundaryCheck_Translate+0xa0>
      && ((tmpShapeCursor.col + nCol < 0) || (tmpShapeCursor.col + nCol > SCREEN_WIDTH - 1) || (tmpShapeCursor.row + nRow > SCREEN_HEIGHT -1)))
    122e:	8e e0       	ldi	r24, 0x0E	; 14
    1230:	68 16       	cp	r6, r24
    1232:	71 04       	cpc	r7, r1
    1234:	20 f5       	brcc	.+72     	; 0x127e <aTRS_ENG_BoundaryCheck_Translate+0xd8>
    1236:	84 e1       	ldi	r24, 0x14	; 20
    1238:	a8 16       	cp	r10, r24
    123a:	b1 04       	cpc	r11, r1
    123c:	14 f5       	brge	.+68     	; 0x1282 <aTRS_ENG_BoundaryCheck_Translate+0xdc>
      {
        return false;
      }

      //Check if stopped by piled up shapes
      if ((mCurrentShape[Rotate(nCol, nRow, mShapeCursor.rot)] != 0) && (field[(tmpShapeCursor.row + nRow)  * SCREEN_WIDTH + tmpShapeCursor.col + nCol] !=0))
    123e:	88 81       	ld	r24, Y
    1240:	99 81       	ldd	r25, Y+1	; 0x01
    1242:	89 2b       	or	r24, r25
    1244:	01 f5       	brne	.+64     	; 0x1286 <aTRS_ENG_BoundaryCheck_Translate+0xe0>
    break;
  }

  for (uint8_t nRow = 0; nRow < 4; nRow++)
  {
    for (uint8_t nCol = 0; nCol < 4; nCol++)
    1246:	53 94       	inc	r5
    1248:	22 96       	adiw	r28, 0x02	; 2
    124a:	8f ef       	ldi	r24, 0xFF	; 255
    124c:	68 1a       	sub	r6, r24
    124e:	78 0a       	sbc	r7, r24
    1250:	84 e0       	ldi	r24, 0x04	; 4
    1252:	58 12       	cpse	r5, r24
    1254:	e2 cf       	rjmp	.-60     	; 0x121a <aTRS_ENG_BoundaryCheck_Translate+0x74>
    1256:	8f ef       	ldi	r24, 0xFF	; 255
    1258:	e8 1a       	sub	r14, r24
    125a:	f8 0a       	sbc	r15, r24
    125c:	04 5e       	subi	r16, 0xE4	; 228
    125e:	1f 4f       	sbci	r17, 0xFF	; 255
    break;
    default:
    break;
  }

  for (uint8_t nRow = 0; nRow < 4; nRow++)
    1260:	84 e0       	ldi	r24, 0x04	; 4
    1262:	e8 16       	cp	r14, r24
    1264:	f1 04       	cpc	r15, r1
    1266:	89 f0       	breq	.+34     	; 0x128a <aTRS_ENG_BoundaryCheck_Translate+0xe4>
    1268:	4e 2c       	mov	r4, r14
    126a:	62 2c       	mov	r6, r2
    126c:	02 2c       	mov	r0, r2
    126e:	00 0c       	add	r0, r0
    1270:	77 08       	sbc	r7, r7

/*
 * Boundary Checks
 */
bool aTRS_ENG_BoundaryCheck_Translate(uint8_t direction)
{
    1272:	e8 01       	movw	r28, r16
    1274:	51 2c       	mov	r5, r1
  {
    for (uint8_t nCol = 0; nCol < 4; nCol++)
    {
      //Check if exceed game frame
      if ((mCurrentShape[Rotate(nCol, nRow, mShapeCursor.rot)] != 0)
      && ((tmpShapeCursor.col + nCol < 0) || (tmpShapeCursor.col + nCol > SCREEN_WIDTH - 1) || (tmpShapeCursor.row + nRow > SCREEN_HEIGHT -1)))
    1276:	54 01       	movw	r10, r8
    1278:	ae 0c       	add	r10, r14
    127a:	bf 1c       	adc	r11, r15
    127c:	ce cf       	rjmp	.-100    	; 0x121a <aTRS_ENG_BoundaryCheck_Translate+0x74>
      {
        return false;
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	05 c0       	rjmp	.+10     	; 0x128c <aTRS_ENG_BoundaryCheck_Translate+0xe6>
    1282:	80 e0       	ldi	r24, 0x00	; 0
    1284:	03 c0       	rjmp	.+6      	; 0x128c <aTRS_ENG_BoundaryCheck_Translate+0xe6>
      }

      //Check if stopped by piled up shapes
      if ((mCurrentShape[Rotate(nCol, nRow, mShapeCursor.rot)] != 0) && (field[(tmpShapeCursor.row + nRow)  * SCREEN_WIDTH + tmpShapeCursor.col + nCol] !=0))
      {
        return false;
    1286:	80 e0       	ldi	r24, 0x00	; 0
    1288:	01 c0       	rjmp	.+2      	; 0x128c <aTRS_ENG_BoundaryCheck_Translate+0xe6>
      }
    }
  }
  return true;
    128a:	81 e0       	ldi	r24, 0x01	; 1
}
    128c:	df 91       	pop	r29
    128e:	cf 91       	pop	r28
    1290:	1f 91       	pop	r17
    1292:	0f 91       	pop	r16
    1294:	ff 90       	pop	r15
    1296:	ef 90       	pop	r14
    1298:	df 90       	pop	r13
    129a:	cf 90       	pop	r12
    129c:	bf 90       	pop	r11
    129e:	af 90       	pop	r10
    12a0:	9f 90       	pop	r9
    12a2:	8f 90       	pop	r8
    12a4:	7f 90       	pop	r7
    12a6:	6f 90       	pop	r6
    12a8:	5f 90       	pop	r5
    12aa:	4f 90       	pop	r4
    12ac:	3f 90       	pop	r3
    12ae:	2f 90       	pop	r2
    12b0:	08 95       	ret

000012b2 <aTRS_ENG_BoundaryCheck_Rotate>:

bool aTRS_ENG_BoundaryCheck_Rotate(void)
{
    12b2:	6f 92       	push	r6
    12b4:	7f 92       	push	r7
    12b6:	8f 92       	push	r8
    12b8:	9f 92       	push	r9
    12ba:	af 92       	push	r10
    12bc:	bf 92       	push	r11
    12be:	cf 92       	push	r12
    12c0:	df 92       	push	r13
    12c2:	ef 92       	push	r14
    12c4:	ff 92       	push	r15
    12c6:	0f 93       	push	r16
    12c8:	1f 93       	push	r17
    12ca:	cf 93       	push	r28
    12cc:	df 93       	push	r29
  __shapeCursor tmpShapeCursor = mShapeCursor;
    12ce:	e4 e0       	ldi	r30, 0x04	; 4
    12d0:	f2 e0       	ldi	r31, 0x02	; 2
    12d2:	80 80       	ld	r8, Z
    12d4:	61 80       	ldd	r6, Z+1	; 0x01
    12d6:	82 81       	ldd	r24, Z+2	; 0x02
  tmpShapeCursor.rot++;
    12d8:	77 24       	eor	r7, r7
    12da:	73 94       	inc	r7
    12dc:	78 0e       	add	r7, r24
  if (mShapeCursor.rot >= 4) mShapeCursor.rot = 0;
    12de:	84 30       	cpi	r24, 0x04	; 4
    12e0:	80 f1       	brcs	.+96     	; 0x1342 <aTRS_ENG_BoundaryCheck_Rotate+0x90>
    12e2:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <mShapeCursor+0x2>
    12e6:	2d c0       	rjmp	.+90     	; 0x1342 <aTRS_ENG_BoundaryCheck_Rotate+0x90>

  for (uint8_t nRow = 0; nRow < 4; nRow++)
  {
    for (uint8_t nCol = 0; nCol < 4; nCol++)
    {
      if ((mCurrentShape[Rotate(nCol, nRow, tmpShapeCursor.rot)] != 0)
    12e8:	47 2d       	mov	r20, r7
    12ea:	6d 2f       	mov	r22, r29
    12ec:	8c 2f       	mov	r24, r28
    12ee:	6a dd       	rcall	.-1324   	; 0xdc4 <Rotate>
    12f0:	f6 01       	movw	r30, r12
    12f2:	e8 0f       	add	r30, r24
    12f4:	f1 1d       	adc	r31, r1
    12f6:	80 81       	ld	r24, Z
    12f8:	88 23       	and	r24, r24
    12fa:	39 f0       	breq	.+14     	; 0x130a <aTRS_ENG_BoundaryCheck_Rotate+0x58>
      && ((tmpShapeCursor.col + nCol < 0) || (tmpShapeCursor.col + nCol > SCREEN_WIDTH - 1) || (tmpShapeCursor.row + nRow > SCREEN_HEIGHT -1)))
    12fc:	0e 30       	cpi	r16, 0x0E	; 14
    12fe:	11 05       	cpc	r17, r1
    1300:	d0 f4       	brcc	.+52     	; 0x1336 <aTRS_ENG_BoundaryCheck_Rotate+0x84>
    1302:	84 e1       	ldi	r24, 0x14	; 20
    1304:	a8 16       	cp	r10, r24
    1306:	b1 04       	cpc	r11, r1
    1308:	c4 f4       	brge	.+48     	; 0x133a <aTRS_ENG_BoundaryCheck_Rotate+0x88>
  tmpShapeCursor.rot++;
  if (mShapeCursor.rot >= 4) mShapeCursor.rot = 0;

  for (uint8_t nRow = 0; nRow < 4; nRow++)
  {
    for (uint8_t nCol = 0; nCol < 4; nCol++)
    130a:	cf 5f       	subi	r28, 0xFF	; 255
    130c:	0f 5f       	subi	r16, 0xFF	; 255
    130e:	1f 4f       	sbci	r17, 0xFF	; 255
    1310:	c4 30       	cpi	r28, 0x04	; 4
    1312:	51 f7       	brne	.-44     	; 0x12e8 <aTRS_ENG_BoundaryCheck_Rotate+0x36>
    1314:	8f ef       	ldi	r24, 0xFF	; 255
    1316:	e8 1a       	sub	r14, r24
    1318:	f8 0a       	sbc	r15, r24
{
  __shapeCursor tmpShapeCursor = mShapeCursor;
  tmpShapeCursor.rot++;
  if (mShapeCursor.rot >= 4) mShapeCursor.rot = 0;

  for (uint8_t nRow = 0; nRow < 4; nRow++)
    131a:	84 e0       	ldi	r24, 0x04	; 4
    131c:	e8 16       	cp	r14, r24
    131e:	f1 04       	cpc	r15, r1
    1320:	71 f0       	breq	.+28     	; 0x133e <aTRS_ENG_BoundaryCheck_Rotate+0x8c>
    1322:	de 2d       	mov	r29, r14
    1324:	06 2d       	mov	r16, r6
    1326:	06 2c       	mov	r0, r6
    1328:	00 0c       	add	r0, r0
    132a:	11 0b       	sbc	r17, r17
  }
  return true;
}

bool aTRS_ENG_BoundaryCheck_Rotate(void)
{
    132c:	c0 e0       	ldi	r28, 0x00	; 0
  for (uint8_t nRow = 0; nRow < 4; nRow++)
  {
    for (uint8_t nCol = 0; nCol < 4; nCol++)
    {
      if ((mCurrentShape[Rotate(nCol, nRow, tmpShapeCursor.rot)] != 0)
      && ((tmpShapeCursor.col + nCol < 0) || (tmpShapeCursor.col + nCol > SCREEN_WIDTH - 1) || (tmpShapeCursor.row + nRow > SCREEN_HEIGHT -1)))
    132e:	54 01       	movw	r10, r8
    1330:	ae 0c       	add	r10, r14
    1332:	bf 1c       	adc	r11, r15
    1334:	d9 cf       	rjmp	.-78     	; 0x12e8 <aTRS_ENG_BoundaryCheck_Rotate+0x36>
      {
        return false;
    1336:	80 e0       	ldi	r24, 0x00	; 0
    1338:	0e c0       	rjmp	.+28     	; 0x1356 <aTRS_ENG_BoundaryCheck_Rotate+0xa4>
    133a:	80 e0       	ldi	r24, 0x00	; 0
    133c:	0c c0       	rjmp	.+24     	; 0x1356 <aTRS_ENG_BoundaryCheck_Rotate+0xa4>
      }
    }
  }
  return true;
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	0a c0       	rjmp	.+20     	; 0x1356 <aTRS_ENG_BoundaryCheck_Rotate+0xa4>

  for (uint8_t nRow = 0; nRow < 4; nRow++)
  {
    for (uint8_t nCol = 0; nCol < 4; nCol++)
    {
      if ((mCurrentShape[Rotate(nCol, nRow, tmpShapeCursor.rot)] != 0)
    1342:	c0 90 07 02 	lds	r12, 0x0207	; 0x800207 <mCurrentShape>
    1346:	d0 90 08 02 	lds	r13, 0x0208	; 0x800208 <mCurrentShape+0x1>
    134a:	e1 2c       	mov	r14, r1
    134c:	f1 2c       	mov	r15, r1
      && ((tmpShapeCursor.col + nCol < 0) || (tmpShapeCursor.col + nCol > SCREEN_WIDTH - 1) || (tmpShapeCursor.row + nRow > SCREEN_HEIGHT -1)))
    134e:	08 2c       	mov	r0, r8
    1350:	00 0c       	add	r0, r0
    1352:	99 08       	sbc	r9, r9
    1354:	e6 cf       	rjmp	.-52     	; 0x1322 <aTRS_ENG_BoundaryCheck_Rotate+0x70>
        return false;
      }
    }
  }
  return true;
}
    1356:	df 91       	pop	r29
    1358:	cf 91       	pop	r28
    135a:	1f 91       	pop	r17
    135c:	0f 91       	pop	r16
    135e:	ff 90       	pop	r15
    1360:	ef 90       	pop	r14
    1362:	df 90       	pop	r13
    1364:	cf 90       	pop	r12
    1366:	bf 90       	pop	r11
    1368:	af 90       	pop	r10
    136a:	9f 90       	pop	r9
    136c:	8f 90       	pop	r8
    136e:	7f 90       	pop	r7
    1370:	6f 90       	pop	r6
    1372:	08 95       	ret

00001374 <aTRS_ENG_CheckClearedRows>:

void aTRS_ENG_CheckClearedRows(void)
{
    1374:	3f 92       	push	r3
    1376:	4f 92       	push	r4
    1378:	5f 92       	push	r5
    137a:	6f 92       	push	r6
    137c:	7f 92       	push	r7
    137e:	8f 92       	push	r8
    1380:	9f 92       	push	r9
    1382:	af 92       	push	r10
    1384:	bf 92       	push	r11
    1386:	cf 92       	push	r12
    1388:	df 92       	push	r13
    138a:	ef 92       	push	r14
    138c:	ff 92       	push	r15
    138e:	0f 93       	push	r16
    1390:	1f 93       	push	r17
    1392:	cf 93       	push	r28
    1394:	df 93       	push	r29
    1396:	0f 2e       	mov	r0, r31
    1398:	ff e9       	ldi	r31, 0x9F	; 159
    139a:	ef 2e       	mov	r14, r31
    139c:	f8 e0       	ldi	r31, 0x08	; 8
    139e:	ff 2e       	mov	r15, r31
    13a0:	f0 2d       	mov	r31, r0
    13a2:	0f 2e       	mov	r0, r31
    13a4:	fa e0       	ldi	r31, 0x0A	; 10
    13a6:	6f 2e       	mov	r6, r31
    13a8:	71 2c       	mov	r7, r1
    13aa:	f0 2d       	mov	r31, r0
  __unitBlockPos blockPos;
  for (uint8_t i = 0; i < SCREEN_HEIGHT; i++)
    13ac:	41 2c       	mov	r4, r1
static __unitBlockPos getUnitBlockPos(uint8_t row, uint8_t col)
{
  __unitBlockPos blockPos =
  {
    .unitBlock_x1 = 11 +(col*UNIT_BLOCK_SIZE + col) + 1,
    .unitBlock_y1 = 9 + (row*UNIT_BLOCK_SIZE + row) + 1,
    13ae:	0f 2e       	mov	r0, r31
    13b0:	ff e0       	ldi	r31, 0x0F	; 15
    13b2:	5f 2e       	mov	r5, r31
    13b4:	f0 2d       	mov	r31, r0
    13b6:	71 c0       	rjmp	.+226    	; 0x149a <aTRS_ENG_CheckClearedRows+0x126>
  for (uint8_t i = 0; i < SCREEN_HEIGHT; i++)
  {
    uint8_t blockNum = 0;
    for (uint8_t j = 0; j < SCREEN_WIDTH; j++)
    {
      if (field[i*SCREEN_WIDTH + j])
    13b8:	81 91       	ld	r24, Z+
    13ba:	91 91       	ld	r25, Z+
    13bc:	89 2b       	or	r24, r25
    13be:	09 f0       	breq	.+2      	; 0x13c2 <aTRS_ENG_CheckClearedRows+0x4e>
      {
        blockNum++;
    13c0:	2f 5f       	subi	r18, 0xFF	; 255
{
  __unitBlockPos blockPos;
  for (uint8_t i = 0; i < SCREEN_HEIGHT; i++)
  {
    uint8_t blockNum = 0;
    for (uint8_t j = 0; j < SCREEN_WIDTH; j++)
    13c2:	ae 16       	cp	r10, r30
    13c4:	bf 06       	cpc	r11, r31
    13c6:	c1 f7       	brne	.-16     	; 0x13b8 <aTRS_ENG_CheckClearedRows+0x44>
    13c8:	6f c0       	rjmp	.+222    	; 0x14a8 <aTRS_ENG_CheckClearedRows+0x134>
    {
      //Render cleared row and update field array
      for (uint8_t k = 0; k < SCREEN_WIDTH; k++)
      {
        blockPos = getUnitBlockPos(i, k) ;
        LCD_GUI_DrawFillRectangle(blockPos.unitBlock_x1,
    13ca:	ae 01       	movw	r20, r28
    13cc:	43 5f       	subi	r20, 0xF3	; 243
    13ce:	5f 4f       	sbci	r21, 0xFF	; 255
    13d0:	00 e0       	ldi	r16, 0x00	; 0
    13d2:	10 e0       	ldi	r17, 0x00	; 0
    13d4:	96 01       	movw	r18, r12
    13d6:	b3 01       	movw	r22, r6
    13d8:	ce 01       	movw	r24, r28
    13da:	7e da       	rcall	.-2820   	; 0x8d8 <LCD_GUI_DrawFillRectangle>
        blockPos.unitBlock_y1,
        blockPos.unitBlock_x2,
        blockPos.unitBlock_y2,
        BLACK);

        field[i*SCREEN_WIDTH + k] = 0;
    13dc:	f7 01       	movw	r30, r14
    13de:	11 92       	st	Z+, r1
    13e0:	11 92       	st	Z+, r1
    13e2:	7f 01       	movw	r14, r30
    13e4:	2f 96       	adiw	r28, 0x0f	; 15
      }
    }
    if (blockNum == SCREEN_WIDTH)
    {
      //Render cleared row and update field array
      for (uint8_t k = 0; k < SCREEN_WIDTH; k++)
    13e6:	ce 3d       	cpi	r28, 0xDE	; 222
    13e8:	d1 05       	cpc	r29, r1
    13ea:	79 f7       	brne	.-34     	; 0x13ca <aTRS_ENG_CheckClearedRows+0x56>
    13ec:	cc e0       	ldi	r28, 0x0C	; 12
    13ee:	d0 e0       	ldi	r29, 0x00	; 0
    13f0:	81 2c       	mov	r8, r1
    13f2:	91 2c       	mov	r9, r1
    13f4:	40 c0       	rjmp	.+128    	; 0x1476 <aTRS_ENG_CheckClearedRows+0x102>
      for (uint8_t l = 0; l < SCREEN_WIDTH; l++)
      {
        //loop through each row to the top row 1
        for (uint8_t m = i; m > 0; m--)
        {
          field[(m)*SCREEN_WIDTH + l] = field[(m-1)*SCREEN_WIDTH + l];
    13f6:	43 2d       	mov	r20, r3
    13f8:	50 e0       	ldi	r21, 0x00	; 0
    13fa:	9a 01       	movw	r18, r20
    13fc:	22 0f       	add	r18, r18
    13fe:	33 1f       	adc	r19, r19
    1400:	c9 01       	movw	r24, r18
    1402:	88 0f       	add	r24, r24
    1404:	99 1f       	adc	r25, r25
    1406:	88 0f       	add	r24, r24
    1408:	99 1f       	adc	r25, r25
    140a:	88 0f       	add	r24, r24
    140c:	99 1f       	adc	r25, r25
    140e:	82 1b       	sub	r24, r18
    1410:	93 0b       	sbc	r25, r19
    1412:	8e 0d       	add	r24, r14
    1414:	9f 1d       	adc	r25, r15
    1416:	fc 01       	movw	r30, r24
    1418:	ee 0f       	add	r30, r30
    141a:	ff 1f       	adc	r31, r31
    141c:	ed 57       	subi	r30, 0x7D	; 125
    141e:	f7 4f       	sbci	r31, 0xF7	; 247
    1420:	a0 81       	ld	r26, Z
    1422:	b1 81       	ldd	r27, Z+1	; 0x01
    1424:	88 0f       	add	r24, r24
    1426:	99 1f       	adc	r25, r25
    1428:	fc 01       	movw	r30, r24
    142a:	e1 56       	subi	r30, 0x61	; 97
    142c:	f7 4f       	sbci	r31, 0xF7	; 247
    142e:	b1 83       	std	Z+1, r27	; 0x01
    1430:	a0 83       	st	Z, r26
static __unitBlockPos getUnitBlockPos(uint8_t row, uint8_t col)
{
  __unitBlockPos blockPos =
  {
    .unitBlock_x1 = 11 +(col*UNIT_BLOCK_SIZE + col) + 1,
    .unitBlock_y1 = 9 + (row*UNIT_BLOCK_SIZE + row) + 1,
    1432:	54 9e       	mul	r5, r20
    1434:	90 01       	movw	r18, r0
    1436:	55 9e       	mul	r5, r21
    1438:	30 0d       	add	r19, r0
    143a:	11 24       	eor	r1, r1
  return tmp;
}

static __unitBlockPos getUnitBlockPos(uint8_t row, uint8_t col)
{
  __unitBlockPos blockPos =
    143c:	b9 01       	movw	r22, r18
    143e:	66 5f       	subi	r22, 0xF6	; 246
    1440:	7f 4f       	sbci	r23, 0xFF	; 255
    1442:	29 5e       	subi	r18, 0xE9	; 233
    1444:	3f 4f       	sbci	r19, 0xFF	; 255
        //loop through each row to the top row 1
        for (uint8_t m = i; m > 0; m--)
        {
          field[(m)*SCREEN_WIDTH + l] = field[(m-1)*SCREEN_WIDTH + l];
          blockPos = getUnitBlockPos(m, l);
          if (field[(m)*SCREEN_WIDTH + l])
    1446:	ab 2b       	or	r26, r27
    1448:	31 f0       	breq	.+12     	; 0x1456 <aTRS_ENG_CheckClearedRows+0xe2>
          {
            LCD_GUI_DrawFillRectangle(blockPos.unitBlock_x1,
    144a:	00 e0       	ldi	r16, 0x00	; 0
    144c:	18 ef       	ldi	r17, 0xF8	; 248
    144e:	a6 01       	movw	r20, r12
    1450:	ce 01       	movw	r24, r28
    1452:	42 da       	rcall	.-2940   	; 0x8d8 <LCD_GUI_DrawFillRectangle>
    1454:	05 c0       	rjmp	.+10     	; 0x1460 <aTRS_ENG_CheckClearedRows+0xec>
            blockPos.unitBlock_y2,
            RED);
          }
          else
          {
            LCD_GUI_DrawFillRectangle(blockPos.unitBlock_x1,
    1456:	00 e0       	ldi	r16, 0x00	; 0
    1458:	10 e0       	ldi	r17, 0x00	; 0
    145a:	a6 01       	movw	r20, r12
    145c:	ce 01       	movw	r24, r28
    145e:	3c da       	rcall	.-2952   	; 0x8d8 <LCD_GUI_DrawFillRectangle>

      //Shift each column down
      for (uint8_t l = 0; l < SCREEN_WIDTH; l++)
      {
        //loop through each row to the top row 1
        for (uint8_t m = i; m > 0; m--)
    1460:	3a 94       	dec	r3
    1462:	31 10       	cpse	r3, r1
    1464:	c8 cf       	rjmp	.-112    	; 0x13f6 <aTRS_ENG_CheckClearedRows+0x82>
    1466:	ff ef       	ldi	r31, 0xFF	; 255
    1468:	8f 1a       	sub	r8, r31
    146a:	9f 0a       	sbc	r9, r31
    146c:	2f 96       	adiw	r28, 0x0f	; 15

        field[i*SCREEN_WIDTH + k] = 0;
      }

      //Shift each column down
      for (uint8_t l = 0; l < SCREEN_WIDTH; l++)
    146e:	8e e0       	ldi	r24, 0x0E	; 14
    1470:	88 16       	cp	r8, r24
    1472:	91 04       	cpc	r9, r1
    1474:	49 f0       	breq	.+18     	; 0x1488 <aTRS_ENG_CheckClearedRows+0x114>
      {
        //loop through each row to the top row 1
        for (uint8_t m = i; m > 0; m--)
    1476:	44 20       	and	r4, r4
    1478:	b1 f3       	breq	.-20     	; 0x1466 <aTRS_ENG_CheckClearedRows+0xf2>
        {
          field[(m)*SCREEN_WIDTH + l] = field[(m-1)*SCREEN_WIDTH + l];
    147a:	74 01       	movw	r14, r8
    147c:	6e 01       	movw	r12, r28
    147e:	ed e0       	ldi	r30, 0x0D	; 13
    1480:	ce 0e       	add	r12, r30
    1482:	d1 1c       	adc	r13, r1
    1484:	34 2c       	mov	r3, r4
            blockPos.unitBlock_y2,
            BLACK);
          }
        }
      }
      aTRS_ENG_returnShapeCursorHome();
    1486:	b7 cf       	rjmp	.-146    	; 0x13f6 <aTRS_ENG_CheckClearedRows+0x82>
    1488:	d7 dc       	rcall	.-1618   	; 0xe38 <aTRS_ENG_returnShapeCursorHome>
}

void aTRS_ENG_CheckClearedRows(void)
{
  __unitBlockPos blockPos;
  for (uint8_t i = 0; i < SCREEN_HEIGHT; i++)
    148a:	43 94       	inc	r4
    148c:	ff e0       	ldi	r31, 0x0F	; 15
    148e:	6f 0e       	add	r6, r31
    1490:	71 1c       	adc	r7, r1
    1492:	75 01       	movw	r14, r10
    1494:	84 e1       	ldi	r24, 0x14	; 20
    1496:	48 16       	cp	r4, r24
    1498:	81 f0       	breq	.+32     	; 0x14ba <aTRS_ENG_CheckClearedRows+0x146>
    149a:	57 01       	movw	r10, r14
    149c:	ec e1       	ldi	r30, 0x1C	; 28
    149e:	ae 0e       	add	r10, r30
    14a0:	b1 1c       	adc	r11, r1
  }
  return true;
}

void aTRS_ENG_CheckClearedRows(void)
{
    14a2:	f7 01       	movw	r30, r14
    14a4:	20 e0       	ldi	r18, 0x00	; 0
    14a6:	88 cf       	rjmp	.-240    	; 0x13b8 <aTRS_ENG_CheckClearedRows+0x44>
      if (field[i*SCREEN_WIDTH + j])
      {
        blockNum++;
      }
    }
    if (blockNum == SCREEN_WIDTH)
    14a8:	2e 30       	cpi	r18, 0x0E	; 14
    14aa:	79 f7       	brne	.-34     	; 0x148a <aTRS_ENG_CheckClearedRows+0x116>
    14ac:	63 01       	movw	r12, r6
    14ae:	fd e0       	ldi	r31, 0x0D	; 13
    14b0:	cf 0e       	add	r12, r31
    14b2:	d1 1c       	adc	r13, r1
    14b4:	cc e0       	ldi	r28, 0x0C	; 12
    14b6:	d0 e0       	ldi	r29, 0x00	; 0
    14b8:	88 cf       	rjmp	.-240    	; 0x13ca <aTRS_ENG_CheckClearedRows+0x56>
        }
      }
      aTRS_ENG_returnShapeCursorHome();
    }
  }
}
    14ba:	df 91       	pop	r29
    14bc:	cf 91       	pop	r28
    14be:	1f 91       	pop	r17
    14c0:	0f 91       	pop	r16
    14c2:	ff 90       	pop	r15
    14c4:	ef 90       	pop	r14
    14c6:	df 90       	pop	r13
    14c8:	cf 90       	pop	r12
    14ca:	bf 90       	pop	r11
    14cc:	af 90       	pop	r10
    14ce:	9f 90       	pop	r9
    14d0:	8f 90       	pop	r8
    14d2:	7f 90       	pop	r7
    14d4:	6f 90       	pop	r6
    14d6:	5f 90       	pop	r5
    14d8:	4f 90       	pop	r4
    14da:	3f 90       	pop	r3
    14dc:	08 95       	ret

000014de <aTRS_ENG_ClearField>:

void aTRS_ENG_ClearField(void)
{
    14de:	ef e9       	ldi	r30, 0x9F	; 159
    14e0:	f8 e0       	ldi	r31, 0x08	; 8
    14e2:	2f ec       	ldi	r18, 0xCF	; 207
    14e4:	3a e0       	ldi	r19, 0x0A	; 10
    14e6:	09 c0       	rjmp	.+18     	; 0x14fa <aTRS_ENG_ClearField+0x1c>
  for (uint8_t i = 0; i < SCREEN_HEIGHT; i++)
  {
    for (uint8_t j = 0; j < SCREEN_WIDTH; j++)
    {
      field[i*SCREEN_WIDTH + j] = 0;
    14e8:	11 92       	st	Z+, r1
    14ea:	11 92       	st	Z+, r1

void aTRS_ENG_ClearField(void)
{
  for (uint8_t i = 0; i < SCREEN_HEIGHT; i++)
  {
    for (uint8_t j = 0; j < SCREEN_WIDTH; j++)
    14ec:	8e 17       	cp	r24, r30
    14ee:	9f 07       	cpc	r25, r31
    14f0:	d9 f7       	brne	.-10     	; 0x14e8 <aTRS_ENG_ClearField+0xa>
    14f2:	fc 01       	movw	r30, r24
  }
}

void aTRS_ENG_ClearField(void)
{
  for (uint8_t i = 0; i < SCREEN_HEIGHT; i++)
    14f4:	82 17       	cp	r24, r18
    14f6:	93 07       	cpc	r25, r19
    14f8:	19 f0       	breq	.+6      	; 0x1500 <aTRS_ENG_ClearField+0x22>
    14fa:	cf 01       	movw	r24, r30
    14fc:	4c 96       	adiw	r24, 0x1c	; 28
    14fe:	f4 cf       	rjmp	.-24     	; 0x14e8 <aTRS_ENG_ClearField+0xa>
    1500:	08 95       	ret

00001502 <aTRS_ENG_refreshAllBlocks>:

/************************************************************************/
/* Extra functions                                                      */
/************************************************************************/
void aTRS_ENG_refreshAllBlocks(uint16_t colour)
{
    1502:	af 92       	push	r10
    1504:	bf 92       	push	r11
    1506:	cf 92       	push	r12
    1508:	df 92       	push	r13
    150a:	ef 92       	push	r14
    150c:	ff 92       	push	r15
    150e:	0f 93       	push	r16
    1510:	1f 93       	push	r17
    1512:	cf 93       	push	r28
    1514:	df 93       	push	r29
    1516:	5c 01       	movw	r10, r24
    1518:	0f 2e       	mov	r0, r31
    151a:	fa e0       	ldi	r31, 0x0A	; 10
    151c:	ef 2e       	mov	r14, r31
    151e:	f1 2c       	mov	r15, r1
    1520:	f0 2d       	mov	r31, r0
    1522:	14 c0       	rjmp	.+40     	; 0x154c <aTRS_ENG_refreshAllBlocks+0x4a>
  for (int i = 0; i < 20; i++)
  {
    for (int j = 0; j < 14; j++)
    {
      LCD_GUI_DrawFillRectangle(11 +(j*UNIT_BLOCK_SIZE + j) + 1,
    1524:	ae 01       	movw	r20, r28
    1526:	43 5f       	subi	r20, 0xF3	; 243
    1528:	5f 4f       	sbci	r21, 0xFF	; 255
    152a:	85 01       	movw	r16, r10
    152c:	96 01       	movw	r18, r12
    152e:	b7 01       	movw	r22, r14
    1530:	ce 01       	movw	r24, r28
    1532:	d2 d9       	rcall	.-3164   	; 0x8d8 <LCD_GUI_DrawFillRectangle>
    1534:	2f 96       	adiw	r28, 0x0f	; 15
/************************************************************************/
void aTRS_ENG_refreshAllBlocks(uint16_t colour)
{
  for (int i = 0; i < 20; i++)
  {
    for (int j = 0; j < 14; j++)
    1536:	ce 3d       	cpi	r28, 0xDE	; 222
    1538:	d1 05       	cpc	r29, r1
    153a:	a1 f7       	brne	.-24     	; 0x1524 <aTRS_ENG_refreshAllBlocks+0x22>
    153c:	8f e0       	ldi	r24, 0x0F	; 15
    153e:	e8 0e       	add	r14, r24
    1540:	f1 1c       	adc	r15, r1
/************************************************************************/
/* Extra functions                                                      */
/************************************************************************/
void aTRS_ENG_refreshAllBlocks(uint16_t colour)
{
  for (int i = 0; i < 20; i++)
    1542:	86 e3       	ldi	r24, 0x36	; 54
    1544:	e8 16       	cp	r14, r24
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	f8 06       	cpc	r15, r24
    154a:	39 f0       	breq	.+14     	; 0x155a <aTRS_ENG_refreshAllBlocks+0x58>
    154c:	67 01       	movw	r12, r14
    154e:	8d e0       	ldi	r24, 0x0D	; 13
    1550:	c8 0e       	add	r12, r24
    1552:	d1 1c       	adc	r13, r1

/************************************************************************/
/* Extra functions                                                      */
/************************************************************************/
void aTRS_ENG_refreshAllBlocks(uint16_t colour)
{
    1554:	cc e0       	ldi	r28, 0x0C	; 12
    1556:	d0 e0       	ldi	r29, 0x00	; 0
    1558:	e5 cf       	rjmp	.-54     	; 0x1524 <aTRS_ENG_refreshAllBlocks+0x22>
      11 +(j*UNIT_BLOCK_SIZE + j) + UNIT_BLOCK_SIZE,
      9 + (i*UNIT_BLOCK_SIZE + i) + UNIT_BLOCK_SIZE,
      colour);
    }
  }
    155a:	df 91       	pop	r29
    155c:	cf 91       	pop	r28
    155e:	1f 91       	pop	r17
    1560:	0f 91       	pop	r16
    1562:	ff 90       	pop	r15
    1564:	ef 90       	pop	r14
    1566:	df 90       	pop	r13
    1568:	cf 90       	pop	r12
    156a:	bf 90       	pop	r11
    156c:	af 90       	pop	r10
    156e:	08 95       	ret

00001570 <__udivmodqi4>:
    1570:	99 1b       	sub	r25, r25
    1572:	79 e0       	ldi	r23, 0x09	; 9
    1574:	04 c0       	rjmp	.+8      	; 0x157e <__udivmodqi4_ep>

00001576 <__udivmodqi4_loop>:
    1576:	99 1f       	adc	r25, r25
    1578:	96 17       	cp	r25, r22
    157a:	08 f0       	brcs	.+2      	; 0x157e <__udivmodqi4_ep>
    157c:	96 1b       	sub	r25, r22

0000157e <__udivmodqi4_ep>:
    157e:	88 1f       	adc	r24, r24
    1580:	7a 95       	dec	r23
    1582:	c9 f7       	brne	.-14     	; 0x1576 <__udivmodqi4_loop>
    1584:	80 95       	com	r24
    1586:	08 95       	ret

00001588 <__divmodhi4>:
    1588:	97 fb       	bst	r25, 7
    158a:	07 2e       	mov	r0, r23
    158c:	16 f4       	brtc	.+4      	; 0x1592 <__divmodhi4+0xa>
    158e:	00 94       	com	r0
    1590:	06 d0       	rcall	.+12     	; 0x159e <__divmodhi4_neg1>
    1592:	77 fd       	sbrc	r23, 7
    1594:	08 d0       	rcall	.+16     	; 0x15a6 <__divmodhi4_neg2>
    1596:	2d d0       	rcall	.+90     	; 0x15f2 <__udivmodhi4>
    1598:	07 fc       	sbrc	r0, 7
    159a:	05 d0       	rcall	.+10     	; 0x15a6 <__divmodhi4_neg2>
    159c:	3e f4       	brtc	.+14     	; 0x15ac <__divmodhi4_exit>

0000159e <__divmodhi4_neg1>:
    159e:	90 95       	com	r25
    15a0:	81 95       	neg	r24
    15a2:	9f 4f       	sbci	r25, 0xFF	; 255
    15a4:	08 95       	ret

000015a6 <__divmodhi4_neg2>:
    15a6:	70 95       	com	r23
    15a8:	61 95       	neg	r22
    15aa:	7f 4f       	sbci	r23, 0xFF	; 255

000015ac <__divmodhi4_exit>:
    15ac:	08 95       	ret

000015ae <__udivmodsi4>:
    15ae:	a1 e2       	ldi	r26, 0x21	; 33
    15b0:	1a 2e       	mov	r1, r26
    15b2:	aa 1b       	sub	r26, r26
    15b4:	bb 1b       	sub	r27, r27
    15b6:	fd 01       	movw	r30, r26
    15b8:	0d c0       	rjmp	.+26     	; 0x15d4 <__udivmodsi4_ep>

000015ba <__udivmodsi4_loop>:
    15ba:	aa 1f       	adc	r26, r26
    15bc:	bb 1f       	adc	r27, r27
    15be:	ee 1f       	adc	r30, r30
    15c0:	ff 1f       	adc	r31, r31
    15c2:	a2 17       	cp	r26, r18
    15c4:	b3 07       	cpc	r27, r19
    15c6:	e4 07       	cpc	r30, r20
    15c8:	f5 07       	cpc	r31, r21
    15ca:	20 f0       	brcs	.+8      	; 0x15d4 <__udivmodsi4_ep>
    15cc:	a2 1b       	sub	r26, r18
    15ce:	b3 0b       	sbc	r27, r19
    15d0:	e4 0b       	sbc	r30, r20
    15d2:	f5 0b       	sbc	r31, r21

000015d4 <__udivmodsi4_ep>:
    15d4:	66 1f       	adc	r22, r22
    15d6:	77 1f       	adc	r23, r23
    15d8:	88 1f       	adc	r24, r24
    15da:	99 1f       	adc	r25, r25
    15dc:	1a 94       	dec	r1
    15de:	69 f7       	brne	.-38     	; 0x15ba <__udivmodsi4_loop>
    15e0:	60 95       	com	r22
    15e2:	70 95       	com	r23
    15e4:	80 95       	com	r24
    15e6:	90 95       	com	r25
    15e8:	9b 01       	movw	r18, r22
    15ea:	ac 01       	movw	r20, r24
    15ec:	bd 01       	movw	r22, r26
    15ee:	cf 01       	movw	r24, r30
    15f0:	08 95       	ret

000015f2 <__udivmodhi4>:
    15f2:	aa 1b       	sub	r26, r26
    15f4:	bb 1b       	sub	r27, r27
    15f6:	51 e1       	ldi	r21, 0x11	; 17
    15f8:	07 c0       	rjmp	.+14     	; 0x1608 <__udivmodhi4_ep>

000015fa <__udivmodhi4_loop>:
    15fa:	aa 1f       	adc	r26, r26
    15fc:	bb 1f       	adc	r27, r27
    15fe:	a6 17       	cp	r26, r22
    1600:	b7 07       	cpc	r27, r23
    1602:	10 f0       	brcs	.+4      	; 0x1608 <__udivmodhi4_ep>
    1604:	a6 1b       	sub	r26, r22
    1606:	b7 0b       	sbc	r27, r23

00001608 <__udivmodhi4_ep>:
    1608:	88 1f       	adc	r24, r24
    160a:	99 1f       	adc	r25, r25
    160c:	5a 95       	dec	r21
    160e:	a9 f7       	brne	.-22     	; 0x15fa <__udivmodhi4_loop>
    1610:	80 95       	com	r24
    1612:	90 95       	com	r25
    1614:	bc 01       	movw	r22, r24
    1616:	cd 01       	movw	r24, r26
    1618:	08 95       	ret

0000161a <do_rand>:
    161a:	8f 92       	push	r8
    161c:	9f 92       	push	r9
    161e:	af 92       	push	r10
    1620:	bf 92       	push	r11
    1622:	cf 92       	push	r12
    1624:	df 92       	push	r13
    1626:	ef 92       	push	r14
    1628:	ff 92       	push	r15
    162a:	cf 93       	push	r28
    162c:	df 93       	push	r29
    162e:	ec 01       	movw	r28, r24
    1630:	68 81       	ld	r22, Y
    1632:	79 81       	ldd	r23, Y+1	; 0x01
    1634:	8a 81       	ldd	r24, Y+2	; 0x02
    1636:	9b 81       	ldd	r25, Y+3	; 0x03
    1638:	61 15       	cp	r22, r1
    163a:	71 05       	cpc	r23, r1
    163c:	81 05       	cpc	r24, r1
    163e:	91 05       	cpc	r25, r1
    1640:	21 f4       	brne	.+8      	; 0x164a <do_rand+0x30>
    1642:	64 e2       	ldi	r22, 0x24	; 36
    1644:	79 ed       	ldi	r23, 0xD9	; 217
    1646:	8b e5       	ldi	r24, 0x5B	; 91
    1648:	97 e0       	ldi	r25, 0x07	; 7
    164a:	2d e1       	ldi	r18, 0x1D	; 29
    164c:	33 ef       	ldi	r19, 0xF3	; 243
    164e:	41 e0       	ldi	r20, 0x01	; 1
    1650:	50 e0       	ldi	r21, 0x00	; 0
    1652:	13 d3       	rcall	.+1574   	; 0x1c7a <__divmodsi4>
    1654:	49 01       	movw	r8, r18
    1656:	5a 01       	movw	r10, r20
    1658:	9b 01       	movw	r18, r22
    165a:	ac 01       	movw	r20, r24
    165c:	a7 ea       	ldi	r26, 0xA7	; 167
    165e:	b1 e4       	ldi	r27, 0x41	; 65
    1660:	28 d3       	rcall	.+1616   	; 0x1cb2 <__muluhisi3>
    1662:	6b 01       	movw	r12, r22
    1664:	7c 01       	movw	r14, r24
    1666:	ac ee       	ldi	r26, 0xEC	; 236
    1668:	b4 ef       	ldi	r27, 0xF4	; 244
    166a:	a5 01       	movw	r20, r10
    166c:	94 01       	movw	r18, r8
    166e:	2d d3       	rcall	.+1626   	; 0x1cca <__mulohisi3>
    1670:	dc 01       	movw	r26, r24
    1672:	cb 01       	movw	r24, r22
    1674:	8c 0d       	add	r24, r12
    1676:	9d 1d       	adc	r25, r13
    1678:	ae 1d       	adc	r26, r14
    167a:	bf 1d       	adc	r27, r15
    167c:	b7 ff       	sbrs	r27, 7
    167e:	03 c0       	rjmp	.+6      	; 0x1686 <do_rand+0x6c>
    1680:	01 97       	sbiw	r24, 0x01	; 1
    1682:	a1 09       	sbc	r26, r1
    1684:	b0 48       	sbci	r27, 0x80	; 128
    1686:	88 83       	st	Y, r24
    1688:	99 83       	std	Y+1, r25	; 0x01
    168a:	aa 83       	std	Y+2, r26	; 0x02
    168c:	bb 83       	std	Y+3, r27	; 0x03
    168e:	9f 77       	andi	r25, 0x7F	; 127
    1690:	df 91       	pop	r29
    1692:	cf 91       	pop	r28
    1694:	ff 90       	pop	r15
    1696:	ef 90       	pop	r14
    1698:	df 90       	pop	r13
    169a:	cf 90       	pop	r12
    169c:	bf 90       	pop	r11
    169e:	af 90       	pop	r10
    16a0:	9f 90       	pop	r9
    16a2:	8f 90       	pop	r8
    16a4:	08 95       	ret

000016a6 <rand_r>:
    16a6:	b9 cf       	rjmp	.-142    	; 0x161a <do_rand>

000016a8 <rand>:
    16a8:	80 e0       	ldi	r24, 0x00	; 0
    16aa:	92 e0       	ldi	r25, 0x02	; 2
    16ac:	b6 cf       	rjmp	.-148    	; 0x161a <do_rand>

000016ae <srand>:
    16ae:	a0 e0       	ldi	r26, 0x00	; 0
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
    16b6:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    16ba:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
    16be:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
    16c2:	08 95       	ret

000016c4 <sprintf>:
    16c4:	0f 93       	push	r16
    16c6:	1f 93       	push	r17
    16c8:	cf 93       	push	r28
    16ca:	df 93       	push	r29
    16cc:	cd b7       	in	r28, 0x3d	; 61
    16ce:	de b7       	in	r29, 0x3e	; 62
    16d0:	2e 97       	sbiw	r28, 0x0e	; 14
    16d2:	0f b6       	in	r0, 0x3f	; 63
    16d4:	f8 94       	cli
    16d6:	de bf       	out	0x3e, r29	; 62
    16d8:	0f be       	out	0x3f, r0	; 63
    16da:	cd bf       	out	0x3d, r28	; 61
    16dc:	0e 89       	ldd	r16, Y+22	; 0x16
    16de:	1f 89       	ldd	r17, Y+23	; 0x17
    16e0:	86 e0       	ldi	r24, 0x06	; 6
    16e2:	8c 83       	std	Y+4, r24	; 0x04
    16e4:	1a 83       	std	Y+2, r17	; 0x02
    16e6:	09 83       	std	Y+1, r16	; 0x01
    16e8:	8f ef       	ldi	r24, 0xFF	; 255
    16ea:	9f e7       	ldi	r25, 0x7F	; 127
    16ec:	9e 83       	std	Y+6, r25	; 0x06
    16ee:	8d 83       	std	Y+5, r24	; 0x05
    16f0:	ae 01       	movw	r20, r28
    16f2:	46 5e       	subi	r20, 0xE6	; 230
    16f4:	5f 4f       	sbci	r21, 0xFF	; 255
    16f6:	68 8d       	ldd	r22, Y+24	; 0x18
    16f8:	79 8d       	ldd	r23, Y+25	; 0x19
    16fa:	ce 01       	movw	r24, r28
    16fc:	01 96       	adiw	r24, 0x01	; 1
    16fe:	10 d0       	rcall	.+32     	; 0x1720 <vfprintf>
    1700:	ef 81       	ldd	r30, Y+7	; 0x07
    1702:	f8 85       	ldd	r31, Y+8	; 0x08
    1704:	e0 0f       	add	r30, r16
    1706:	f1 1f       	adc	r31, r17
    1708:	10 82       	st	Z, r1
    170a:	2e 96       	adiw	r28, 0x0e	; 14
    170c:	0f b6       	in	r0, 0x3f	; 63
    170e:	f8 94       	cli
    1710:	de bf       	out	0x3e, r29	; 62
    1712:	0f be       	out	0x3f, r0	; 63
    1714:	cd bf       	out	0x3d, r28	; 61
    1716:	df 91       	pop	r29
    1718:	cf 91       	pop	r28
    171a:	1f 91       	pop	r17
    171c:	0f 91       	pop	r16
    171e:	08 95       	ret

00001720 <vfprintf>:
    1720:	2f 92       	push	r2
    1722:	3f 92       	push	r3
    1724:	4f 92       	push	r4
    1726:	5f 92       	push	r5
    1728:	6f 92       	push	r6
    172a:	7f 92       	push	r7
    172c:	8f 92       	push	r8
    172e:	9f 92       	push	r9
    1730:	af 92       	push	r10
    1732:	bf 92       	push	r11
    1734:	cf 92       	push	r12
    1736:	df 92       	push	r13
    1738:	ef 92       	push	r14
    173a:	ff 92       	push	r15
    173c:	0f 93       	push	r16
    173e:	1f 93       	push	r17
    1740:	cf 93       	push	r28
    1742:	df 93       	push	r29
    1744:	cd b7       	in	r28, 0x3d	; 61
    1746:	de b7       	in	r29, 0x3e	; 62
    1748:	2b 97       	sbiw	r28, 0x0b	; 11
    174a:	0f b6       	in	r0, 0x3f	; 63
    174c:	f8 94       	cli
    174e:	de bf       	out	0x3e, r29	; 62
    1750:	0f be       	out	0x3f, r0	; 63
    1752:	cd bf       	out	0x3d, r28	; 61
    1754:	6c 01       	movw	r12, r24
    1756:	7b 01       	movw	r14, r22
    1758:	8a 01       	movw	r16, r20
    175a:	fc 01       	movw	r30, r24
    175c:	17 82       	std	Z+7, r1	; 0x07
    175e:	16 82       	std	Z+6, r1	; 0x06
    1760:	83 81       	ldd	r24, Z+3	; 0x03
    1762:	81 ff       	sbrs	r24, 1
    1764:	bf c1       	rjmp	.+894    	; 0x1ae4 <vfprintf+0x3c4>
    1766:	ce 01       	movw	r24, r28
    1768:	01 96       	adiw	r24, 0x01	; 1
    176a:	3c 01       	movw	r6, r24
    176c:	f6 01       	movw	r30, r12
    176e:	93 81       	ldd	r25, Z+3	; 0x03
    1770:	f7 01       	movw	r30, r14
    1772:	93 fd       	sbrc	r25, 3
    1774:	85 91       	lpm	r24, Z+
    1776:	93 ff       	sbrs	r25, 3
    1778:	81 91       	ld	r24, Z+
    177a:	7f 01       	movw	r14, r30
    177c:	88 23       	and	r24, r24
    177e:	09 f4       	brne	.+2      	; 0x1782 <vfprintf+0x62>
    1780:	ad c1       	rjmp	.+858    	; 0x1adc <vfprintf+0x3bc>
    1782:	85 32       	cpi	r24, 0x25	; 37
    1784:	39 f4       	brne	.+14     	; 0x1794 <vfprintf+0x74>
    1786:	93 fd       	sbrc	r25, 3
    1788:	85 91       	lpm	r24, Z+
    178a:	93 ff       	sbrs	r25, 3
    178c:	81 91       	ld	r24, Z+
    178e:	7f 01       	movw	r14, r30
    1790:	85 32       	cpi	r24, 0x25	; 37
    1792:	21 f4       	brne	.+8      	; 0x179c <vfprintf+0x7c>
    1794:	b6 01       	movw	r22, r12
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	d6 d1       	rcall	.+940    	; 0x1b46 <fputc>
    179a:	e8 cf       	rjmp	.-48     	; 0x176c <vfprintf+0x4c>
    179c:	91 2c       	mov	r9, r1
    179e:	21 2c       	mov	r2, r1
    17a0:	31 2c       	mov	r3, r1
    17a2:	ff e1       	ldi	r31, 0x1F	; 31
    17a4:	f3 15       	cp	r31, r3
    17a6:	d8 f0       	brcs	.+54     	; 0x17de <vfprintf+0xbe>
    17a8:	8b 32       	cpi	r24, 0x2B	; 43
    17aa:	79 f0       	breq	.+30     	; 0x17ca <vfprintf+0xaa>
    17ac:	38 f4       	brcc	.+14     	; 0x17bc <vfprintf+0x9c>
    17ae:	80 32       	cpi	r24, 0x20	; 32
    17b0:	79 f0       	breq	.+30     	; 0x17d0 <vfprintf+0xb0>
    17b2:	83 32       	cpi	r24, 0x23	; 35
    17b4:	a1 f4       	brne	.+40     	; 0x17de <vfprintf+0xbe>
    17b6:	23 2d       	mov	r18, r3
    17b8:	20 61       	ori	r18, 0x10	; 16
    17ba:	1d c0       	rjmp	.+58     	; 0x17f6 <vfprintf+0xd6>
    17bc:	8d 32       	cpi	r24, 0x2D	; 45
    17be:	61 f0       	breq	.+24     	; 0x17d8 <vfprintf+0xb8>
    17c0:	80 33       	cpi	r24, 0x30	; 48
    17c2:	69 f4       	brne	.+26     	; 0x17de <vfprintf+0xbe>
    17c4:	23 2d       	mov	r18, r3
    17c6:	21 60       	ori	r18, 0x01	; 1
    17c8:	16 c0       	rjmp	.+44     	; 0x17f6 <vfprintf+0xd6>
    17ca:	83 2d       	mov	r24, r3
    17cc:	82 60       	ori	r24, 0x02	; 2
    17ce:	38 2e       	mov	r3, r24
    17d0:	e3 2d       	mov	r30, r3
    17d2:	e4 60       	ori	r30, 0x04	; 4
    17d4:	3e 2e       	mov	r3, r30
    17d6:	2a c0       	rjmp	.+84     	; 0x182c <vfprintf+0x10c>
    17d8:	f3 2d       	mov	r31, r3
    17da:	f8 60       	ori	r31, 0x08	; 8
    17dc:	1d c0       	rjmp	.+58     	; 0x1818 <vfprintf+0xf8>
    17de:	37 fc       	sbrc	r3, 7
    17e0:	2d c0       	rjmp	.+90     	; 0x183c <vfprintf+0x11c>
    17e2:	20 ed       	ldi	r18, 0xD0	; 208
    17e4:	28 0f       	add	r18, r24
    17e6:	2a 30       	cpi	r18, 0x0A	; 10
    17e8:	40 f0       	brcs	.+16     	; 0x17fa <vfprintf+0xda>
    17ea:	8e 32       	cpi	r24, 0x2E	; 46
    17ec:	b9 f4       	brne	.+46     	; 0x181c <vfprintf+0xfc>
    17ee:	36 fc       	sbrc	r3, 6
    17f0:	75 c1       	rjmp	.+746    	; 0x1adc <vfprintf+0x3bc>
    17f2:	23 2d       	mov	r18, r3
    17f4:	20 64       	ori	r18, 0x40	; 64
    17f6:	32 2e       	mov	r3, r18
    17f8:	19 c0       	rjmp	.+50     	; 0x182c <vfprintf+0x10c>
    17fa:	36 fe       	sbrs	r3, 6
    17fc:	06 c0       	rjmp	.+12     	; 0x180a <vfprintf+0xea>
    17fe:	8a e0       	ldi	r24, 0x0A	; 10
    1800:	98 9e       	mul	r9, r24
    1802:	20 0d       	add	r18, r0
    1804:	11 24       	eor	r1, r1
    1806:	92 2e       	mov	r9, r18
    1808:	11 c0       	rjmp	.+34     	; 0x182c <vfprintf+0x10c>
    180a:	ea e0       	ldi	r30, 0x0A	; 10
    180c:	2e 9e       	mul	r2, r30
    180e:	20 0d       	add	r18, r0
    1810:	11 24       	eor	r1, r1
    1812:	22 2e       	mov	r2, r18
    1814:	f3 2d       	mov	r31, r3
    1816:	f0 62       	ori	r31, 0x20	; 32
    1818:	3f 2e       	mov	r3, r31
    181a:	08 c0       	rjmp	.+16     	; 0x182c <vfprintf+0x10c>
    181c:	8c 36       	cpi	r24, 0x6C	; 108
    181e:	21 f4       	brne	.+8      	; 0x1828 <vfprintf+0x108>
    1820:	83 2d       	mov	r24, r3
    1822:	80 68       	ori	r24, 0x80	; 128
    1824:	38 2e       	mov	r3, r24
    1826:	02 c0       	rjmp	.+4      	; 0x182c <vfprintf+0x10c>
    1828:	88 36       	cpi	r24, 0x68	; 104
    182a:	41 f4       	brne	.+16     	; 0x183c <vfprintf+0x11c>
    182c:	f7 01       	movw	r30, r14
    182e:	93 fd       	sbrc	r25, 3
    1830:	85 91       	lpm	r24, Z+
    1832:	93 ff       	sbrs	r25, 3
    1834:	81 91       	ld	r24, Z+
    1836:	7f 01       	movw	r14, r30
    1838:	81 11       	cpse	r24, r1
    183a:	b3 cf       	rjmp	.-154    	; 0x17a2 <vfprintf+0x82>
    183c:	98 2f       	mov	r25, r24
    183e:	9f 7d       	andi	r25, 0xDF	; 223
    1840:	95 54       	subi	r25, 0x45	; 69
    1842:	93 30       	cpi	r25, 0x03	; 3
    1844:	28 f4       	brcc	.+10     	; 0x1850 <vfprintf+0x130>
    1846:	0c 5f       	subi	r16, 0xFC	; 252
    1848:	1f 4f       	sbci	r17, 0xFF	; 255
    184a:	9f e3       	ldi	r25, 0x3F	; 63
    184c:	99 83       	std	Y+1, r25	; 0x01
    184e:	0d c0       	rjmp	.+26     	; 0x186a <vfprintf+0x14a>
    1850:	83 36       	cpi	r24, 0x63	; 99
    1852:	31 f0       	breq	.+12     	; 0x1860 <vfprintf+0x140>
    1854:	83 37       	cpi	r24, 0x73	; 115
    1856:	71 f0       	breq	.+28     	; 0x1874 <vfprintf+0x154>
    1858:	83 35       	cpi	r24, 0x53	; 83
    185a:	09 f0       	breq	.+2      	; 0x185e <vfprintf+0x13e>
    185c:	55 c0       	rjmp	.+170    	; 0x1908 <vfprintf+0x1e8>
    185e:	20 c0       	rjmp	.+64     	; 0x18a0 <vfprintf+0x180>
    1860:	f8 01       	movw	r30, r16
    1862:	80 81       	ld	r24, Z
    1864:	89 83       	std	Y+1, r24	; 0x01
    1866:	0e 5f       	subi	r16, 0xFE	; 254
    1868:	1f 4f       	sbci	r17, 0xFF	; 255
    186a:	88 24       	eor	r8, r8
    186c:	83 94       	inc	r8
    186e:	91 2c       	mov	r9, r1
    1870:	53 01       	movw	r10, r6
    1872:	12 c0       	rjmp	.+36     	; 0x1898 <vfprintf+0x178>
    1874:	28 01       	movw	r4, r16
    1876:	f2 e0       	ldi	r31, 0x02	; 2
    1878:	4f 0e       	add	r4, r31
    187a:	51 1c       	adc	r5, r1
    187c:	f8 01       	movw	r30, r16
    187e:	a0 80       	ld	r10, Z
    1880:	b1 80       	ldd	r11, Z+1	; 0x01
    1882:	36 fe       	sbrs	r3, 6
    1884:	03 c0       	rjmp	.+6      	; 0x188c <vfprintf+0x16c>
    1886:	69 2d       	mov	r22, r9
    1888:	70 e0       	ldi	r23, 0x00	; 0
    188a:	02 c0       	rjmp	.+4      	; 0x1890 <vfprintf+0x170>
    188c:	6f ef       	ldi	r22, 0xFF	; 255
    188e:	7f ef       	ldi	r23, 0xFF	; 255
    1890:	c5 01       	movw	r24, r10
    1892:	4e d1       	rcall	.+668    	; 0x1b30 <strnlen>
    1894:	4c 01       	movw	r8, r24
    1896:	82 01       	movw	r16, r4
    1898:	f3 2d       	mov	r31, r3
    189a:	ff 77       	andi	r31, 0x7F	; 127
    189c:	3f 2e       	mov	r3, r31
    189e:	15 c0       	rjmp	.+42     	; 0x18ca <vfprintf+0x1aa>
    18a0:	28 01       	movw	r4, r16
    18a2:	22 e0       	ldi	r18, 0x02	; 2
    18a4:	42 0e       	add	r4, r18
    18a6:	51 1c       	adc	r5, r1
    18a8:	f8 01       	movw	r30, r16
    18aa:	a0 80       	ld	r10, Z
    18ac:	b1 80       	ldd	r11, Z+1	; 0x01
    18ae:	36 fe       	sbrs	r3, 6
    18b0:	03 c0       	rjmp	.+6      	; 0x18b8 <vfprintf+0x198>
    18b2:	69 2d       	mov	r22, r9
    18b4:	70 e0       	ldi	r23, 0x00	; 0
    18b6:	02 c0       	rjmp	.+4      	; 0x18bc <vfprintf+0x19c>
    18b8:	6f ef       	ldi	r22, 0xFF	; 255
    18ba:	7f ef       	ldi	r23, 0xFF	; 255
    18bc:	c5 01       	movw	r24, r10
    18be:	2d d1       	rcall	.+602    	; 0x1b1a <strnlen_P>
    18c0:	4c 01       	movw	r8, r24
    18c2:	f3 2d       	mov	r31, r3
    18c4:	f0 68       	ori	r31, 0x80	; 128
    18c6:	3f 2e       	mov	r3, r31
    18c8:	82 01       	movw	r16, r4
    18ca:	33 fc       	sbrc	r3, 3
    18cc:	19 c0       	rjmp	.+50     	; 0x1900 <vfprintf+0x1e0>
    18ce:	82 2d       	mov	r24, r2
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	88 16       	cp	r8, r24
    18d4:	99 06       	cpc	r9, r25
    18d6:	a0 f4       	brcc	.+40     	; 0x1900 <vfprintf+0x1e0>
    18d8:	b6 01       	movw	r22, r12
    18da:	80 e2       	ldi	r24, 0x20	; 32
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	33 d1       	rcall	.+614    	; 0x1b46 <fputc>
    18e0:	2a 94       	dec	r2
    18e2:	f5 cf       	rjmp	.-22     	; 0x18ce <vfprintf+0x1ae>
    18e4:	f5 01       	movw	r30, r10
    18e6:	37 fc       	sbrc	r3, 7
    18e8:	85 91       	lpm	r24, Z+
    18ea:	37 fe       	sbrs	r3, 7
    18ec:	81 91       	ld	r24, Z+
    18ee:	5f 01       	movw	r10, r30
    18f0:	b6 01       	movw	r22, r12
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	28 d1       	rcall	.+592    	; 0x1b46 <fputc>
    18f6:	21 10       	cpse	r2, r1
    18f8:	2a 94       	dec	r2
    18fa:	21 e0       	ldi	r18, 0x01	; 1
    18fc:	82 1a       	sub	r8, r18
    18fe:	91 08       	sbc	r9, r1
    1900:	81 14       	cp	r8, r1
    1902:	91 04       	cpc	r9, r1
    1904:	79 f7       	brne	.-34     	; 0x18e4 <vfprintf+0x1c4>
    1906:	e1 c0       	rjmp	.+450    	; 0x1aca <vfprintf+0x3aa>
    1908:	84 36       	cpi	r24, 0x64	; 100
    190a:	11 f0       	breq	.+4      	; 0x1910 <vfprintf+0x1f0>
    190c:	89 36       	cpi	r24, 0x69	; 105
    190e:	39 f5       	brne	.+78     	; 0x195e <vfprintf+0x23e>
    1910:	f8 01       	movw	r30, r16
    1912:	37 fe       	sbrs	r3, 7
    1914:	07 c0       	rjmp	.+14     	; 0x1924 <vfprintf+0x204>
    1916:	60 81       	ld	r22, Z
    1918:	71 81       	ldd	r23, Z+1	; 0x01
    191a:	82 81       	ldd	r24, Z+2	; 0x02
    191c:	93 81       	ldd	r25, Z+3	; 0x03
    191e:	0c 5f       	subi	r16, 0xFC	; 252
    1920:	1f 4f       	sbci	r17, 0xFF	; 255
    1922:	08 c0       	rjmp	.+16     	; 0x1934 <vfprintf+0x214>
    1924:	60 81       	ld	r22, Z
    1926:	71 81       	ldd	r23, Z+1	; 0x01
    1928:	07 2e       	mov	r0, r23
    192a:	00 0c       	add	r0, r0
    192c:	88 0b       	sbc	r24, r24
    192e:	99 0b       	sbc	r25, r25
    1930:	0e 5f       	subi	r16, 0xFE	; 254
    1932:	1f 4f       	sbci	r17, 0xFF	; 255
    1934:	f3 2d       	mov	r31, r3
    1936:	ff 76       	andi	r31, 0x6F	; 111
    1938:	3f 2e       	mov	r3, r31
    193a:	97 ff       	sbrs	r25, 7
    193c:	09 c0       	rjmp	.+18     	; 0x1950 <vfprintf+0x230>
    193e:	90 95       	com	r25
    1940:	80 95       	com	r24
    1942:	70 95       	com	r23
    1944:	61 95       	neg	r22
    1946:	7f 4f       	sbci	r23, 0xFF	; 255
    1948:	8f 4f       	sbci	r24, 0xFF	; 255
    194a:	9f 4f       	sbci	r25, 0xFF	; 255
    194c:	f0 68       	ori	r31, 0x80	; 128
    194e:	3f 2e       	mov	r3, r31
    1950:	2a e0       	ldi	r18, 0x0A	; 10
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	a3 01       	movw	r20, r6
    1956:	33 d1       	rcall	.+614    	; 0x1bbe <__ultoa_invert>
    1958:	88 2e       	mov	r8, r24
    195a:	86 18       	sub	r8, r6
    195c:	44 c0       	rjmp	.+136    	; 0x19e6 <vfprintf+0x2c6>
    195e:	85 37       	cpi	r24, 0x75	; 117
    1960:	31 f4       	brne	.+12     	; 0x196e <vfprintf+0x24e>
    1962:	23 2d       	mov	r18, r3
    1964:	2f 7e       	andi	r18, 0xEF	; 239
    1966:	b2 2e       	mov	r11, r18
    1968:	2a e0       	ldi	r18, 0x0A	; 10
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	25 c0       	rjmp	.+74     	; 0x19b8 <vfprintf+0x298>
    196e:	93 2d       	mov	r25, r3
    1970:	99 7f       	andi	r25, 0xF9	; 249
    1972:	b9 2e       	mov	r11, r25
    1974:	8f 36       	cpi	r24, 0x6F	; 111
    1976:	c1 f0       	breq	.+48     	; 0x19a8 <vfprintf+0x288>
    1978:	18 f4       	brcc	.+6      	; 0x1980 <vfprintf+0x260>
    197a:	88 35       	cpi	r24, 0x58	; 88
    197c:	79 f0       	breq	.+30     	; 0x199c <vfprintf+0x27c>
    197e:	ae c0       	rjmp	.+348    	; 0x1adc <vfprintf+0x3bc>
    1980:	80 37       	cpi	r24, 0x70	; 112
    1982:	19 f0       	breq	.+6      	; 0x198a <vfprintf+0x26a>
    1984:	88 37       	cpi	r24, 0x78	; 120
    1986:	21 f0       	breq	.+8      	; 0x1990 <vfprintf+0x270>
    1988:	a9 c0       	rjmp	.+338    	; 0x1adc <vfprintf+0x3bc>
    198a:	e9 2f       	mov	r30, r25
    198c:	e0 61       	ori	r30, 0x10	; 16
    198e:	be 2e       	mov	r11, r30
    1990:	b4 fe       	sbrs	r11, 4
    1992:	0d c0       	rjmp	.+26     	; 0x19ae <vfprintf+0x28e>
    1994:	fb 2d       	mov	r31, r11
    1996:	f4 60       	ori	r31, 0x04	; 4
    1998:	bf 2e       	mov	r11, r31
    199a:	09 c0       	rjmp	.+18     	; 0x19ae <vfprintf+0x28e>
    199c:	34 fe       	sbrs	r3, 4
    199e:	0a c0       	rjmp	.+20     	; 0x19b4 <vfprintf+0x294>
    19a0:	29 2f       	mov	r18, r25
    19a2:	26 60       	ori	r18, 0x06	; 6
    19a4:	b2 2e       	mov	r11, r18
    19a6:	06 c0       	rjmp	.+12     	; 0x19b4 <vfprintf+0x294>
    19a8:	28 e0       	ldi	r18, 0x08	; 8
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	05 c0       	rjmp	.+10     	; 0x19b8 <vfprintf+0x298>
    19ae:	20 e1       	ldi	r18, 0x10	; 16
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	02 c0       	rjmp	.+4      	; 0x19b8 <vfprintf+0x298>
    19b4:	20 e1       	ldi	r18, 0x10	; 16
    19b6:	32 e0       	ldi	r19, 0x02	; 2
    19b8:	f8 01       	movw	r30, r16
    19ba:	b7 fe       	sbrs	r11, 7
    19bc:	07 c0       	rjmp	.+14     	; 0x19cc <vfprintf+0x2ac>
    19be:	60 81       	ld	r22, Z
    19c0:	71 81       	ldd	r23, Z+1	; 0x01
    19c2:	82 81       	ldd	r24, Z+2	; 0x02
    19c4:	93 81       	ldd	r25, Z+3	; 0x03
    19c6:	0c 5f       	subi	r16, 0xFC	; 252
    19c8:	1f 4f       	sbci	r17, 0xFF	; 255
    19ca:	06 c0       	rjmp	.+12     	; 0x19d8 <vfprintf+0x2b8>
    19cc:	60 81       	ld	r22, Z
    19ce:	71 81       	ldd	r23, Z+1	; 0x01
    19d0:	80 e0       	ldi	r24, 0x00	; 0
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	0e 5f       	subi	r16, 0xFE	; 254
    19d6:	1f 4f       	sbci	r17, 0xFF	; 255
    19d8:	a3 01       	movw	r20, r6
    19da:	f1 d0       	rcall	.+482    	; 0x1bbe <__ultoa_invert>
    19dc:	88 2e       	mov	r8, r24
    19de:	86 18       	sub	r8, r6
    19e0:	fb 2d       	mov	r31, r11
    19e2:	ff 77       	andi	r31, 0x7F	; 127
    19e4:	3f 2e       	mov	r3, r31
    19e6:	36 fe       	sbrs	r3, 6
    19e8:	0d c0       	rjmp	.+26     	; 0x1a04 <vfprintf+0x2e4>
    19ea:	23 2d       	mov	r18, r3
    19ec:	2e 7f       	andi	r18, 0xFE	; 254
    19ee:	a2 2e       	mov	r10, r18
    19f0:	89 14       	cp	r8, r9
    19f2:	58 f4       	brcc	.+22     	; 0x1a0a <vfprintf+0x2ea>
    19f4:	34 fe       	sbrs	r3, 4
    19f6:	0b c0       	rjmp	.+22     	; 0x1a0e <vfprintf+0x2ee>
    19f8:	32 fc       	sbrc	r3, 2
    19fa:	09 c0       	rjmp	.+18     	; 0x1a0e <vfprintf+0x2ee>
    19fc:	83 2d       	mov	r24, r3
    19fe:	8e 7e       	andi	r24, 0xEE	; 238
    1a00:	a8 2e       	mov	r10, r24
    1a02:	05 c0       	rjmp	.+10     	; 0x1a0e <vfprintf+0x2ee>
    1a04:	b8 2c       	mov	r11, r8
    1a06:	a3 2c       	mov	r10, r3
    1a08:	03 c0       	rjmp	.+6      	; 0x1a10 <vfprintf+0x2f0>
    1a0a:	b8 2c       	mov	r11, r8
    1a0c:	01 c0       	rjmp	.+2      	; 0x1a10 <vfprintf+0x2f0>
    1a0e:	b9 2c       	mov	r11, r9
    1a10:	a4 fe       	sbrs	r10, 4
    1a12:	0f c0       	rjmp	.+30     	; 0x1a32 <vfprintf+0x312>
    1a14:	fe 01       	movw	r30, r28
    1a16:	e8 0d       	add	r30, r8
    1a18:	f1 1d       	adc	r31, r1
    1a1a:	80 81       	ld	r24, Z
    1a1c:	80 33       	cpi	r24, 0x30	; 48
    1a1e:	21 f4       	brne	.+8      	; 0x1a28 <vfprintf+0x308>
    1a20:	9a 2d       	mov	r25, r10
    1a22:	99 7e       	andi	r25, 0xE9	; 233
    1a24:	a9 2e       	mov	r10, r25
    1a26:	09 c0       	rjmp	.+18     	; 0x1a3a <vfprintf+0x31a>
    1a28:	a2 fe       	sbrs	r10, 2
    1a2a:	06 c0       	rjmp	.+12     	; 0x1a38 <vfprintf+0x318>
    1a2c:	b3 94       	inc	r11
    1a2e:	b3 94       	inc	r11
    1a30:	04 c0       	rjmp	.+8      	; 0x1a3a <vfprintf+0x31a>
    1a32:	8a 2d       	mov	r24, r10
    1a34:	86 78       	andi	r24, 0x86	; 134
    1a36:	09 f0       	breq	.+2      	; 0x1a3a <vfprintf+0x31a>
    1a38:	b3 94       	inc	r11
    1a3a:	a3 fc       	sbrc	r10, 3
    1a3c:	10 c0       	rjmp	.+32     	; 0x1a5e <vfprintf+0x33e>
    1a3e:	a0 fe       	sbrs	r10, 0
    1a40:	06 c0       	rjmp	.+12     	; 0x1a4e <vfprintf+0x32e>
    1a42:	b2 14       	cp	r11, r2
    1a44:	80 f4       	brcc	.+32     	; 0x1a66 <vfprintf+0x346>
    1a46:	28 0c       	add	r2, r8
    1a48:	92 2c       	mov	r9, r2
    1a4a:	9b 18       	sub	r9, r11
    1a4c:	0d c0       	rjmp	.+26     	; 0x1a68 <vfprintf+0x348>
    1a4e:	b2 14       	cp	r11, r2
    1a50:	58 f4       	brcc	.+22     	; 0x1a68 <vfprintf+0x348>
    1a52:	b6 01       	movw	r22, r12
    1a54:	80 e2       	ldi	r24, 0x20	; 32
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	76 d0       	rcall	.+236    	; 0x1b46 <fputc>
    1a5a:	b3 94       	inc	r11
    1a5c:	f8 cf       	rjmp	.-16     	; 0x1a4e <vfprintf+0x32e>
    1a5e:	b2 14       	cp	r11, r2
    1a60:	18 f4       	brcc	.+6      	; 0x1a68 <vfprintf+0x348>
    1a62:	2b 18       	sub	r2, r11
    1a64:	02 c0       	rjmp	.+4      	; 0x1a6a <vfprintf+0x34a>
    1a66:	98 2c       	mov	r9, r8
    1a68:	21 2c       	mov	r2, r1
    1a6a:	a4 fe       	sbrs	r10, 4
    1a6c:	0f c0       	rjmp	.+30     	; 0x1a8c <vfprintf+0x36c>
    1a6e:	b6 01       	movw	r22, r12
    1a70:	80 e3       	ldi	r24, 0x30	; 48
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	68 d0       	rcall	.+208    	; 0x1b46 <fputc>
    1a76:	a2 fe       	sbrs	r10, 2
    1a78:	16 c0       	rjmp	.+44     	; 0x1aa6 <vfprintf+0x386>
    1a7a:	a1 fc       	sbrc	r10, 1
    1a7c:	03 c0       	rjmp	.+6      	; 0x1a84 <vfprintf+0x364>
    1a7e:	88 e7       	ldi	r24, 0x78	; 120
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	02 c0       	rjmp	.+4      	; 0x1a88 <vfprintf+0x368>
    1a84:	88 e5       	ldi	r24, 0x58	; 88
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	b6 01       	movw	r22, r12
    1a8a:	0c c0       	rjmp	.+24     	; 0x1aa4 <vfprintf+0x384>
    1a8c:	8a 2d       	mov	r24, r10
    1a8e:	86 78       	andi	r24, 0x86	; 134
    1a90:	51 f0       	breq	.+20     	; 0x1aa6 <vfprintf+0x386>
    1a92:	a1 fe       	sbrs	r10, 1
    1a94:	02 c0       	rjmp	.+4      	; 0x1a9a <vfprintf+0x37a>
    1a96:	8b e2       	ldi	r24, 0x2B	; 43
    1a98:	01 c0       	rjmp	.+2      	; 0x1a9c <vfprintf+0x37c>
    1a9a:	80 e2       	ldi	r24, 0x20	; 32
    1a9c:	a7 fc       	sbrc	r10, 7
    1a9e:	8d e2       	ldi	r24, 0x2D	; 45
    1aa0:	b6 01       	movw	r22, r12
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	50 d0       	rcall	.+160    	; 0x1b46 <fputc>
    1aa6:	89 14       	cp	r8, r9
    1aa8:	30 f4       	brcc	.+12     	; 0x1ab6 <vfprintf+0x396>
    1aaa:	b6 01       	movw	r22, r12
    1aac:	80 e3       	ldi	r24, 0x30	; 48
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	4a d0       	rcall	.+148    	; 0x1b46 <fputc>
    1ab2:	9a 94       	dec	r9
    1ab4:	f8 cf       	rjmp	.-16     	; 0x1aa6 <vfprintf+0x386>
    1ab6:	8a 94       	dec	r8
    1ab8:	f3 01       	movw	r30, r6
    1aba:	e8 0d       	add	r30, r8
    1abc:	f1 1d       	adc	r31, r1
    1abe:	80 81       	ld	r24, Z
    1ac0:	b6 01       	movw	r22, r12
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	40 d0       	rcall	.+128    	; 0x1b46 <fputc>
    1ac6:	81 10       	cpse	r8, r1
    1ac8:	f6 cf       	rjmp	.-20     	; 0x1ab6 <vfprintf+0x396>
    1aca:	22 20       	and	r2, r2
    1acc:	09 f4       	brne	.+2      	; 0x1ad0 <vfprintf+0x3b0>
    1ace:	4e ce       	rjmp	.-868    	; 0x176c <vfprintf+0x4c>
    1ad0:	b6 01       	movw	r22, r12
    1ad2:	80 e2       	ldi	r24, 0x20	; 32
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	37 d0       	rcall	.+110    	; 0x1b46 <fputc>
    1ad8:	2a 94       	dec	r2
    1ada:	f7 cf       	rjmp	.-18     	; 0x1aca <vfprintf+0x3aa>
    1adc:	f6 01       	movw	r30, r12
    1ade:	86 81       	ldd	r24, Z+6	; 0x06
    1ae0:	97 81       	ldd	r25, Z+7	; 0x07
    1ae2:	02 c0       	rjmp	.+4      	; 0x1ae8 <vfprintf+0x3c8>
    1ae4:	8f ef       	ldi	r24, 0xFF	; 255
    1ae6:	9f ef       	ldi	r25, 0xFF	; 255
    1ae8:	2b 96       	adiw	r28, 0x0b	; 11
    1aea:	0f b6       	in	r0, 0x3f	; 63
    1aec:	f8 94       	cli
    1aee:	de bf       	out	0x3e, r29	; 62
    1af0:	0f be       	out	0x3f, r0	; 63
    1af2:	cd bf       	out	0x3d, r28	; 61
    1af4:	df 91       	pop	r29
    1af6:	cf 91       	pop	r28
    1af8:	1f 91       	pop	r17
    1afa:	0f 91       	pop	r16
    1afc:	ff 90       	pop	r15
    1afe:	ef 90       	pop	r14
    1b00:	df 90       	pop	r13
    1b02:	cf 90       	pop	r12
    1b04:	bf 90       	pop	r11
    1b06:	af 90       	pop	r10
    1b08:	9f 90       	pop	r9
    1b0a:	8f 90       	pop	r8
    1b0c:	7f 90       	pop	r7
    1b0e:	6f 90       	pop	r6
    1b10:	5f 90       	pop	r5
    1b12:	4f 90       	pop	r4
    1b14:	3f 90       	pop	r3
    1b16:	2f 90       	pop	r2
    1b18:	08 95       	ret

00001b1a <strnlen_P>:
    1b1a:	fc 01       	movw	r30, r24
    1b1c:	05 90       	lpm	r0, Z+
    1b1e:	61 50       	subi	r22, 0x01	; 1
    1b20:	70 40       	sbci	r23, 0x00	; 0
    1b22:	01 10       	cpse	r0, r1
    1b24:	d8 f7       	brcc	.-10     	; 0x1b1c <strnlen_P+0x2>
    1b26:	80 95       	com	r24
    1b28:	90 95       	com	r25
    1b2a:	8e 0f       	add	r24, r30
    1b2c:	9f 1f       	adc	r25, r31
    1b2e:	08 95       	ret

00001b30 <strnlen>:
    1b30:	fc 01       	movw	r30, r24
    1b32:	61 50       	subi	r22, 0x01	; 1
    1b34:	70 40       	sbci	r23, 0x00	; 0
    1b36:	01 90       	ld	r0, Z+
    1b38:	01 10       	cpse	r0, r1
    1b3a:	d8 f7       	brcc	.-10     	; 0x1b32 <strnlen+0x2>
    1b3c:	80 95       	com	r24
    1b3e:	90 95       	com	r25
    1b40:	8e 0f       	add	r24, r30
    1b42:	9f 1f       	adc	r25, r31
    1b44:	08 95       	ret

00001b46 <fputc>:
    1b46:	0f 93       	push	r16
    1b48:	1f 93       	push	r17
    1b4a:	cf 93       	push	r28
    1b4c:	df 93       	push	r29
    1b4e:	fb 01       	movw	r30, r22
    1b50:	23 81       	ldd	r18, Z+3	; 0x03
    1b52:	21 fd       	sbrc	r18, 1
    1b54:	03 c0       	rjmp	.+6      	; 0x1b5c <fputc+0x16>
    1b56:	8f ef       	ldi	r24, 0xFF	; 255
    1b58:	9f ef       	ldi	r25, 0xFF	; 255
    1b5a:	2c c0       	rjmp	.+88     	; 0x1bb4 <fputc+0x6e>
    1b5c:	22 ff       	sbrs	r18, 2
    1b5e:	16 c0       	rjmp	.+44     	; 0x1b8c <fputc+0x46>
    1b60:	46 81       	ldd	r20, Z+6	; 0x06
    1b62:	57 81       	ldd	r21, Z+7	; 0x07
    1b64:	24 81       	ldd	r18, Z+4	; 0x04
    1b66:	35 81       	ldd	r19, Z+5	; 0x05
    1b68:	42 17       	cp	r20, r18
    1b6a:	53 07       	cpc	r21, r19
    1b6c:	44 f4       	brge	.+16     	; 0x1b7e <fputc+0x38>
    1b6e:	a0 81       	ld	r26, Z
    1b70:	b1 81       	ldd	r27, Z+1	; 0x01
    1b72:	9d 01       	movw	r18, r26
    1b74:	2f 5f       	subi	r18, 0xFF	; 255
    1b76:	3f 4f       	sbci	r19, 0xFF	; 255
    1b78:	31 83       	std	Z+1, r19	; 0x01
    1b7a:	20 83       	st	Z, r18
    1b7c:	8c 93       	st	X, r24
    1b7e:	26 81       	ldd	r18, Z+6	; 0x06
    1b80:	37 81       	ldd	r19, Z+7	; 0x07
    1b82:	2f 5f       	subi	r18, 0xFF	; 255
    1b84:	3f 4f       	sbci	r19, 0xFF	; 255
    1b86:	37 83       	std	Z+7, r19	; 0x07
    1b88:	26 83       	std	Z+6, r18	; 0x06
    1b8a:	14 c0       	rjmp	.+40     	; 0x1bb4 <fputc+0x6e>
    1b8c:	8b 01       	movw	r16, r22
    1b8e:	ec 01       	movw	r28, r24
    1b90:	fb 01       	movw	r30, r22
    1b92:	00 84       	ldd	r0, Z+8	; 0x08
    1b94:	f1 85       	ldd	r31, Z+9	; 0x09
    1b96:	e0 2d       	mov	r30, r0
    1b98:	19 95       	eicall
    1b9a:	89 2b       	or	r24, r25
    1b9c:	e1 f6       	brne	.-72     	; 0x1b56 <fputc+0x10>
    1b9e:	d8 01       	movw	r26, r16
    1ba0:	16 96       	adiw	r26, 0x06	; 6
    1ba2:	8d 91       	ld	r24, X+
    1ba4:	9c 91       	ld	r25, X
    1ba6:	17 97       	sbiw	r26, 0x07	; 7
    1ba8:	01 96       	adiw	r24, 0x01	; 1
    1baa:	17 96       	adiw	r26, 0x07	; 7
    1bac:	9c 93       	st	X, r25
    1bae:	8e 93       	st	-X, r24
    1bb0:	16 97       	sbiw	r26, 0x06	; 6
    1bb2:	ce 01       	movw	r24, r28
    1bb4:	df 91       	pop	r29
    1bb6:	cf 91       	pop	r28
    1bb8:	1f 91       	pop	r17
    1bba:	0f 91       	pop	r16
    1bbc:	08 95       	ret

00001bbe <__ultoa_invert>:
    1bbe:	fa 01       	movw	r30, r20
    1bc0:	aa 27       	eor	r26, r26
    1bc2:	28 30       	cpi	r18, 0x08	; 8
    1bc4:	51 f1       	breq	.+84     	; 0x1c1a <__ultoa_invert+0x5c>
    1bc6:	20 31       	cpi	r18, 0x10	; 16
    1bc8:	81 f1       	breq	.+96     	; 0x1c2a <__ultoa_invert+0x6c>
    1bca:	e8 94       	clt
    1bcc:	6f 93       	push	r22
    1bce:	6e 7f       	andi	r22, 0xFE	; 254
    1bd0:	6e 5f       	subi	r22, 0xFE	; 254
    1bd2:	7f 4f       	sbci	r23, 0xFF	; 255
    1bd4:	8f 4f       	sbci	r24, 0xFF	; 255
    1bd6:	9f 4f       	sbci	r25, 0xFF	; 255
    1bd8:	af 4f       	sbci	r26, 0xFF	; 255
    1bda:	b1 e0       	ldi	r27, 0x01	; 1
    1bdc:	3e d0       	rcall	.+124    	; 0x1c5a <__ultoa_invert+0x9c>
    1bde:	b4 e0       	ldi	r27, 0x04	; 4
    1be0:	3c d0       	rcall	.+120    	; 0x1c5a <__ultoa_invert+0x9c>
    1be2:	67 0f       	add	r22, r23
    1be4:	78 1f       	adc	r23, r24
    1be6:	89 1f       	adc	r24, r25
    1be8:	9a 1f       	adc	r25, r26
    1bea:	a1 1d       	adc	r26, r1
    1bec:	68 0f       	add	r22, r24
    1bee:	79 1f       	adc	r23, r25
    1bf0:	8a 1f       	adc	r24, r26
    1bf2:	91 1d       	adc	r25, r1
    1bf4:	a1 1d       	adc	r26, r1
    1bf6:	6a 0f       	add	r22, r26
    1bf8:	71 1d       	adc	r23, r1
    1bfa:	81 1d       	adc	r24, r1
    1bfc:	91 1d       	adc	r25, r1
    1bfe:	a1 1d       	adc	r26, r1
    1c00:	20 d0       	rcall	.+64     	; 0x1c42 <__ultoa_invert+0x84>
    1c02:	09 f4       	brne	.+2      	; 0x1c06 <__ultoa_invert+0x48>
    1c04:	68 94       	set
    1c06:	3f 91       	pop	r19
    1c08:	2a e0       	ldi	r18, 0x0A	; 10
    1c0a:	26 9f       	mul	r18, r22
    1c0c:	11 24       	eor	r1, r1
    1c0e:	30 19       	sub	r19, r0
    1c10:	30 5d       	subi	r19, 0xD0	; 208
    1c12:	31 93       	st	Z+, r19
    1c14:	de f6       	brtc	.-74     	; 0x1bcc <__ultoa_invert+0xe>
    1c16:	cf 01       	movw	r24, r30
    1c18:	08 95       	ret
    1c1a:	46 2f       	mov	r20, r22
    1c1c:	47 70       	andi	r20, 0x07	; 7
    1c1e:	40 5d       	subi	r20, 0xD0	; 208
    1c20:	41 93       	st	Z+, r20
    1c22:	b3 e0       	ldi	r27, 0x03	; 3
    1c24:	0f d0       	rcall	.+30     	; 0x1c44 <__ultoa_invert+0x86>
    1c26:	c9 f7       	brne	.-14     	; 0x1c1a <__ultoa_invert+0x5c>
    1c28:	f6 cf       	rjmp	.-20     	; 0x1c16 <__ultoa_invert+0x58>
    1c2a:	46 2f       	mov	r20, r22
    1c2c:	4f 70       	andi	r20, 0x0F	; 15
    1c2e:	40 5d       	subi	r20, 0xD0	; 208
    1c30:	4a 33       	cpi	r20, 0x3A	; 58
    1c32:	18 f0       	brcs	.+6      	; 0x1c3a <__ultoa_invert+0x7c>
    1c34:	49 5d       	subi	r20, 0xD9	; 217
    1c36:	31 fd       	sbrc	r19, 1
    1c38:	40 52       	subi	r20, 0x20	; 32
    1c3a:	41 93       	st	Z+, r20
    1c3c:	02 d0       	rcall	.+4      	; 0x1c42 <__ultoa_invert+0x84>
    1c3e:	a9 f7       	brne	.-22     	; 0x1c2a <__ultoa_invert+0x6c>
    1c40:	ea cf       	rjmp	.-44     	; 0x1c16 <__ultoa_invert+0x58>
    1c42:	b4 e0       	ldi	r27, 0x04	; 4
    1c44:	a6 95       	lsr	r26
    1c46:	97 95       	ror	r25
    1c48:	87 95       	ror	r24
    1c4a:	77 95       	ror	r23
    1c4c:	67 95       	ror	r22
    1c4e:	ba 95       	dec	r27
    1c50:	c9 f7       	brne	.-14     	; 0x1c44 <__ultoa_invert+0x86>
    1c52:	00 97       	sbiw	r24, 0x00	; 0
    1c54:	61 05       	cpc	r22, r1
    1c56:	71 05       	cpc	r23, r1
    1c58:	08 95       	ret
    1c5a:	9b 01       	movw	r18, r22
    1c5c:	ac 01       	movw	r20, r24
    1c5e:	0a 2e       	mov	r0, r26
    1c60:	06 94       	lsr	r0
    1c62:	57 95       	ror	r21
    1c64:	47 95       	ror	r20
    1c66:	37 95       	ror	r19
    1c68:	27 95       	ror	r18
    1c6a:	ba 95       	dec	r27
    1c6c:	c9 f7       	brne	.-14     	; 0x1c60 <__ultoa_invert+0xa2>
    1c6e:	62 0f       	add	r22, r18
    1c70:	73 1f       	adc	r23, r19
    1c72:	84 1f       	adc	r24, r20
    1c74:	95 1f       	adc	r25, r21
    1c76:	a0 1d       	adc	r26, r0
    1c78:	08 95       	ret

00001c7a <__divmodsi4>:
    1c7a:	05 2e       	mov	r0, r21
    1c7c:	97 fb       	bst	r25, 7
    1c7e:	16 f4       	brtc	.+4      	; 0x1c84 <__divmodsi4+0xa>
    1c80:	00 94       	com	r0
    1c82:	0f d0       	rcall	.+30     	; 0x1ca2 <__negsi2>
    1c84:	57 fd       	sbrc	r21, 7
    1c86:	05 d0       	rcall	.+10     	; 0x1c92 <__divmodsi4_neg2>
    1c88:	92 dc       	rcall	.-1756   	; 0x15ae <__udivmodsi4>
    1c8a:	07 fc       	sbrc	r0, 7
    1c8c:	02 d0       	rcall	.+4      	; 0x1c92 <__divmodsi4_neg2>
    1c8e:	46 f4       	brtc	.+16     	; 0x1ca0 <__divmodsi4_exit>
    1c90:	08 c0       	rjmp	.+16     	; 0x1ca2 <__negsi2>

00001c92 <__divmodsi4_neg2>:
    1c92:	50 95       	com	r21
    1c94:	40 95       	com	r20
    1c96:	30 95       	com	r19
    1c98:	21 95       	neg	r18
    1c9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c9c:	4f 4f       	sbci	r20, 0xFF	; 255
    1c9e:	5f 4f       	sbci	r21, 0xFF	; 255

00001ca0 <__divmodsi4_exit>:
    1ca0:	08 95       	ret

00001ca2 <__negsi2>:
    1ca2:	90 95       	com	r25
    1ca4:	80 95       	com	r24
    1ca6:	70 95       	com	r23
    1ca8:	61 95       	neg	r22
    1caa:	7f 4f       	sbci	r23, 0xFF	; 255
    1cac:	8f 4f       	sbci	r24, 0xFF	; 255
    1cae:	9f 4f       	sbci	r25, 0xFF	; 255
    1cb0:	08 95       	ret

00001cb2 <__muluhisi3>:
    1cb2:	0f d0       	rcall	.+30     	; 0x1cd2 <__umulhisi3>
    1cb4:	a5 9f       	mul	r26, r21
    1cb6:	90 0d       	add	r25, r0
    1cb8:	b4 9f       	mul	r27, r20
    1cba:	90 0d       	add	r25, r0
    1cbc:	a4 9f       	mul	r26, r20
    1cbe:	80 0d       	add	r24, r0
    1cc0:	91 1d       	adc	r25, r1
    1cc2:	11 24       	eor	r1, r1
    1cc4:	08 95       	ret

00001cc6 <__mulshisi3>:
    1cc6:	b7 ff       	sbrs	r27, 7
    1cc8:	f4 cf       	rjmp	.-24     	; 0x1cb2 <__muluhisi3>

00001cca <__mulohisi3>:
    1cca:	f3 df       	rcall	.-26     	; 0x1cb2 <__muluhisi3>
    1ccc:	82 1b       	sub	r24, r18
    1cce:	93 0b       	sbc	r25, r19
    1cd0:	08 95       	ret

00001cd2 <__umulhisi3>:
    1cd2:	a2 9f       	mul	r26, r18
    1cd4:	b0 01       	movw	r22, r0
    1cd6:	b3 9f       	mul	r27, r19
    1cd8:	c0 01       	movw	r24, r0
    1cda:	a3 9f       	mul	r26, r19
    1cdc:	70 0d       	add	r23, r0
    1cde:	81 1d       	adc	r24, r1
    1ce0:	11 24       	eor	r1, r1
    1ce2:	91 1d       	adc	r25, r1
    1ce4:	b2 9f       	mul	r27, r18
    1ce6:	70 0d       	add	r23, r0
    1ce8:	81 1d       	adc	r24, r1
    1cea:	11 24       	eor	r1, r1
    1cec:	91 1d       	adc	r25, r1
    1cee:	08 95       	ret

00001cf0 <_exit>:
    1cf0:	f8 94       	cli

00001cf2 <__stop_program>:
    1cf2:	ff cf       	rjmp	.-2      	; 0x1cf2 <__stop_program>
